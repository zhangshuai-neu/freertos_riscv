
./FreeRTOSv9.0.0:     file format elf32-littleriscv


Disassembly of section .init:

20000000 <_start>:
// FreeRTOS从此处开始执行

_start:
	csrrci x0, mstatus, 0x8  //Disable the interrupt globally
.option push
.option norelax
20000000:	30047073          	csrci	mstatus,8
	la gp, __global_pointer$
.option pop
	la sp, _sp
20000004:	70001197          	auipc	gp,0x70001
20000008:	a2418193          	addi	gp,gp,-1500 # 90000a28 <__global_pointer$>

    #csrrsi x0, 0xbfe, 0x8 // Disable I-Cache
2000000c:	70010117          	auipc	sp,0x70010
20000010:	ff410113          	addi	sp,sp,-12 # 90010000 <_sp>

	/* Bob: Load code section from flash to ITCM */
	// 从flash加载到ITCM
	
	la a0, _itcm_lma
20000014:	00000517          	auipc	a0,0x0
20000018:	0a050513          	addi	a0,a0,160 # 200000b4 <_itcm_lma>
	la a1, _itcm
2000001c:	60000597          	auipc	a1,0x60000
20000020:	fe458593          	addi	a1,a1,-28 # 80000000 <_itcm>
    beq a0, a1, 2f  /*If the ITCM phy-address same as the logic-address, then quit*/
20000024:	02b50063          	beq	a0,a1,20000044 <_start+0x44>
	la a2, _eitcm
20000028:	60003617          	auipc	a2,0x60003
2000002c:	55c60613          	addi	a2,a2,1372 # 80003584 <_eitcm>
	bgeu a1, a2, 2f
20000030:	00c5fa63          	bleu	a2,a1,20000044 <_start+0x44>
1:
	lw t0, (a0)
20000034:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
20000038:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
2000003c:	0511                	addi	a0,a0,4
	addi a1, a1, 4
2000003e:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
20000040:	fec5eae3          	bltu	a1,a2,20000034 <_start+0x34>
2:

	/* Load data section */
	la a0, _data_lma
20000044:	00003517          	auipc	a0,0x3
20000048:	5f450513          	addi	a0,a0,1524 # 20003638 <_data_lma>
	la a1, _data
2000004c:	70000597          	auipc	a1,0x70000
20000050:	fb458593          	addi	a1,a1,-76 # 90000000 <_data>
	la a2, _edata
20000054:	81818613          	addi	a2,gp,-2024 # 90000240 <pxCurrentTCB>
	bgeu a1, a2, 2f
20000058:	00c5fa63          	bleu	a2,a1,2000006c <_start+0x6c>
1:
	lw t0, (a0)
2000005c:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
20000060:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
20000064:	0511                	addi	a0,a0,4
	addi a1, a1, 4
20000066:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
20000068:	fec5eae3          	bltu	a1,a2,2000005c <_start+0x5c>
2:

	/* Clear bss section */
	la a0, __bss_start
2000006c:	81818513          	addi	a0,gp,-2024 # 90000240 <pxCurrentTCB>
	la a1, _end
20000070:	70003597          	auipc	a1,0x70003
20000074:	0e858593          	addi	a1,a1,232 # 90003158 <_end>
	bgeu a0, a1, 2f
20000078:	00b57763          	bleu	a1,a0,20000086 <_start+0x86>
1:
	sw zero, (a0)
2000007c:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
20000080:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
20000082:	feb56de3          	bltu	a0,a1,2000007c <_start+0x7c>
2:

	/* Call global constructors */
	la a0, __libc_fini_array
20000086:	60002517          	auipc	a0,0x60002
2000008a:	f5050513          	addi	a0,a0,-176 # 80001fd6 <__libc_fini_array>
	call atexit
2000008e:	60002097          	auipc	ra,0x60002
20000092:	f16080e7          	jalr	-234(ra) # 80001fa4 <atexit>
	call __libc_init_array
20000096:	60002097          	auipc	ra,0x60002
2000009a:	f8c080e7          	jalr	-116(ra) # 80002022 <__libc_init_array>
	csrs mstatus, t0 
	csrw fcsr, x0   
#endif

	/* argc = argv = 0 */
	li a0, 0
2000009e:	4501                	li	a0,0
	li a1, 0
200000a0:	4581                	li	a1,0
	call main
200000a2:	60000097          	auipc	ra,0x60000
200000a6:	fa2080e7          	jalr	-94(ra) # 80000044 <main>
	tail exit
200000aa:	60002317          	auipc	t1,0x60002
200000ae:	f0430067          	jr	-252(t1) # 80001fae <exit>

1:
	j 1b
200000b2:	a001                	j	200000b2 <_start+0xb2>

Disassembly of section .text:

80000000 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
80000000:	87818793          	addi	a5,gp,-1928 # 900002a0 <xStart>
80000004:	4398                	lw	a4,0(a5)
80000006:	02a76d63          	bltu	a4,a0,80000040 <prvInsertBlockIntoFreeList+0x40>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
8000000a:	43d0                	lw	a2,4(a5)
8000000c:	00c786b3          	add	a3,a5,a2
80000010:	00d51663          	bne	a0,a3,8000001c <prvInsertBlockIntoFreeList+0x1c>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
80000014:	4154                	lw	a3,4(a0)
80000016:	853e                	mv	a0,a5
80000018:	96b2                	add	a3,a3,a2
8000001a:	c3d4                	sw	a3,4(a5)
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
8000001c:	4150                	lw	a2,4(a0)
8000001e:	00c506b3          	add	a3,a0,a2
80000022:	00d71a63          	bne	a4,a3,80000036 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
80000026:	8681a683          	lw	a3,-1944(gp) # 90000290 <pxEnd>
8000002a:	00d70663          	beq	a4,a3,80000036 <prvInsertBlockIntoFreeList+0x36>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
8000002e:	4354                	lw	a3,4(a4)
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
80000030:	4318                	lw	a4,0(a4)
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
80000032:	96b2                	add	a3,a3,a2
80000034:	c154                	sw	a3,4(a0)
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
80000036:	c118                	sw	a4,0(a0)

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
80000038:	00f50363          	beq	a0,a5,8000003e <prvInsertBlockIntoFreeList+0x3e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
8000003c:	c388                	sw	a0,0(a5)
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
8000003e:	8082                	ret
80000040:	87ba                	mv	a5,a4
80000042:	b7c9                	j	80000004 <prvInsertBlockIntoFreeList+0x4>

80000044 <main>:
// Instance data for the PLIC.
// g_plic 全局的plic实例
plic_instance_t g_plic;

int main(void)
{
80000044:	1141                	addi	sp,sp,-16
80000046:	c606                	sw	ra,12(sp)
80000048:	c422                	sw	s0,8(sp)
/*-----------------------------------------------------------*/

// 配置硬件
static void prvSetupHardware( void )
{
    interrupts_init();  // 中断
8000004a:	3c9010ef          	jal	ra,80001c12 <interrupts_init>
    led_init();         // led
8000004e:	41f010ef          	jal	ra,80001c6c <led_init>
    wake_irq_init();    // 唤醒中断初始化
80000052:	43d010ef          	jal	ra,80001c8e <wake_irq_init>
    xQueue = xQueueCreate(     /* The number of items the queue can hold. */
80000056:	4601                	li	a2,0
80000058:	4591                	li	a1,4
8000005a:	4505                	li	a0,1
8000005c:	21e5                	jal	80000544 <xQueueGenericCreate>
8000005e:	88a1ae23          	sw	a0,-1892(gp) # 900002c4 <xQueue>
    if(xQueue == NULL)	{
80000062:	e111                	bnez	a0,80000066 <main+0x22>
80000064:	a001                	j	80000064 <main+0x20>
    xTaskCreate(     /* The function that implements the task. */
80000066:	900005b7          	lui	a1,0x90000
8000006a:	80002537          	lui	a0,0x80002
8000006e:	4781                	li	a5,0
80000070:	4709                	li	a4,2
80000072:	4681                	li	a3,0
80000074:	25800613          	li	a2,600
80000078:	02058593          	addi	a1,a1,32 # 90000020 <_sp+0xffff0020>
8000007c:	a6050513          	addi	a0,a0,-1440 # 80001a60 <_sp+0xefff1a60>
80000080:	21b000ef          	jal	ra,80000a9a <xTaskCreate>
    xTaskCreate(     prvQueueSendTask,
80000084:	900005b7          	lui	a1,0x90000
80000088:	80002537          	lui	a0,0x80002
8000008c:	4781                	li	a5,0
8000008e:	4705                	li	a4,1
80000090:	4681                	li	a3,0
80000092:	1c200613          	li	a2,450
80000096:	02458593          	addi	a1,a1,36 # 90000024 <_sp+0xffff0024>
8000009a:	a2250513          	addi	a0,a0,-1502 # 80001a22 <_sp+0xefff1a22>
8000009e:	1fd000ef          	jal	ra,80000a9a <xTaskCreate>
    xEventSemaphore = xSemaphoreCreateBinary();
800000a2:	460d                	li	a2,3
800000a4:	4581                	li	a1,0
800000a6:	4505                	li	a0,1
800000a8:	2971                	jal	80000544 <xQueueGenericCreate>
800000aa:	88a1ac23          	sw	a0,-1896(gp) # 900002c0 <xEventSemaphore>
    if(xEventSemaphore == NULL)	{
800000ae:	e111                	bnez	a0,800000b2 <main+0x6e>
800000b0:	a001                	j	800000b0 <main+0x6c>
    xTaskCreate(     prvEventSemaphoreTask,
800000b2:	900005b7          	lui	a1,0x90000
800000b6:	80002537          	lui	a0,0x80002
800000ba:	4781                	li	a5,0
800000bc:	4709                	li	a4,2
800000be:	4681                	li	a3,0
800000c0:	1c200613          	li	a2,450
800000c4:	02858593          	addi	a1,a1,40 # 90000028 <_sp+0xffff0028>
800000c8:	9ee50513          	addi	a0,a0,-1554 # 800019ee <_sp+0xefff19ee>
800000cc:	1cf000ef          	jal	ra,80000a9a <xTaskCreate>
    xExampleSoftwareTimer = xTimerCreate(     /* A text name, purely to help
800000d0:	80002737          	lui	a4,0x80002
800000d4:	90000537          	lui	a0,0x90000
800000d8:	9c670713          	addi	a4,a4,-1594 # 800019c6 <_sp+0xefff19c6>
800000dc:	4681                	li	a3,0
800000de:	4605                	li	a2,1
800000e0:	0fa00593          	li	a1,250
800000e4:	02c50513          	addi	a0,a0,44 # 9000002c <_sp+0xffff002c>
800000e8:	2fc010ef          	jal	ra,800013e4 <xTimerCreate>
800000ec:	842a                	mv	s0,a0
    xTimerStart( xExampleSoftwareTimer, 0 );
800000ee:	3ef000ef          	jal	ra,80000cdc <xTaskGetTickCount>
800000f2:	862a                	mv	a2,a0
800000f4:	4701                	li	a4,0
800000f6:	4681                	li	a3,0
800000f8:	4585                	li	a1,1
800000fa:	8522                	mv	a0,s0
800000fc:	344010ef          	jal	ra,80001440 <xTimerGenericCommand>
    vTaskStartScheduler();
80000100:	36f000ef          	jal	ra,80000c6e <vTaskStartScheduler>
80000104:	a001                	j	80000104 <main+0xc0>
	...

80000110 <trap_entry>:
/* Interrupt entry point */
// 中断入口点
// 在init.c中被调用
trap_entry:
	/* Check for interrupt */
	pushREGFILE
80000110:	f7810113          	addi	sp,sp,-136
80000114:	c206                	sw	ra,4(sp)
80000116:	c40a                	sw	sp,8(sp)
80000118:	c812                	sw	tp,16(sp)
8000011a:	ca16                	sw	t0,20(sp)
8000011c:	cc1a                	sw	t1,24(sp)
8000011e:	ce1e                	sw	t2,28(sp)
80000120:	d022                	sw	s0,32(sp)
80000122:	d226                	sw	s1,36(sp)
80000124:	d42a                	sw	a0,40(sp)
80000126:	d62e                	sw	a1,44(sp)
80000128:	d832                	sw	a2,48(sp)
8000012a:	da36                	sw	a3,52(sp)
8000012c:	dc3a                	sw	a4,56(sp)
8000012e:	de3e                	sw	a5,60(sp)
80000130:	c0c2                	sw	a6,64(sp)
80000132:	c2c6                	sw	a7,68(sp)
80000134:	c4ca                	sw	s2,72(sp)
80000136:	c6ce                	sw	s3,76(sp)
80000138:	c8d2                	sw	s4,80(sp)
8000013a:	cad6                	sw	s5,84(sp)
8000013c:	ccda                	sw	s6,88(sp)
8000013e:	cede                	sw	s7,92(sp)
80000140:	d0e2                	sw	s8,96(sp)
80000142:	d2e6                	sw	s9,100(sp)
80000144:	d4ea                	sw	s10,104(sp)
80000146:	d6ee                	sw	s11,108(sp)
80000148:	d8f2                	sw	t3,112(sp)
8000014a:	daf6                	sw	t4,116(sp)
8000014c:	dcfa                	sw	t5,120(sp)
8000014e:	defe                	sw	t6,124(sp)
	csrr	a0, mcause			// mcause 最高位为1表示中断
80000150:	34202573          	csrr	a0,mcause
	blt		a0,zero,interrupt	// 小于零是中断(有符号数字)
80000154:	04054763          	bltz	a0,800001a2 <interrupt>
	//同步中断
	/* synchronous interrupt*/
	/* pass sp in a1 */
	mv a1,sp
80000158:	858a                	mv	a1,sp
	jal ulSynchTrap
8000015a:	6e8010ef          	jal	ra,80001842 <ulSynchTrap>
/*  adjust stack pointer back to where it was prior to ulSynchTrap  */
	mv		sp,a0
8000015e:	812a                	mv	sp,a0
	popREGFILE
80000160:	4092                	lw	ra,4(sp)
80000162:	4242                	lw	tp,16(sp)
80000164:	42d2                	lw	t0,20(sp)
80000166:	4362                	lw	t1,24(sp)
80000168:	43f2                	lw	t2,28(sp)
8000016a:	5402                	lw	s0,32(sp)
8000016c:	5492                	lw	s1,36(sp)
8000016e:	5522                	lw	a0,40(sp)
80000170:	55b2                	lw	a1,44(sp)
80000172:	5642                	lw	a2,48(sp)
80000174:	56d2                	lw	a3,52(sp)
80000176:	5762                	lw	a4,56(sp)
80000178:	57f2                	lw	a5,60(sp)
8000017a:	4806                	lw	a6,64(sp)
8000017c:	4896                	lw	a7,68(sp)
8000017e:	4926                	lw	s2,72(sp)
80000180:	49b6                	lw	s3,76(sp)
80000182:	4a46                	lw	s4,80(sp)
80000184:	4ad6                	lw	s5,84(sp)
80000186:	4b66                	lw	s6,88(sp)
80000188:	4bf6                	lw	s7,92(sp)
8000018a:	5c06                	lw	s8,96(sp)
8000018c:	5c96                	lw	s9,100(sp)
8000018e:	5d26                	lw	s10,104(sp)
80000190:	5db6                	lw	s11,108(sp)
80000192:	5e46                	lw	t3,112(sp)
80000194:	5ed6                	lw	t4,116(sp)
80000196:	5f66                	lw	t5,120(sp)
80000198:	5ff6                	lw	t6,124(sp)
8000019a:	08810113          	addi	sp,sp,136
	mret
8000019e:	30200073          	mret

800001a2 <interrupt>:

/* async interrupt, this function is called */
// 异步中断
interrupt:
	li      t0,INT_MASK			// 取出低31位
800001a2:	800002b7          	lui	t0,0x80000
800001a6:	fff28293          	addi	t0,t0,-1 # 7fffffff <_sp+0xeffeffff>
	and     a0,a0,t0
800001aa:	00557533          	and	a0,a0,t0
	li      t0, 0x7
800001ae:	429d                	li	t0,7
	beq     a0,t0, MTIME_IRQ	// 时钟中断
800001b0:	04550663          	beq	a0,t0,800001fc <MTIME_IRQ>
	/* Interupt not m-time interrupt  */
	/* pass the exception code in a0 */
	jal 	handle_interrupt
800001b4:	1e3010ef          	jal	ra,80001b96 <handle_interrupt>
	portRESTORE_X2
800001b8:	4122                	lw	sp,8(sp)
	popREGFILE
800001ba:	4092                	lw	ra,4(sp)
800001bc:	4242                	lw	tp,16(sp)
800001be:	42d2                	lw	t0,20(sp)
800001c0:	4362                	lw	t1,24(sp)
800001c2:	43f2                	lw	t2,28(sp)
800001c4:	5402                	lw	s0,32(sp)
800001c6:	5492                	lw	s1,36(sp)
800001c8:	5522                	lw	a0,40(sp)
800001ca:	55b2                	lw	a1,44(sp)
800001cc:	5642                	lw	a2,48(sp)
800001ce:	56d2                	lw	a3,52(sp)
800001d0:	5762                	lw	a4,56(sp)
800001d2:	57f2                	lw	a5,60(sp)
800001d4:	4806                	lw	a6,64(sp)
800001d6:	4896                	lw	a7,68(sp)
800001d8:	4926                	lw	s2,72(sp)
800001da:	49b6                	lw	s3,76(sp)
800001dc:	4a46                	lw	s4,80(sp)
800001de:	4ad6                	lw	s5,84(sp)
800001e0:	4b66                	lw	s6,88(sp)
800001e2:	4bf6                	lw	s7,92(sp)
800001e4:	5c06                	lw	s8,96(sp)
800001e6:	5c96                	lw	s9,100(sp)
800001e8:	5d26                	lw	s10,104(sp)
800001ea:	5db6                	lw	s11,108(sp)
800001ec:	5e46                	lw	t3,112(sp)
800001ee:	5ed6                	lw	t4,116(sp)
800001f0:	5f66                	lw	t5,120(sp)
800001f2:	5ff6                	lw	t6,124(sp)
800001f4:	08810113          	addi	sp,sp,136
	mret
800001f8:	30200073          	mret

800001fc <MTIME_IRQ>:

	/* Interupt is m-time  */
MTIME_IRQ:
	portSAVE_CONTEXT
800001fc:	300022f3          	csrr	t0,mstatus
80000200:	c116                	sw	t0,128(sp)
80000202:	8181a283          	lw	t0,-2024(gp) # 90000240 <pxCurrentTCB>
80000206:	0022a023          	sw	sp,0(t0)
	portSAVE_EPC
8000020a:	341022f3          	csrr	t0,mepc
8000020e:	c316                	sw	t0,132(sp)
	jal		vPortSysTickHandler
80000210:	710010ef          	jal	ra,80001920 <vPortSysTickHandler>
	portRESTORE_CONTEXT
80000214:	8181a103          	lw	sp,-2024(gp) # 90000240 <pxCurrentTCB>
80000218:	4102                	lw	sp,0(sp)
8000021a:	429a                	lw	t0,132(sp)
8000021c:	34129073          	csrw	mepc,t0
80000220:	428a                	lw	t0,128(sp)
80000222:	30029073          	csrw	mstatus,t0
	popREGFILE
80000226:	4092                	lw	ra,4(sp)
80000228:	4242                	lw	tp,16(sp)
8000022a:	42d2                	lw	t0,20(sp)
8000022c:	4362                	lw	t1,24(sp)
8000022e:	43f2                	lw	t2,28(sp)
80000230:	5402                	lw	s0,32(sp)
80000232:	5492                	lw	s1,36(sp)
80000234:	5522                	lw	a0,40(sp)
80000236:	55b2                	lw	a1,44(sp)
80000238:	5642                	lw	a2,48(sp)
8000023a:	56d2                	lw	a3,52(sp)
8000023c:	5762                	lw	a4,56(sp)
8000023e:	57f2                	lw	a5,60(sp)
80000240:	4806                	lw	a6,64(sp)
80000242:	4896                	lw	a7,68(sp)
80000244:	4926                	lw	s2,72(sp)
80000246:	49b6                	lw	s3,76(sp)
80000248:	4a46                	lw	s4,80(sp)
8000024a:	4ad6                	lw	s5,84(sp)
8000024c:	4b66                	lw	s6,88(sp)
8000024e:	4bf6                	lw	s7,92(sp)
80000250:	5c06                	lw	s8,96(sp)
80000252:	5c96                	lw	s9,100(sp)
80000254:	5d26                	lw	s10,104(sp)
80000256:	5db6                	lw	s11,108(sp)
80000258:	5e46                	lw	t3,112(sp)
8000025a:	5ed6                	lw	t4,116(sp)
8000025c:	5f66                	lw	t5,120(sp)
8000025e:	5ff6                	lw	t6,124(sp)
80000260:	08810113          	addi	sp,sp,136
	mret
80000264:	30200073          	mret

80000268 <xPortStartScheduler>:

xPortStartScheduler:
	jal		vPortSetup
80000268:	74c010ef          	jal	ra,800019b4 <vPortSetup>
	portRESTORE_CONTEXT
8000026c:	8181a103          	lw	sp,-2024(gp) # 90000240 <pxCurrentTCB>
80000270:	4102                	lw	sp,0(sp)
80000272:	429a                	lw	t0,132(sp)
80000274:	34129073          	csrw	mepc,t0
80000278:	428a                	lw	t0,128(sp)
8000027a:	30029073          	csrw	mstatus,t0
	popREGFILE
8000027e:	4092                	lw	ra,4(sp)
80000280:	4242                	lw	tp,16(sp)
80000282:	42d2                	lw	t0,20(sp)
80000284:	4362                	lw	t1,24(sp)
80000286:	43f2                	lw	t2,28(sp)
80000288:	5402                	lw	s0,32(sp)
8000028a:	5492                	lw	s1,36(sp)
8000028c:	5522                	lw	a0,40(sp)
8000028e:	55b2                	lw	a1,44(sp)
80000290:	5642                	lw	a2,48(sp)
80000292:	56d2                	lw	a3,52(sp)
80000294:	5762                	lw	a4,56(sp)
80000296:	57f2                	lw	a5,60(sp)
80000298:	4806                	lw	a6,64(sp)
8000029a:	4896                	lw	a7,68(sp)
8000029c:	4926                	lw	s2,72(sp)
8000029e:	49b6                	lw	s3,76(sp)
800002a0:	4a46                	lw	s4,80(sp)
800002a2:	4ad6                	lw	s5,84(sp)
800002a4:	4b66                	lw	s6,88(sp)
800002a6:	4bf6                	lw	s7,92(sp)
800002a8:	5c06                	lw	s8,96(sp)
800002aa:	5c96                	lw	s9,100(sp)
800002ac:	5d26                	lw	s10,104(sp)
800002ae:	5db6                	lw	s11,108(sp)
800002b0:	5e46                	lw	t3,112(sp)
800002b2:	5ed6                	lw	t4,116(sp)
800002b4:	5f66                	lw	t5,120(sp)
800002b6:	5ff6                	lw	t6,124(sp)
800002b8:	08810113          	addi	sp,sp,136
	mret
800002bc:	30200073          	mret

800002c0 <vPortYield>:


// 
vPortYield:
/*  adjust stack pointer back to where it was prior to ulSynchTrap  */
	mv		sp,a0
800002c0:	812a                	mv	sp,a0
	portSAVE_CONTEXT
800002c2:	300022f3          	csrr	t0,mstatus
800002c6:	c116                	sw	t0,128(sp)
800002c8:	8181a283          	lw	t0,-2024(gp) # 90000240 <pxCurrentTCB>
800002cc:	0022a023          	sw	sp,0(t0)

/* context return point was passed back to this function in a1 */
	STORE	a1, 33 * REGBYTES(sp)
800002d0:	c32e                	sw	a1,132(sp)
    /* switch context */
	jal		vTaskSwitchContext
800002d2:	51f000ef          	jal	ra,80000ff0 <vTaskSwitchContext>
	portRESTORE_CONTEXT
800002d6:	8181a103          	lw	sp,-2024(gp) # 90000240 <pxCurrentTCB>
800002da:	4102                	lw	sp,0(sp)
800002dc:	429a                	lw	t0,132(sp)
800002de:	34129073          	csrw	mepc,t0
800002e2:	428a                	lw	t0,128(sp)
800002e4:	30029073          	csrw	mstatus,t0
	popREGFILE
800002e8:	4092                	lw	ra,4(sp)
800002ea:	4242                	lw	tp,16(sp)
800002ec:	42d2                	lw	t0,20(sp)
800002ee:	4362                	lw	t1,24(sp)
800002f0:	43f2                	lw	t2,28(sp)
800002f2:	5402                	lw	s0,32(sp)
800002f4:	5492                	lw	s1,36(sp)
800002f6:	5522                	lw	a0,40(sp)
800002f8:	55b2                	lw	a1,44(sp)
800002fa:	5642                	lw	a2,48(sp)
800002fc:	56d2                	lw	a3,52(sp)
800002fe:	5762                	lw	a4,56(sp)
80000300:	57f2                	lw	a5,60(sp)
80000302:	4806                	lw	a6,64(sp)
80000304:	4896                	lw	a7,68(sp)
80000306:	4926                	lw	s2,72(sp)
80000308:	49b6                	lw	s3,76(sp)
8000030a:	4a46                	lw	s4,80(sp)
8000030c:	4ad6                	lw	s5,84(sp)
8000030e:	4b66                	lw	s6,88(sp)
80000310:	4bf6                	lw	s7,92(sp)
80000312:	5c06                	lw	s8,96(sp)
80000314:	5c96                	lw	s9,100(sp)
80000316:	5d26                	lw	s10,104(sp)
80000318:	5db6                	lw	s11,108(sp)
8000031a:	5e46                	lw	t3,112(sp)
8000031c:	5ed6                	lw	t4,116(sp)
8000031e:	5f66                	lw	t5,120(sp)
80000320:	5ff6                	lw	t6,124(sp)
80000322:	08810113          	addi	sp,sp,136
	mret
80000326:	30200073          	mret

8000032a <vPortEndScheduler>:

// 终止调度器
vPortEndScheduler:
1:
	j		1b
8000032a:	a001                	j	8000032a <vPortEndScheduler>

// 处理中断
.weak handle_interrupt
handle_interrupt:
1:
  j 1b
8000032c:	a001                	j	8000032c <vPortEndScheduler+0x2>

8000032e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000032e:	00850793          	addi	a5,a0,8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80000332:	577d                	li	a4,-1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80000334:	c15c                	sw	a5,4(a0)
	pxList->xListEnd.xItemValue = portMAX_DELAY;
80000336:	c518                	sw	a4,8(a0)

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80000338:	c55c                	sw	a5,12(a0)
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
8000033a:	c91c                	sw	a5,16(a0)

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
8000033c:	00052023          	sw	zero,0(a0)

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
80000340:	8082                	ret

80000342 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
80000342:	00052823          	sw	zero,16(a0)

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
80000346:	8082                	ret

80000348 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
80000348:	415c                	lw	a5,4(a0)

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
8000034a:	4798                	lw	a4,8(a5)
	pxNewListItem->pxNext = pxIndex;
8000034c:	c1dc                	sw	a5,4(a1)
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
8000034e:	c598                	sw	a4,8(a1)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
80000350:	4798                	lw	a4,8(a5)
80000352:	c34c                	sw	a1,4(a4)
	pxIndex->pxPrevious = pxNewListItem;
80000354:	c78c                	sw	a1,8(a5)

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
80000356:	411c                	lw	a5,0(a0)
	pxNewListItem->pvContainer = ( void * ) pxList;
80000358:	c988                	sw	a0,16(a1)
	( pxList->uxNumberOfItems )++;
8000035a:	0785                	addi	a5,a5,1
8000035c:	c11c                	sw	a5,0(a0)
}
8000035e:	8082                	ret

80000360 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
80000360:	4198                	lw	a4,0(a1)
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
80000362:	56fd                	li	a3,-1
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80000364:	00850793          	addi	a5,a0,8
	if( xValueOfInsertion == portMAX_DELAY )
80000368:	00d71e63          	bne	a4,a3,80000384 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
8000036c:	491c                	lw	a5,16(a0)
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
8000036e:	43d8                	lw	a4,4(a5)
80000370:	c1d8                	sw	a4,4(a1)
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
80000372:	c70c                	sw	a1,8(a4)
	pxNewListItem->pxPrevious = pxIterator;
80000374:	c59c                	sw	a5,8(a1)
	pxIterator->pxNext = pxNewListItem;
80000376:	c3cc                	sw	a1,4(a5)

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
80000378:	411c                	lw	a5,0(a0)
	pxNewListItem->pvContainer = ( void * ) pxList;
8000037a:	c988                	sw	a0,16(a1)
	( pxList->uxNumberOfItems )++;
8000037c:	0785                	addi	a5,a5,1
8000037e:	c11c                	sw	a5,0(a0)
}
80000380:	8082                	ret
80000382:	87b6                	mv	a5,a3
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
80000384:	43d4                	lw	a3,4(a5)
80000386:	4290                	lw	a2,0(a3)
80000388:	fec77de3          	bleu	a2,a4,80000382 <vListInsert+0x22>
8000038c:	b7cd                	j	8000036e <vListInsert+0xe>

8000038e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
8000038e:	4154                	lw	a3,4(a0)
80000390:	4518                	lw	a4,8(a0)
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
80000392:	491c                	lw	a5,16(a0)
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
80000394:	c698                	sw	a4,8(a3)
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
80000396:	4518                	lw	a4,8(a0)
80000398:	c354                	sw	a3,4(a4)

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
8000039a:	43d4                	lw	a3,4(a5)
8000039c:	00a69363          	bne	a3,a0,800003a2 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
800003a0:	c3d8                	sw	a4,4(a5)
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
800003a2:	00052823          	sw	zero,16(a0)
	( pxList->uxNumberOfItems )--;
800003a6:	4388                	lw	a0,0(a5)
800003a8:	157d                	addi	a0,a0,-1
800003aa:	c388                	sw	a0,0(a5)

	return pxList->uxNumberOfItems;
}
800003ac:	8082                	ret

800003ae <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
800003ae:	1141                	addi	sp,sp,-16
800003b0:	c04a                	sw	s2,0(sp)
800003b2:	8932                	mv	s2,a2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
800003b4:	4130                	lw	a2,64(a0)
{
800003b6:	c226                	sw	s1,4(sp)
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
800003b8:	5d04                	lw	s1,56(a0)
{
800003ba:	c422                	sw	s0,8(sp)
800003bc:	c606                	sw	ra,12(sp)
800003be:	842a                	mv	s0,a0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
800003c0:	e20d                	bnez	a2,800003e2 <prvCopyDataToQueue+0x34>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800003c2:	411c                	lw	a5,0(a0)
BaseType_t xReturn = pdFALSE;
800003c4:	4501                	li	a0,0
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800003c6:	e791                	bnez	a5,800003d2 <prvCopyDataToQueue+0x24>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
800003c8:	4048                	lw	a0,4(s0)
800003ca:	6bb000ef          	jal	ra,80001284 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
800003ce:	00042223          	sw	zero,4(s0)
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
800003d2:	0485                	addi	s1,s1,1
800003d4:	dc04                	sw	s1,56(s0)

	return xReturn;
}
800003d6:	40b2                	lw	ra,12(sp)
800003d8:	4422                	lw	s0,8(sp)
800003da:	4492                	lw	s1,4(sp)
800003dc:	4902                	lw	s2,0(sp)
800003de:	0141                	addi	sp,sp,16
800003e0:	8082                	ret
	else if( xPosition == queueSEND_TO_BACK )
800003e2:	02091063          	bnez	s2,80000402 <prvCopyDataToQueue+0x54>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
800003e6:	4508                	lw	a0,8(a0)
800003e8:	4e5010ef          	jal	ra,800020cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
800003ec:	441c                	lw	a5,8(s0)
800003ee:	4038                	lw	a4,64(s0)
BaseType_t xReturn = pdFALSE;
800003f0:	4501                	li	a0,0
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
800003f2:	97ba                	add	a5,a5,a4
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
800003f4:	4058                	lw	a4,4(s0)
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
800003f6:	c41c                	sw	a5,8(s0)
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
800003f8:	fce7ede3          	bltu	a5,a4,800003d2 <prvCopyDataToQueue+0x24>
			pxQueue->pcWriteTo = pxQueue->pcHead;
800003fc:	401c                	lw	a5,0(s0)
800003fe:	c41c                	sw	a5,8(s0)
80000400:	bfc9                	j	800003d2 <prvCopyDataToQueue+0x24>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000402:	4548                	lw	a0,12(a0)
80000404:	4c9010ef          	jal	ra,800020cc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
80000408:	403c                	lw	a5,64(s0)
8000040a:	4458                	lw	a4,12(s0)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
8000040c:	4014                	lw	a3,0(s0)
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
8000040e:	40f007b3          	neg	a5,a5
80000412:	973e                	add	a4,a4,a5
80000414:	c458                	sw	a4,12(s0)
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
80000416:	00d77563          	bleu	a3,a4,80000420 <prvCopyDataToQueue+0x72>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
8000041a:	4058                	lw	a4,4(s0)
8000041c:	97ba                	add	a5,a5,a4
8000041e:	c45c                	sw	a5,12(s0)
		if( xPosition == queueOVERWRITE )
80000420:	4789                	li	a5,2
BaseType_t xReturn = pdFALSE;
80000422:	4501                	li	a0,0
		if( xPosition == queueOVERWRITE )
80000424:	faf917e3          	bne	s2,a5,800003d2 <prvCopyDataToQueue+0x24>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
80000428:	d4cd                	beqz	s1,800003d2 <prvCopyDataToQueue+0x24>
				--uxMessagesWaiting;
8000042a:	14fd                	addi	s1,s1,-1
8000042c:	b75d                	j	800003d2 <prvCopyDataToQueue+0x24>

8000042e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
8000042e:	87aa                	mv	a5,a0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
80000430:	43b0                	lw	a2,64(a5)
{
80000432:	852e                	mv	a0,a1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
80000434:	ce01                	beqz	a2,8000044c <prvCopyDataFromQueue+0x1e>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
80000436:	47d8                	lw	a4,12(a5)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
80000438:	43d4                	lw	a3,4(a5)
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
8000043a:	9732                	add	a4,a4,a2
8000043c:	c7d8                	sw	a4,12(a5)
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
8000043e:	00d76463          	bltu	a4,a3,80000446 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
80000442:	4398                	lw	a4,0(a5)
80000444:	c7d8                	sw	a4,12(a5)
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
80000446:	47cc                	lw	a1,12(a5)
80000448:	4850106f          	j	800020cc <memcpy>
	}
}
8000044c:	8082                	ret

8000044e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
8000044e:	1141                	addi	sp,sp,-16
80000450:	c422                	sw	s0,8(sp)
80000452:	842a                	mv	s0,a0
80000454:	c226                	sw	s1,4(sp)
80000456:	c04a                	sw	s2,0(sp)
80000458:	c606                	sw	ra,12(sp)

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
8000045a:	46a010ef          	jal	ra,800018c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
8000045e:	04544483          	lbu	s1,69(s0)
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80000462:	02440913          	addi	s2,s0,36
		int8_t cTxLock = pxQueue->cTxLock;
80000466:	04e2                	slli	s1,s1,0x18
80000468:	84e1                	srai	s1,s1,0x18
		while( cTxLock > queueLOCKED_UNMODIFIED )
8000046a:	02904b63          	bgtz	s1,800004a0 <prvUnlockQueue+0x52>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
8000046e:	57fd                	li	a5,-1
80000470:	04f402a3          	sb	a5,69(s0)
	}
	taskEXIT_CRITICAL();
80000474:	460010ef          	jal	ra,800018d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
80000478:	44c010ef          	jal	ra,800018c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
8000047c:	04444483          	lbu	s1,68(s0)

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80000480:	01040913          	addi	s2,s0,16
		int8_t cRxLock = pxQueue->cRxLock;
80000484:	04e2                	slli	s1,s1,0x18
80000486:	84e1                	srai	s1,s1,0x18
		while( cRxLock > queueLOCKED_UNMODIFIED )
80000488:	02904863          	bgtz	s1,800004b8 <prvUnlockQueue+0x6a>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
8000048c:	57fd                	li	a5,-1
8000048e:	04f40223          	sb	a5,68(s0)
	}
	taskEXIT_CRITICAL();
}
80000492:	4422                	lw	s0,8(sp)
80000494:	40b2                	lw	ra,12(sp)
80000496:	4492                	lw	s1,4(sp)
80000498:	4902                	lw	s2,0(sp)
8000049a:	0141                	addi	sp,sp,16
	taskEXIT_CRITICAL();
8000049c:	4380106f          	j	800018d4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800004a0:	505c                	lw	a5,36(s0)
800004a2:	d7f1                	beqz	a5,8000046e <prvUnlockQueue+0x20>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800004a4:	854a                	mv	a0,s2
800004a6:	43d000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
800004aa:	c119                	beqz	a0,800004b0 <prvUnlockQueue+0x62>
						vTaskMissedYield();
800004ac:	52b000ef          	jal	ra,800011d6 <vTaskMissedYield>
800004b0:	14fd                	addi	s1,s1,-1
800004b2:	04e2                	slli	s1,s1,0x18
800004b4:	84e1                	srai	s1,s1,0x18
800004b6:	bf55                	j	8000046a <prvUnlockQueue+0x1c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
800004b8:	481c                	lw	a5,16(s0)
800004ba:	dbe9                	beqz	a5,8000048c <prvUnlockQueue+0x3e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
800004bc:	854a                	mv	a0,s2
800004be:	425000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
800004c2:	c119                	beqz	a0,800004c8 <prvUnlockQueue+0x7a>
					vTaskMissedYield();
800004c4:	513000ef          	jal	ra,800011d6 <vTaskMissedYield>
800004c8:	14fd                	addi	s1,s1,-1
800004ca:	04e2                	slli	s1,s1,0x18
800004cc:	84e1                	srai	s1,s1,0x18
800004ce:	bf6d                	j	80000488 <prvUnlockQueue+0x3a>

800004d0 <xQueueGenericReset>:
	configASSERT( pxQueue );
800004d0:	e501                	bnez	a0,800004d8 <xQueueGenericReset+0x8>
800004d2:	300477f3          	csrrci	a5,mstatus,8
800004d6:	a001                	j	800004d6 <xQueueGenericReset+0x6>
{
800004d8:	1141                	addi	sp,sp,-16
800004da:	c422                	sw	s0,8(sp)
800004dc:	c226                	sw	s1,4(sp)
800004de:	842a                	mv	s0,a0
800004e0:	c606                	sw	ra,12(sp)
800004e2:	84ae                	mv	s1,a1
	taskENTER_CRITICAL();
800004e4:	3e0010ef          	jal	ra,800018c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
800004e8:	4030                	lw	a2,64(s0)
800004ea:	5c58                	lw	a4,60(s0)
800004ec:	4014                	lw	a3,0(s0)
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
800004ee:	02042c23          	sw	zero,56(s0)
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
800004f2:	02e607b3          	mul	a5,a2,a4
		pxQueue->pcWriteTo = pxQueue->pcHead;
800004f6:	c414                	sw	a3,8(s0)
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
800004f8:	00f68733          	add	a4,a3,a5
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
800004fc:	8f91                	sub	a5,a5,a2
800004fe:	97b6                	add	a5,a5,a3
80000500:	c45c                	sw	a5,12(s0)
		pxQueue->cRxLock = queueUNLOCKED;
80000502:	57fd                	li	a5,-1
80000504:	04f40223          	sb	a5,68(s0)
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
80000508:	c058                	sw	a4,4(s0)
		pxQueue->cTxLock = queueUNLOCKED;
8000050a:	04f402a3          	sb	a5,69(s0)
		if( xNewQueue == pdFALSE )
8000050e:	e485                	bnez	s1,80000536 <xQueueGenericReset+0x66>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80000510:	481c                	lw	a5,16(s0)
80000512:	cb91                	beqz	a5,80000526 <xQueueGenericReset+0x56>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80000514:	01040513          	addi	a0,s0,16
80000518:	3cb000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
8000051c:	c509                	beqz	a0,80000526 <xQueueGenericReset+0x56>
					queueYIELD_IF_USING_PREEMPTION();
8000051e:	02800613          	li	a2,40
80000522:	00000073          	ecall
	taskEXIT_CRITICAL();
80000526:	3ae010ef          	jal	ra,800018d4 <vPortExitCritical>
}
8000052a:	40b2                	lw	ra,12(sp)
8000052c:	4422                	lw	s0,8(sp)
8000052e:	4492                	lw	s1,4(sp)
80000530:	4505                	li	a0,1
80000532:	0141                	addi	sp,sp,16
80000534:	8082                	ret
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
80000536:	01040513          	addi	a0,s0,16
8000053a:	3bd5                	jal	8000032e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
8000053c:	02440513          	addi	a0,s0,36
80000540:	33fd                	jal	8000032e <vListInitialise>
80000542:	b7d5                	j	80000526 <xQueueGenericReset+0x56>

80000544 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
80000544:	e501                	bnez	a0,8000054c <xQueueGenericCreate+0x8>
80000546:	300477f3          	csrrci	a5,mstatus,8
8000054a:	a001                	j	8000054a <xQueueGenericCreate+0x6>
	{
8000054c:	1141                	addi	sp,sp,-16
8000054e:	c04a                	sw	s2,0(sp)
80000550:	892a                	mv	s2,a0
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000552:	02b50533          	mul	a0,a0,a1
	{
80000556:	c422                	sw	s0,8(sp)
80000558:	c226                	sw	s1,4(sp)
8000055a:	c606                	sw	ra,12(sp)
8000055c:	84ae                	mv	s1,a1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
8000055e:	04850513          	addi	a0,a0,72
80000562:	138010ef          	jal	ra,8000169a <pvPortMalloc>
80000566:	842a                	mv	s0,a0
		if( pxNewQueue != NULL )
80000568:	c909                	beqz	a0,8000057a <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
8000056a:	ec99                	bnez	s1,80000588 <xQueueGenericCreate+0x44>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
8000056c:	c008                	sw	a0,0(s0)
	pxNewQueue->uxLength = uxQueueLength;
8000056e:	03242e23          	sw	s2,60(s0)
	pxNewQueue->uxItemSize = uxItemSize;
80000572:	c024                	sw	s1,64(s0)
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
80000574:	4585                	li	a1,1
80000576:	8522                	mv	a0,s0
80000578:	3fa1                	jal	800004d0 <xQueueGenericReset>
	}
8000057a:	8522                	mv	a0,s0
8000057c:	40b2                	lw	ra,12(sp)
8000057e:	4422                	lw	s0,8(sp)
80000580:	4492                	lw	s1,4(sp)
80000582:	4902                	lw	s2,0(sp)
80000584:	0141                	addi	sp,sp,16
80000586:	8082                	ret
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
80000588:	04850793          	addi	a5,a0,72
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
8000058c:	c11c                	sw	a5,0(a0)
8000058e:	b7c5                	j	8000056e <xQueueGenericCreate+0x2a>

80000590 <xQueueGenericSend>:
{
80000590:	7139                	addi	sp,sp,-64
80000592:	de06                	sw	ra,60(sp)
80000594:	dc22                	sw	s0,56(sp)
80000596:	da26                	sw	s1,52(sp)
80000598:	d84a                	sw	s2,48(sp)
8000059a:	d64e                	sw	s3,44(sp)
8000059c:	d452                	sw	s4,40(sp)
8000059e:	d256                	sw	s5,36(sp)
800005a0:	d05a                	sw	s6,32(sp)
800005a2:	c632                	sw	a2,12(sp)
	configASSERT( pxQueue );
800005a4:	e501                	bnez	a0,800005ac <xQueueGenericSend+0x1c>
800005a6:	300477f3          	csrrci	a5,mstatus,8
800005aa:	a001                	j	800005aa <xQueueGenericSend+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800005ac:	e591                	bnez	a1,800005b8 <xQueueGenericSend+0x28>
800005ae:	413c                	lw	a5,64(a0)
800005b0:	c781                	beqz	a5,800005b8 <xQueueGenericSend+0x28>
800005b2:	300477f3          	csrrci	a5,mstatus,8
800005b6:	a001                	j	800005b6 <xQueueGenericSend+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
800005b8:	4789                	li	a5,2
800005ba:	00f69963          	bne	a3,a5,800005cc <xQueueGenericSend+0x3c>
800005be:	5d58                	lw	a4,60(a0)
800005c0:	4785                	li	a5,1
800005c2:	00f70563          	beq	a4,a5,800005cc <xQueueGenericSend+0x3c>
800005c6:	300477f3          	csrrci	a5,mstatus,8
800005ca:	a001                	j	800005ca <xQueueGenericSend+0x3a>
800005cc:	84b6                	mv	s1,a3
800005ce:	8a2e                	mv	s4,a1
800005d0:	842a                	mv	s0,a0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
800005d2:	40d000ef          	jal	ra,800011de <xTaskGetSchedulerState>
800005d6:	e511                	bnez	a0,800005e2 <xQueueGenericSend+0x52>
800005d8:	47b2                	lw	a5,12(sp)
800005da:	c781                	beqz	a5,800005e2 <xQueueGenericSend+0x52>
800005dc:	300477f3          	csrrci	a5,mstatus,8
800005e0:	a001                	j	800005e0 <xQueueGenericSend+0x50>
800005e2:	4901                	li	s2,0
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
800005e4:	4a89                	li	s5,2
		prvLockQueue( pxQueue );
800005e6:	59fd                	li	s3,-1
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
800005e8:	01040b13          	addi	s6,s0,16
800005ec:	a89d                	j	80000662 <xQueueGenericSend+0xd2>
				if( xTicksToWait == ( TickType_t ) 0 )
800005ee:	47b2                	lw	a5,12(sp)
800005f0:	e789                	bnez	a5,800005fa <xQueueGenericSend+0x6a>
					taskEXIT_CRITICAL();
800005f2:	2e2010ef          	jal	ra,800018d4 <vPortExitCritical>
			return errQUEUE_FULL;
800005f6:	4501                	li	a0,0
800005f8:	a879                	j	80000696 <xQueueGenericSend+0x106>
				else if( xEntryTimeSet == pdFALSE )
800005fa:	00091563          	bnez	s2,80000604 <xQueueGenericSend+0x74>
					vTaskSetTimeOutState( &xTimeOut );
800005fe:	0828                	addi	a0,sp,24
80000600:	359000ef          	jal	ra,80001158 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
80000604:	2d0010ef          	jal	ra,800018d4 <vPortExitCritical>
		vTaskSuspendAll();
80000608:	6c8000ef          	jal	ra,80000cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
8000060c:	2b8010ef          	jal	ra,800018c4 <vPortEnterCritical>
80000610:	04444783          	lbu	a5,68(s0)
80000614:	07e2                	slli	a5,a5,0x18
80000616:	87e1                	srai	a5,a5,0x18
80000618:	01379463          	bne	a5,s3,80000620 <xQueueGenericSend+0x90>
8000061c:	04040223          	sb	zero,68(s0)
80000620:	04544783          	lbu	a5,69(s0)
80000624:	07e2                	slli	a5,a5,0x18
80000626:	87e1                	srai	a5,a5,0x18
80000628:	01379463          	bne	a5,s3,80000630 <xQueueGenericSend+0xa0>
8000062c:	040402a3          	sb	zero,69(s0)
80000630:	2a4010ef          	jal	ra,800018d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
80000634:	006c                	addi	a1,sp,12
80000636:	0828                	addi	a0,sp,24
80000638:	337000ef          	jal	ra,8000116e <xTaskCheckForTimeOut>
8000063c:	e159                	bnez	a0,800006c2 <xQueueGenericSend+0x132>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
8000063e:	286010ef          	jal	ra,800018c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
80000642:	5c18                	lw	a4,56(s0)
80000644:	5c5c                	lw	a5,60(s0)
80000646:	06f71263          	bne	a4,a5,800006aa <xQueueGenericSend+0x11a>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
8000064a:	28a010ef          	jal	ra,800018d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
8000064e:	45b2                	lw	a1,12(sp)
80000650:	855a                	mv	a0,s6
80000652:	239000ef          	jal	ra,8000108a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
80000656:	8522                	mv	a0,s0
80000658:	3bdd                	jal	8000044e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
8000065a:	7d0000ef          	jal	ra,80000e2a <xTaskResumeAll>
8000065e:	cd29                	beqz	a0,800006b8 <xQueueGenericSend+0x128>
80000660:	4905                	li	s2,1
		taskENTER_CRITICAL();
80000662:	262010ef          	jal	ra,800018c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80000666:	5c18                	lw	a4,56(s0)
80000668:	5c5c                	lw	a5,60(s0)
8000066a:	00f76463          	bltu	a4,a5,80000672 <xQueueGenericSend+0xe2>
8000066e:	f95490e3          	bne	s1,s5,800005ee <xQueueGenericSend+0x5e>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80000672:	8626                	mv	a2,s1
80000674:	85d2                	mv	a1,s4
80000676:	8522                	mv	a0,s0
80000678:	3b1d                	jal	800003ae <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
8000067a:	505c                	lw	a5,36(s0)
8000067c:	c789                	beqz	a5,80000686 <xQueueGenericSend+0xf6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
8000067e:	02440513          	addi	a0,s0,36
80000682:	261000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
80000686:	c509                	beqz	a0,80000690 <xQueueGenericSend+0x100>
						queueYIELD_IF_USING_PREEMPTION();
80000688:	02800613          	li	a2,40
8000068c:	00000073          	ecall
				taskEXIT_CRITICAL();
80000690:	244010ef          	jal	ra,800018d4 <vPortExitCritical>
				return pdPASS;
80000694:	4505                	li	a0,1
}
80000696:	50f2                	lw	ra,60(sp)
80000698:	5462                	lw	s0,56(sp)
8000069a:	54d2                	lw	s1,52(sp)
8000069c:	5942                	lw	s2,48(sp)
8000069e:	59b2                	lw	s3,44(sp)
800006a0:	5a22                	lw	s4,40(sp)
800006a2:	5a92                	lw	s5,36(sp)
800006a4:	5b02                	lw	s6,32(sp)
800006a6:	6121                	addi	sp,sp,64
800006a8:	8082                	ret
	taskEXIT_CRITICAL();
800006aa:	22a010ef          	jal	ra,800018d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
800006ae:	8522                	mv	a0,s0
800006b0:	3b79                	jal	8000044e <prvUnlockQueue>
				( void ) xTaskResumeAll();
800006b2:	778000ef          	jal	ra,80000e2a <xTaskResumeAll>
800006b6:	b76d                	j	80000660 <xQueueGenericSend+0xd0>
					portYIELD_WITHIN_API();
800006b8:	02800613          	li	a2,40
800006bc:	00000073          	ecall
800006c0:	b745                	j	80000660 <xQueueGenericSend+0xd0>
			prvUnlockQueue( pxQueue );
800006c2:	8522                	mv	a0,s0
800006c4:	3369                	jal	8000044e <prvUnlockQueue>
			( void ) xTaskResumeAll();
800006c6:	764000ef          	jal	ra,80000e2a <xTaskResumeAll>
800006ca:	b735                	j	800005f6 <xQueueGenericSend+0x66>

800006cc <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
800006cc:	e501                	bnez	a0,800006d4 <xQueueGenericSendFromISR+0x8>
800006ce:	300477f3          	csrrci	a5,mstatus,8
800006d2:	a001                	j	800006d2 <xQueueGenericSendFromISR+0x6>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
800006d4:	e591                	bnez	a1,800006e0 <xQueueGenericSendFromISR+0x14>
800006d6:	413c                	lw	a5,64(a0)
800006d8:	c781                	beqz	a5,800006e0 <xQueueGenericSendFromISR+0x14>
800006da:	300477f3          	csrrci	a5,mstatus,8
800006de:	a001                	j	800006de <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
800006e0:	4789                	li	a5,2
800006e2:	00f69963          	bne	a3,a5,800006f4 <xQueueGenericSendFromISR+0x28>
800006e6:	5d58                	lw	a4,60(a0)
800006e8:	4785                	li	a5,1
800006ea:	00f70563          	beq	a4,a5,800006f4 <xQueueGenericSendFromISR+0x28>
800006ee:	300477f3          	csrrci	a5,mstatus,8
800006f2:	a001                	j	800006f2 <xQueueGenericSendFromISR+0x26>
{
800006f4:	7179                	addi	sp,sp,-48
800006f6:	d422                	sw	s0,40(sp)
800006f8:	d04a                	sw	s2,32(sp)
800006fa:	842a                	mv	s0,a0
800006fc:	ce4e                	sw	s3,28(sp)
800006fe:	cc52                	sw	s4,24(sp)
80000700:	c62e                	sw	a1,12(sp)
80000702:	d606                	sw	ra,44(sp)
80000704:	d226                	sw	s1,36(sp)
80000706:	ca56                	sw	s5,20(sp)
80000708:	8936                	mv	s2,a3
8000070a:	89b2                	mv	s3,a2
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
8000070c:	1e8010ef          	jal	ra,800018f4 <xPortSetInterruptMask>
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80000710:	5c18                	lw	a4,56(s0)
80000712:	5c5c                	lw	a5,60(s0)
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
80000714:	8a2a                	mv	s4,a0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80000716:	45b2                	lw	a1,12(sp)
80000718:	00f76663          	bltu	a4,a5,80000724 <xQueueGenericSendFromISR+0x58>
8000071c:	4789                	li	a5,2
			xReturn = errQUEUE_FULL;
8000071e:	4481                	li	s1,0
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
80000720:	02f91163          	bne	s2,a5,80000742 <xQueueGenericSendFromISR+0x76>
			const int8_t cTxLock = pxQueue->cTxLock;
80000724:	04544483          	lbu	s1,69(s0)
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80000728:	864a                	mv	a2,s2
8000072a:	8522                	mv	a0,s0
			const int8_t cTxLock = pxQueue->cTxLock;
8000072c:	01849a93          	slli	s5,s1,0x18
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
80000730:	39bd                	jal	800003ae <prvCopyDataToQueue>
			const int8_t cTxLock = pxQueue->cTxLock;
80000732:	418ada93          	srai	s5,s5,0x18
			if( cTxLock == queueUNLOCKED )
80000736:	57fd                	li	a5,-1
80000738:	02fa9d63          	bne	s5,a5,80000772 <xQueueGenericSendFromISR+0xa6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
8000073c:	505c                	lw	a5,36(s0)
8000073e:	ef99                	bnez	a5,8000075c <xQueueGenericSendFromISR+0x90>
			xReturn = pdPASS;
80000740:	4485                	li	s1,1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
80000742:	8552                	mv	a0,s4
80000744:	1aa010ef          	jal	ra,800018ee <vPortClearInterruptMask>
}
80000748:	50b2                	lw	ra,44(sp)
8000074a:	5422                	lw	s0,40(sp)
8000074c:	8526                	mv	a0,s1
8000074e:	5902                	lw	s2,32(sp)
80000750:	5492                	lw	s1,36(sp)
80000752:	49f2                	lw	s3,28(sp)
80000754:	4a62                	lw	s4,24(sp)
80000756:	4ad2                	lw	s5,20(sp)
80000758:	6145                	addi	sp,sp,48
8000075a:	8082                	ret
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
8000075c:	02440513          	addi	a0,s0,36
80000760:	183000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
80000764:	dd71                	beqz	a0,80000740 <xQueueGenericSendFromISR+0x74>
							if( pxHigherPriorityTaskWoken != NULL )
80000766:	fc098de3          	beqz	s3,80000740 <xQueueGenericSendFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
8000076a:	4785                	li	a5,1
8000076c:	00f9a023          	sw	a5,0(s3)
80000770:	bfc1                	j	80000740 <xQueueGenericSendFromISR+0x74>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
80000772:	0485                	addi	s1,s1,1
80000774:	04e2                	slli	s1,s1,0x18
80000776:	84e1                	srai	s1,s1,0x18
80000778:	049402a3          	sb	s1,69(s0)
8000077c:	b7d1                	j	80000740 <xQueueGenericSendFromISR+0x74>

8000077e <xQueueGiveFromISR>:
	configASSERT( pxQueue );
8000077e:	e501                	bnez	a0,80000786 <xQueueGiveFromISR+0x8>
80000780:	300477f3          	csrrci	a5,mstatus,8
80000784:	a001                	j	80000784 <xQueueGiveFromISR+0x6>
	configASSERT( pxQueue->uxItemSize == 0 );
80000786:	413c                	lw	a5,64(a0)
80000788:	c781                	beqz	a5,80000790 <xQueueGiveFromISR+0x12>
8000078a:	300477f3          	csrrci	a5,mstatus,8
8000078e:	a001                	j	8000078e <xQueueGiveFromISR+0x10>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
80000790:	411c                	lw	a5,0(a0)
80000792:	e791                	bnez	a5,8000079e <xQueueGiveFromISR+0x20>
80000794:	415c                	lw	a5,4(a0)
80000796:	c781                	beqz	a5,8000079e <xQueueGiveFromISR+0x20>
80000798:	300477f3          	csrrci	a5,mstatus,8
8000079c:	a001                	j	8000079c <xQueueGiveFromISR+0x1e>
{
8000079e:	1101                	addi	sp,sp,-32
800007a0:	cc22                	sw	s0,24(sp)
800007a2:	ca26                	sw	s1,20(sp)
800007a4:	842a                	mv	s0,a0
800007a6:	c84a                	sw	s2,16(sp)
800007a8:	c64e                	sw	s3,12(sp)
800007aa:	ce06                	sw	ra,28(sp)
800007ac:	892e                	mv	s2,a1
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800007ae:	146010ef          	jal	ra,800018f4 <xPortSetInterruptMask>
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
800007b2:	5c18                	lw	a4,56(s0)
		if( uxMessagesWaiting < pxQueue->uxLength )
800007b4:	5c5c                	lw	a5,60(s0)
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
800007b6:	89aa                	mv	s3,a0
			xReturn = errQUEUE_FULL;
800007b8:	4481                	li	s1,0
		if( uxMessagesWaiting < pxQueue->uxLength )
800007ba:	00f77f63          	bleu	a5,a4,800007d8 <xQueueGiveFromISR+0x5a>
			const int8_t cTxLock = pxQueue->cTxLock;
800007be:	04544783          	lbu	a5,69(s0)
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
800007c2:	0705                	addi	a4,a4,1
800007c4:	dc18                	sw	a4,56(s0)
			const int8_t cTxLock = pxQueue->cTxLock;
800007c6:	01879693          	slli	a3,a5,0x18
800007ca:	86e1                	srai	a3,a3,0x18
			if( cTxLock == queueUNLOCKED )
800007cc:	577d                	li	a4,-1
800007ce:	02e69b63          	bne	a3,a4,80000804 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
800007d2:	505c                	lw	a5,36(s0)
800007d4:	ef89                	bnez	a5,800007ee <xQueueGiveFromISR+0x70>
			xReturn = pdPASS;
800007d6:	4485                	li	s1,1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
800007d8:	854e                	mv	a0,s3
800007da:	114010ef          	jal	ra,800018ee <vPortClearInterruptMask>
}
800007de:	40f2                	lw	ra,28(sp)
800007e0:	4462                	lw	s0,24(sp)
800007e2:	8526                	mv	a0,s1
800007e4:	4942                	lw	s2,16(sp)
800007e6:	44d2                	lw	s1,20(sp)
800007e8:	49b2                	lw	s3,12(sp)
800007ea:	6105                	addi	sp,sp,32
800007ec:	8082                	ret
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
800007ee:	02440513          	addi	a0,s0,36
800007f2:	0f1000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
800007f6:	d165                	beqz	a0,800007d6 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
800007f8:	fc090fe3          	beqz	s2,800007d6 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
800007fc:	4785                	li	a5,1
800007fe:	00f92023          	sw	a5,0(s2)
80000802:	bfd1                	j	800007d6 <xQueueGiveFromISR+0x58>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
80000804:	0785                	addi	a5,a5,1
80000806:	07e2                	slli	a5,a5,0x18
80000808:	87e1                	srai	a5,a5,0x18
8000080a:	04f402a3          	sb	a5,69(s0)
8000080e:	b7e1                	j	800007d6 <xQueueGiveFromISR+0x58>

80000810 <xQueueGenericReceive>:
{
80000810:	7139                	addi	sp,sp,-64
80000812:	de06                	sw	ra,60(sp)
80000814:	dc22                	sw	s0,56(sp)
80000816:	da26                	sw	s1,52(sp)
80000818:	d84a                	sw	s2,48(sp)
8000081a:	d64e                	sw	s3,44(sp)
8000081c:	d452                	sw	s4,40(sp)
8000081e:	d256                	sw	s5,36(sp)
80000820:	d05a                	sw	s6,32(sp)
80000822:	c632                	sw	a2,12(sp)
	configASSERT( pxQueue );
80000824:	e501                	bnez	a0,8000082c <xQueueGenericReceive+0x1c>
80000826:	300477f3          	csrrci	a5,mstatus,8
8000082a:	a001                	j	8000082a <xQueueGenericReceive+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
8000082c:	e591                	bnez	a1,80000838 <xQueueGenericReceive+0x28>
8000082e:	413c                	lw	a5,64(a0)
80000830:	c781                	beqz	a5,80000838 <xQueueGenericReceive+0x28>
80000832:	300477f3          	csrrci	a5,mstatus,8
80000836:	a001                	j	80000836 <xQueueGenericReceive+0x26>
80000838:	8ab6                	mv	s5,a3
8000083a:	8a2e                	mv	s4,a1
8000083c:	842a                	mv	s0,a0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
8000083e:	1a1000ef          	jal	ra,800011de <xTaskGetSchedulerState>
80000842:	e511                	bnez	a0,8000084e <xQueueGenericReceive+0x3e>
80000844:	47b2                	lw	a5,12(sp)
80000846:	c781                	beqz	a5,8000084e <xQueueGenericReceive+0x3e>
80000848:	300477f3          	csrrci	a5,mstatus,8
8000084c:	a001                	j	8000084c <xQueueGenericReceive+0x3c>
8000084e:	4901                	li	s2,0
		prvLockQueue( pxQueue );
80000850:	59fd                	li	s3,-1
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
80000852:	02440b13          	addi	s6,s0,36
80000856:	a855                	j	8000090a <xQueueGenericReceive+0xfa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
80000858:	505c                	lw	a5,36(s0)
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
8000085a:	01242623          	sw	s2,12(s0)
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
8000085e:	0c078d63          	beqz	a5,80000938 <xQueueGenericReceive+0x128>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
80000862:	02440513          	addi	a0,s0,36
80000866:	07d000ef          	jal	ra,800010e2 <xTaskRemoveFromEventList>
8000086a:	0c050763          	beqz	a0,80000938 <xQueueGenericReceive+0x128>
							queueYIELD_IF_USING_PREEMPTION();
8000086e:	02800613          	li	a2,40
80000872:	00000073          	ecall
80000876:	a0c9                	j	80000938 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
80000878:	47b2                	lw	a5,12(sp)
8000087a:	e789                	bnez	a5,80000884 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
8000087c:	058010ef          	jal	ra,800018d4 <vPortExitCritical>
					return errQUEUE_EMPTY;
80000880:	4501                	li	a0,0
80000882:	a875                	j	8000093e <xQueueGenericReceive+0x12e>
				else if( xEntryTimeSet == pdFALSE )
80000884:	00091563          	bnez	s2,8000088e <xQueueGenericReceive+0x7e>
					vTaskSetTimeOutState( &xTimeOut );
80000888:	0828                	addi	a0,sp,24
8000088a:	0cf000ef          	jal	ra,80001158 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
8000088e:	046010ef          	jal	ra,800018d4 <vPortExitCritical>
		vTaskSuspendAll();
80000892:	293d                	jal	80000cd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
80000894:	030010ef          	jal	ra,800018c4 <vPortEnterCritical>
80000898:	04444783          	lbu	a5,68(s0)
8000089c:	07e2                	slli	a5,a5,0x18
8000089e:	87e1                	srai	a5,a5,0x18
800008a0:	01379463          	bne	a5,s3,800008a8 <xQueueGenericReceive+0x98>
800008a4:	04040223          	sb	zero,68(s0)
800008a8:	04544783          	lbu	a5,69(s0)
800008ac:	07e2                	slli	a5,a5,0x18
800008ae:	87e1                	srai	a5,a5,0x18
800008b0:	01379463          	bne	a5,s3,800008b8 <xQueueGenericReceive+0xa8>
800008b4:	040402a3          	sb	zero,69(s0)
800008b8:	01c010ef          	jal	ra,800018d4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
800008bc:	006c                	addi	a1,sp,12
800008be:	0828                	addi	a0,sp,24
800008c0:	0af000ef          	jal	ra,8000116e <xTaskCheckForTimeOut>
800008c4:	e559                	bnez	a0,80000952 <xQueueGenericReceive+0x142>
	taskENTER_CRITICAL();
800008c6:	7ff000ef          	jal	ra,800018c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
800008ca:	5c1c                	lw	a5,56(s0)
800008cc:	eb8d                	bnez	a5,800008fe <xQueueGenericReceive+0xee>
	taskEXIT_CRITICAL();
800008ce:	006010ef          	jal	ra,800018d4 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
800008d2:	401c                	lw	a5,0(s0)
800008d4:	eb81                	bnez	a5,800008e4 <xQueueGenericReceive+0xd4>
						taskENTER_CRITICAL();
800008d6:	7ef000ef          	jal	ra,800018c4 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
800008da:	4048                	lw	a0,4(s0)
800008dc:	117000ef          	jal	ra,800011f2 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
800008e0:	7f5000ef          	jal	ra,800018d4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
800008e4:	45b2                	lw	a1,12(sp)
800008e6:	855a                	mv	a0,s6
800008e8:	7a2000ef          	jal	ra,8000108a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
800008ec:	8522                	mv	a0,s0
800008ee:	3685                	jal	8000044e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
800008f0:	2b2d                	jal	80000e2a <xTaskResumeAll>
800008f2:	e919                	bnez	a0,80000908 <xQueueGenericReceive+0xf8>
					portYIELD_WITHIN_API();
800008f4:	02800613          	li	a2,40
800008f8:	00000073          	ecall
800008fc:	a031                	j	80000908 <xQueueGenericReceive+0xf8>
	taskEXIT_CRITICAL();
800008fe:	7d7000ef          	jal	ra,800018d4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
80000902:	8522                	mv	a0,s0
80000904:	36a9                	jal	8000044e <prvUnlockQueue>
				( void ) xTaskResumeAll();
80000906:	2315                	jal	80000e2a <xTaskResumeAll>
80000908:	4905                	li	s2,1
		taskENTER_CRITICAL();
8000090a:	7bb000ef          	jal	ra,800018c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
8000090e:	5c04                	lw	s1,56(s0)
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
80000910:	d4a5                	beqz	s1,80000878 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
80000912:	85d2                	mv	a1,s4
80000914:	8522                	mv	a0,s0
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
80000916:	00c42903          	lw	s2,12(s0)
				prvCopyDataFromQueue( pxQueue, pvBuffer );
8000091a:	3e11                	jal	8000042e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
8000091c:	f20a9ee3          	bnez	s5,80000858 <xQueueGenericReceive+0x48>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80000920:	401c                	lw	a5,0(s0)
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
80000922:	14fd                	addi	s1,s1,-1
80000924:	dc04                	sw	s1,56(s0)
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
80000926:	e781                	bnez	a5,8000092e <xQueueGenericReceive+0x11e>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
80000928:	1d1000ef          	jal	ra,800012f8 <pvTaskIncrementMutexHeldCount>
8000092c:	c048                	sw	a0,4(s0)
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
8000092e:	481c                	lw	a5,16(s0)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
80000930:	01040513          	addi	a0,s0,16
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
80000934:	f20799e3          	bnez	a5,80000866 <xQueueGenericReceive+0x56>
				taskEXIT_CRITICAL();
80000938:	79d000ef          	jal	ra,800018d4 <vPortExitCritical>
				return pdPASS;
8000093c:	4505                	li	a0,1
}
8000093e:	50f2                	lw	ra,60(sp)
80000940:	5462                	lw	s0,56(sp)
80000942:	54d2                	lw	s1,52(sp)
80000944:	5942                	lw	s2,48(sp)
80000946:	59b2                	lw	s3,44(sp)
80000948:	5a22                	lw	s4,40(sp)
8000094a:	5a92                	lw	s5,36(sp)
8000094c:	5b02                	lw	s6,32(sp)
8000094e:	6121                	addi	sp,sp,64
80000950:	8082                	ret
			prvUnlockQueue( pxQueue );
80000952:	8522                	mv	a0,s0
80000954:	3ced                	jal	8000044e <prvUnlockQueue>
			( void ) xTaskResumeAll();
80000956:	29d1                	jal	80000e2a <xTaskResumeAll>
	taskENTER_CRITICAL();
80000958:	76d000ef          	jal	ra,800018c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
8000095c:	5c1c                	lw	a5,56(s0)
8000095e:	f0078fe3          	beqz	a5,8000087c <xQueueGenericReceive+0x6c>
	taskEXIT_CRITICAL();
80000962:	773000ef          	jal	ra,800018d4 <vPortExitCritical>
80000966:	b74d                	j	80000908 <xQueueGenericReceive+0xf8>

80000968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
80000968:	8ac18693          	addi	a3,gp,-1876 # 900002d4 <xQueueRegistry>
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
8000096c:	4701                	li	a4,0
8000096e:	8ac18793          	addi	a5,gp,-1876 # 900002d4 <xQueueRegistry>
80000972:	4629                	li	a2,10
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
80000974:	0006a803          	lw	a6,0(a3)
80000978:	00081763          	bnez	a6,80000986 <vQueueAddToRegistry+0x1e>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
8000097c:	070e                	slli	a4,a4,0x3
8000097e:	97ba                	add	a5,a5,a4
80000980:	c38c                	sw	a1,0(a5)
				xQueueRegistry[ ux ].xHandle = xQueue;
80000982:	c3c8                	sw	a0,4(a5)

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
80000984:	8082                	ret
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
80000986:	0705                	addi	a4,a4,1
80000988:	06a1                	addi	a3,a3,8
8000098a:	fec715e3          	bne	a4,a2,80000974 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
8000098e:	8082                	ret

80000990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
80000990:	1101                	addi	sp,sp,-32
80000992:	cc22                	sw	s0,24(sp)
80000994:	c62e                	sw	a1,12(sp)
80000996:	842a                	mv	s0,a0
80000998:	c432                	sw	a2,8(sp)
8000099a:	ce06                	sw	ra,28(sp)
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
8000099c:	729000ef          	jal	ra,800018c4 <vPortEnterCritical>
800009a0:	04444783          	lbu	a5,68(s0)
800009a4:	577d                	li	a4,-1
800009a6:	4622                	lw	a2,8(sp)
800009a8:	07e2                	slli	a5,a5,0x18
800009aa:	87e1                	srai	a5,a5,0x18
800009ac:	45b2                	lw	a1,12(sp)
800009ae:	00e79463          	bne	a5,a4,800009b6 <vQueueWaitForMessageRestricted+0x26>
800009b2:	04040223          	sb	zero,68(s0)
800009b6:	04544783          	lbu	a5,69(s0)
800009ba:	577d                	li	a4,-1
800009bc:	07e2                	slli	a5,a5,0x18
800009be:	87e1                	srai	a5,a5,0x18
800009c0:	00e79463          	bne	a5,a4,800009c8 <vQueueWaitForMessageRestricted+0x38>
800009c4:	040402a3          	sb	zero,69(s0)
800009c8:	c632                	sw	a2,12(sp)
800009ca:	c42e                	sw	a1,8(sp)
800009cc:	709000ef          	jal	ra,800018d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
800009d0:	5c1c                	lw	a5,56(s0)
800009d2:	45a2                	lw	a1,8(sp)
800009d4:	4632                	lw	a2,12(sp)
800009d6:	e789                	bnez	a5,800009e0 <vQueueWaitForMessageRestricted+0x50>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
800009d8:	02440513          	addi	a0,s0,36
800009dc:	6d6000ef          	jal	ra,800010b2 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
800009e0:	8522                	mv	a0,s0
	}
800009e2:	4462                	lw	s0,24(sp)
800009e4:	40f2                	lw	ra,28(sp)
800009e6:	6105                	addi	sp,sp,32
		prvUnlockQueue( pxQueue );
800009e8:	b49d                	j	8000044e <prvUnlockQueue>

800009ea <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
800009ea:	81c18713          	addi	a4,gp,-2020 # 90000244 <pxDelayedTaskList>
800009ee:	431c                	lw	a5,0(a4)
800009f0:	4394                	lw	a3,0(a5)
800009f2:	84018793          	addi	a5,gp,-1984 # 90000268 <xNextTaskUnblockTime>
800009f6:	e681                	bnez	a3,800009fe <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
800009f8:	577d                	li	a4,-1
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
800009fa:	c398                	sw	a4,0(a5)
	}
}
800009fc:	8082                	ret
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
800009fe:	4318                	lw	a4,0(a4)
80000a00:	4758                	lw	a4,12(a4)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
80000a02:	4758                	lw	a4,12(a4)
80000a04:	4358                	lw	a4,4(a4)
80000a06:	bfd5                	j	800009fa <prvResetNextTaskUnblockTime+0x10>

80000a08 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
80000a08:	7179                	addi	sp,sp,-48
80000a0a:	d226                	sw	s1,36(sp)
80000a0c:	ce4e                	sw	s3,28(sp)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80000a0e:	81818993          	addi	s3,gp,-2024 # 90000240 <pxCurrentTCB>
{
80000a12:	d422                	sw	s0,40(sp)
80000a14:	d04a                	sw	s2,32(sp)
80000a16:	842a                	mv	s0,a0
const TickType_t xConstTickCount = xTickCount;
80000a18:	84c1a903          	lw	s2,-1972(gp) # 90000274 <xTickCount>
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80000a1c:	0009a503          	lw	a0,0(s3)
{
80000a20:	c62e                	sw	a1,12(sp)
80000a22:	d606                	sw	ra,44(sp)
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80000a24:	0511                	addi	a0,a0,4
80000a26:	969ff0ef          	jal	ra,8000038e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
80000a2a:	577d                	li	a4,-1
80000a2c:	81818793          	addi	a5,gp,-2024 # 90000240 <pxCurrentTCB>
80000a30:	45b2                	lw	a1,12(sp)
80000a32:	02e41063          	bne	s0,a4,80000a52 <prvAddCurrentTaskToDelayedList+0x4a>
80000a36:	cd91                	beqz	a1,80000a52 <prvAddCurrentTaskToDelayedList+0x4a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a38:	0009a583          	lw	a1,0(s3)

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
80000a3c:	5422                	lw	s0,40(sp)
80000a3e:	50b2                	lw	ra,44(sp)
80000a40:	5492                	lw	s1,36(sp)
80000a42:	5902                	lw	s2,32(sp)
80000a44:	49f2                	lw	s3,28(sp)
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a46:	0591                	addi	a1,a1,4
80000a48:	97418513          	addi	a0,gp,-1676 # 9000039c <xSuspendedTaskList>
}
80000a4c:	6145                	addi	sp,sp,48
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a4e:	8fbff06f          	j	80000348 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
80000a52:	4398                	lw	a4,0(a5)
			xTimeToWake = xConstTickCount + xTicksToWait;
80000a54:	944a                	add	s0,s0,s2
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
80000a56:	c340                	sw	s0,4(a4)
			if( xTimeToWake < xConstTickCount )
80000a58:	01247e63          	bleu	s2,s0,80000a74 <prvAddCurrentTaskToDelayedList+0x6c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a5c:	8201a503          	lw	a0,-2016(gp) # 90000248 <pxOverflowDelayedTaskList>
}
80000a60:	5422                	lw	s0,40(sp)
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a62:	438c                	lw	a1,0(a5)
}
80000a64:	50b2                	lw	ra,44(sp)
80000a66:	5492                	lw	s1,36(sp)
80000a68:	5902                	lw	s2,32(sp)
80000a6a:	49f2                	lw	s3,28(sp)
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a6c:	0591                	addi	a1,a1,4
}
80000a6e:	6145                	addi	sp,sp,48
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a70:	8f1ff06f          	j	80000360 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
80000a74:	81c1a503          	lw	a0,-2020(gp) # 90000244 <pxDelayedTaskList>
80000a78:	438c                	lw	a1,0(a5)
80000a7a:	0591                	addi	a1,a1,4
80000a7c:	8e5ff0ef          	jal	ra,80000360 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
80000a80:	84018793          	addi	a5,gp,-1984 # 90000268 <xNextTaskUnblockTime>
80000a84:	4398                	lw	a4,0(a5)
80000a86:	00e47363          	bleu	a4,s0,80000a8c <prvAddCurrentTaskToDelayedList+0x84>
					xNextTaskUnblockTime = xTimeToWake;
80000a8a:	c380                	sw	s0,0(a5)
}
80000a8c:	50b2                	lw	ra,44(sp)
80000a8e:	5422                	lw	s0,40(sp)
80000a90:	5492                	lw	s1,36(sp)
80000a92:	5902                	lw	s2,32(sp)
80000a94:	49f2                	lw	s3,28(sp)
80000a96:	6145                	addi	sp,sp,48
80000a98:	8082                	ret

80000a9a <xTaskCreate>:
	{
80000a9a:	7179                	addi	sp,sp,-48
80000a9c:	ce4e                	sw	s3,28(sp)
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000a9e:	00261993          	slli	s3,a2,0x2
	{
80000aa2:	ca56                	sw	s5,20(sp)
80000aa4:	8aaa                	mv	s5,a0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000aa6:	854e                	mv	a0,s3
	{
80000aa8:	d226                	sw	s1,36(sp)
80000aaa:	d04a                	sw	s2,32(sp)
80000aac:	cc52                	sw	s4,24(sp)
80000aae:	c85a                	sw	s6,16(sp)
80000ab0:	d606                	sw	ra,44(sp)
80000ab2:	d422                	sw	s0,40(sp)
80000ab4:	c65e                	sw	s7,12(sp)
80000ab6:	84ae                	mv	s1,a1
80000ab8:	8b36                	mv	s6,a3
80000aba:	893a                	mv	s2,a4
80000abc:	8a3e                	mv	s4,a5
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000abe:	3dd000ef          	jal	ra,8000169a <pvPortMalloc>
			if( pxStack != NULL )
80000ac2:	18050a63          	beqz	a0,80000c56 <xTaskCreate+0x1bc>
80000ac6:	8baa                	mv	s7,a0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
80000ac8:	06800513          	li	a0,104
80000acc:	3cf000ef          	jal	ra,8000169a <pvPortMalloc>
80000ad0:	842a                	mv	s0,a0
				if( pxNewTCB != NULL )
80000ad2:	16050f63          	beqz	a0,80000c50 <xTaskCreate+0x1b6>
					pxNewTCB->pxStack = pxStack;
80000ad6:	03752823          	sw	s7,48(a0)
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
80000ada:	864e                	mv	a2,s3
80000adc:	0a500593          	li	a1,165
80000ae0:	855e                	mv	a0,s7
80000ae2:	6a8010ef          	jal	ra,8000218a <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
80000ae6:	ffc98793          	addi	a5,s3,-4
80000aea:	03042983          	lw	s3,48(s0)
80000aee:	85a6                	mv	a1,s1
80000af0:	01048713          	addi	a4,s1,16
80000af4:	99be                	add	s3,s3,a5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
80000af6:	ff89f993          	andi	s3,s3,-8
80000afa:	03440793          	addi	a5,s0,52
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
80000afe:	0005c683          	lbu	a3,0(a1)
80000b02:	00d78023          	sb	a3,0(a5)
		if( pcName[ x ] == 0x00 )
80000b06:	0005c683          	lbu	a3,0(a1)
80000b0a:	c689                	beqz	a3,80000b14 <xTaskCreate+0x7a>
80000b0c:	0585                	addi	a1,a1,1
80000b0e:	0785                	addi	a5,a5,1
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
80000b10:	fee597e3          	bne	a1,a4,80000afe <xTaskCreate+0x64>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
80000b14:	040401a3          	sb	zero,67(s0)
80000b18:	4789                	li	a5,2
80000b1a:	84ca                	mv	s1,s2
80000b1c:	0127f363          	bleu	s2,a5,80000b22 <xTaskCreate+0x88>
80000b20:	4489                	li	s1,2
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
80000b22:	00440913          	addi	s2,s0,4
	pxNewTCB->uxPriority = uxPriority;
80000b26:	d444                	sw	s1,44(s0)
		pxNewTCB->uxBasePriority = uxPriority;
80000b28:	c064                	sw	s1,68(s0)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
80000b2a:	854a                	mv	a0,s2
		pxNewTCB->uxMutexesHeld = 0;
80000b2c:	04042423          	sw	zero,72(s0)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
80000b30:	813ff0ef          	jal	ra,80000342 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
80000b34:	01840513          	addi	a0,s0,24
80000b38:	80bff0ef          	jal	ra,80000342 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000b3c:	478d                	li	a5,3
80000b3e:	409784b3          	sub	s1,a5,s1
		pxNewTCB->ulNotifiedValue = 0;
80000b42:	06042023          	sw	zero,96(s0)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
80000b46:	c800                	sw	s0,16(s0)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000b48:	cc04                	sw	s1,24(s0)
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
80000b4a:	d040                	sw	s0,36(s0)
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
80000b4c:	04042623          	sw	zero,76(s0)
80000b50:	04042823          	sw	zero,80(s0)
80000b54:	04042a23          	sw	zero,84(s0)
80000b58:	04042c23          	sw	zero,88(s0)
80000b5c:	04042e23          	sw	zero,92(s0)
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
80000b60:	06040223          	sb	zero,100(s0)
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
80000b64:	865a                	mv	a2,s6
80000b66:	85d6                	mv	a1,s5
80000b68:	854e                	mv	a0,s3
80000b6a:	595000ef          	jal	ra,800018fe <pxPortInitialiseStack>
80000b6e:	c008                	sw	a0,0(s0)
	if( ( void * ) pxCreatedTask != NULL )
80000b70:	000a0463          	beqz	s4,80000b78 <xTaskCreate+0xde>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
80000b74:	008a2023          	sw	s0,0(s4)
	taskENTER_CRITICAL();
80000b78:	54d000ef          	jal	ra,800018c4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
80000b7c:	82418793          	addi	a5,gp,-2012 # 9000024c <uxCurrentNumberOfTasks>
80000b80:	4398                	lw	a4,0(a5)
80000b82:	0705                	addi	a4,a4,1
80000b84:	c398                	sw	a4,0(a5)
		if( pxCurrentTCB == NULL )
80000b86:	81818713          	addi	a4,gp,-2024 # 90000240 <pxCurrentTCB>
80000b8a:	4318                	lw	a4,0(a4)
80000b8c:	81818493          	addi	s1,gp,-2024 # 90000240 <pxCurrentTCB>
80000b90:	8fc18a13          	addi	s4,gp,-1796 # 90000324 <pxReadyTasksLists>
80000b94:	84818993          	addi	s3,gp,-1976 # 90000270 <xSchedulerRunning>
80000b98:	0c071163          	bnez	a4,80000c5a <xTaskCreate+0x1c0>
			pxCurrentTCB = pxNewTCB;
80000b9c:	c080                	sw	s0,0(s1)
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
80000b9e:	4398                	lw	a4,0(a5)
80000ba0:	4785                	li	a5,1
80000ba2:	04f71a63          	bne	a4,a5,80000bf6 <xTaskCreate+0x15c>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
80000ba6:	8fc18513          	addi	a0,gp,-1796 # 90000324 <pxReadyTasksLists>
80000baa:	f84ff0ef          	jal	ra,8000032e <vListInitialise>
80000bae:	014a0513          	addi	a0,s4,20
80000bb2:	f7cff0ef          	jal	ra,8000032e <vListInitialise>
80000bb6:	028a0513          	addi	a0,s4,40
80000bba:	f74ff0ef          	jal	ra,8000032e <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
80000bbe:	93818b13          	addi	s6,gp,-1736 # 90000360 <xDelayedTaskList1>
80000bc2:	93818513          	addi	a0,gp,-1736 # 90000360 <xDelayedTaskList1>
80000bc6:	f68ff0ef          	jal	ra,8000032e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
80000bca:	94c18a93          	addi	s5,gp,-1716 # 90000374 <xDelayedTaskList2>
80000bce:	94c18513          	addi	a0,gp,-1716 # 90000374 <xDelayedTaskList2>
80000bd2:	f5cff0ef          	jal	ra,8000032e <vListInitialise>
	vListInitialise( &xPendingReadyList );
80000bd6:	96018513          	addi	a0,gp,-1696 # 90000388 <xPendingReadyList>
80000bda:	f54ff0ef          	jal	ra,8000032e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
80000bde:	98818513          	addi	a0,gp,-1656 # 900003b0 <xTasksWaitingTermination>
80000be2:	f4cff0ef          	jal	ra,8000032e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
80000be6:	97418513          	addi	a0,gp,-1676 # 9000039c <xSuspendedTaskList>
80000bea:	f44ff0ef          	jal	ra,8000032e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
80000bee:	8161ae23          	sw	s6,-2020(gp) # 90000244 <pxDelayedTaskList>
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
80000bf2:	8351a023          	sw	s5,-2016(gp) # 90000248 <pxOverflowDelayedTaskList>
		uxTaskNumber++;
80000bf6:	83418793          	addi	a5,gp,-1996 # 9000025c <uxTaskNumber>
80000bfa:	4398                	lw	a4,0(a5)
		prvAddTaskToReadyList( pxNewTCB );
80000bfc:	5448                	lw	a0,44(s0)
		uxTaskNumber++;
80000bfe:	0705                	addi	a4,a4,1
80000c00:	c398                	sw	a4,0(a5)
		prvAddTaskToReadyList( pxNewTCB );
80000c02:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
80000c06:	4398                	lw	a4,0(a5)
80000c08:	00a77363          	bleu	a0,a4,80000c0e <xTaskCreate+0x174>
80000c0c:	c388                	sw	a0,0(a5)
80000c0e:	47d1                	li	a5,20
80000c10:	02f50533          	mul	a0,a0,a5
80000c14:	85ca                	mv	a1,s2
80000c16:	9552                	add	a0,a0,s4
80000c18:	f30ff0ef          	jal	ra,80000348 <vListInsertEnd>
	taskEXIT_CRITICAL();
80000c1c:	4b9000ef          	jal	ra,800018d4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
80000c20:	0009a783          	lw	a5,0(s3)
			xReturn = pdPASS;
80000c24:	4505                	li	a0,1
	if( xSchedulerRunning != pdFALSE )
80000c26:	cb91                	beqz	a5,80000c3a <xTaskCreate+0x1a0>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
80000c28:	409c                	lw	a5,0(s1)
80000c2a:	57d8                	lw	a4,44(a5)
80000c2c:	545c                	lw	a5,44(s0)
80000c2e:	00f77663          	bleu	a5,a4,80000c3a <xTaskCreate+0x1a0>
			taskYIELD_IF_USING_PREEMPTION();
80000c32:	02800613          	li	a2,40
80000c36:	00000073          	ecall
	}
80000c3a:	50b2                	lw	ra,44(sp)
80000c3c:	5422                	lw	s0,40(sp)
80000c3e:	5492                	lw	s1,36(sp)
80000c40:	5902                	lw	s2,32(sp)
80000c42:	49f2                	lw	s3,28(sp)
80000c44:	4a62                	lw	s4,24(sp)
80000c46:	4ad2                	lw	s5,20(sp)
80000c48:	4b42                	lw	s6,16(sp)
80000c4a:	4bb2                	lw	s7,12(sp)
80000c4c:	6145                	addi	sp,sp,48
80000c4e:	8082                	ret
					vPortFree( pxStack );
80000c50:	855e                	mv	a0,s7
80000c52:	37b000ef          	jal	ra,800017cc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
80000c56:	557d                	li	a0,-1
80000c58:	b7cd                	j	80000c3a <xTaskCreate+0x1a0>
			if( xSchedulerRunning == pdFALSE )
80000c5a:	0009a783          	lw	a5,0(s3)
80000c5e:	ffc1                	bnez	a5,80000bf6 <xTaskCreate+0x15c>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
80000c60:	409c                	lw	a5,0(s1)
80000c62:	57d8                	lw	a4,44(a5)
80000c64:	545c                	lw	a5,44(s0)
80000c66:	f8e7e8e3          	bltu	a5,a4,80000bf6 <xTaskCreate+0x15c>
					pxCurrentTCB = pxNewTCB;
80000c6a:	c080                	sw	s0,0(s1)
80000c6c:	b769                	j	80000bf6 <xTaskCreate+0x15c>

80000c6e <vTaskStartScheduler>:
		xReturn = xTaskCreate(	prvIdleTask,
80000c6e:	900005b7          	lui	a1,0x90000
80000c72:	80001537          	lui	a0,0x80001
{
80000c76:	1141                	addi	sp,sp,-16
		xReturn = xTaskCreate(	prvIdleTask,
80000c78:	83c18793          	addi	a5,gp,-1988 # 90000264 <xIdleTaskHandle>
80000c7c:	4701                	li	a4,0
80000c7e:	4681                	li	a3,0
80000c80:	1c200613          	li	a2,450
80000c84:	00058593          	mv	a1,a1
80000c88:	f7a50513          	addi	a0,a0,-134 # 80000f7a <_sp+0xefff0f7a>
{
80000c8c:	c422                	sw	s0,8(sp)
80000c8e:	c606                	sw	ra,12(sp)
		if( xReturn == pdPASS )
80000c90:	4405                	li	s0,1
		xReturn = xTaskCreate(	prvIdleTask,
80000c92:	3521                	jal	80000a9a <xTaskCreate>
		if( xReturn == pdPASS )
80000c94:	02851463          	bne	a0,s0,80000cbc <vTaskStartScheduler+0x4e>
			xReturn = xTimerCreateTimerTask();
80000c98:	712000ef          	jal	ra,800013aa <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
80000c9c:	02851063          	bne	a0,s0,80000cbc <vTaskStartScheduler+0x4e>
		portDISABLE_INTERRUPTS();
80000ca0:	300477f3          	csrrci	a5,mstatus,8
		xNextTaskUnblockTime = portMAX_DELAY;
80000ca4:	577d                	li	a4,-1
80000ca6:	84e1a023          	sw	a4,-1984(gp) # 90000268 <xNextTaskUnblockTime>
}
80000caa:	4422                	lw	s0,8(sp)
		xSchedulerRunning = pdTRUE;
80000cac:	84a1a423          	sw	a0,-1976(gp) # 90000270 <xSchedulerRunning>
}
80000cb0:	40b2                	lw	ra,12(sp)
		xTickCount = ( TickType_t ) 0U;
80000cb2:	8401a623          	sw	zero,-1972(gp) # 90000274 <xTickCount>
}
80000cb6:	0141                	addi	sp,sp,16
		if( xPortStartScheduler() != pdFALSE )
80000cb8:	db0ff06f          	j	80000268 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
80000cbc:	57fd                	li	a5,-1
80000cbe:	00f51563          	bne	a0,a5,80000cc8 <vTaskStartScheduler+0x5a>
80000cc2:	300477f3          	csrrci	a5,mstatus,8
80000cc6:	a001                	j	80000cc6 <vTaskStartScheduler+0x58>
}
80000cc8:	40b2                	lw	ra,12(sp)
80000cca:	4422                	lw	s0,8(sp)
80000ccc:	0141                	addi	sp,sp,16
80000cce:	8082                	ret

80000cd0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
80000cd0:	83018793          	addi	a5,gp,-2000 # 90000258 <uxSchedulerSuspended>
80000cd4:	4398                	lw	a4,0(a5)
80000cd6:	0705                	addi	a4,a4,1
80000cd8:	c398                	sw	a4,0(a5)
}
80000cda:	8082                	ret

80000cdc <xTaskGetTickCount>:
{
80000cdc:	1101                	addi	sp,sp,-32
80000cde:	ce06                	sw	ra,28(sp)
	portTICK_TYPE_ENTER_CRITICAL();
80000ce0:	3e5000ef          	jal	ra,800018c4 <vPortEnterCritical>
		xTicks = xTickCount;
80000ce4:	84c1a503          	lw	a0,-1972(gp) # 90000274 <xTickCount>
80000ce8:	c62a                	sw	a0,12(sp)
	portTICK_TYPE_EXIT_CRITICAL();
80000cea:	3eb000ef          	jal	ra,800018d4 <vPortExitCritical>
}
80000cee:	40f2                	lw	ra,28(sp)
80000cf0:	4532                	lw	a0,12(sp)
80000cf2:	6105                	addi	sp,sp,32
80000cf4:	8082                	ret

80000cf6 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80000cf6:	8301a783          	lw	a5,-2000(gp) # 90000258 <uxSchedulerSuspended>
{
80000cfa:	7179                	addi	sp,sp,-48
80000cfc:	d606                	sw	ra,44(sp)
80000cfe:	d422                	sw	s0,40(sp)
80000d00:	d226                	sw	s1,36(sp)
80000d02:	d04a                	sw	s2,32(sp)
80000d04:	ce4e                	sw	s3,28(sp)
80000d06:	cc52                	sw	s4,24(sp)
80000d08:	ca56                	sw	s5,20(sp)
80000d0a:	c85a                	sw	s6,16(sp)
80000d0c:	c65e                	sw	s7,12(sp)
80000d0e:	c462                	sw	s8,8(sp)
80000d10:	c266                	sw	s9,4(sp)
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80000d12:	10079363          	bnez	a5,80000e18 <xTaskIncrementTick+0x122>
		const TickType_t xConstTickCount = xTickCount + 1;
80000d16:	84c18793          	addi	a5,gp,-1972 # 90000274 <xTickCount>
80000d1a:	0007aa03          	lw	s4,0(a5)
80000d1e:	0a05                	addi	s4,s4,1
		xTickCount = xConstTickCount;
80000d20:	0147a023          	sw	s4,0(a5)
		if( xConstTickCount == ( TickType_t ) 0U )
80000d24:	020a1663          	bnez	s4,80000d50 <xTaskIncrementTick+0x5a>
			taskSWITCH_DELAYED_LISTS();
80000d28:	81c18793          	addi	a5,gp,-2020 # 90000244 <pxDelayedTaskList>
80000d2c:	4398                	lw	a4,0(a5)
80000d2e:	4318                	lw	a4,0(a4)
80000d30:	c701                	beqz	a4,80000d38 <xTaskIncrementTick+0x42>
80000d32:	300477f3          	csrrci	a5,mstatus,8
80000d36:	a001                	j	80000d36 <xTaskIncrementTick+0x40>
80000d38:	82018713          	addi	a4,gp,-2016 # 90000248 <pxOverflowDelayedTaskList>
80000d3c:	4394                	lw	a3,0(a5)
80000d3e:	4310                	lw	a2,0(a4)
80000d40:	c390                	sw	a2,0(a5)
80000d42:	c314                	sw	a3,0(a4)
80000d44:	84418793          	addi	a5,gp,-1980 # 9000026c <xNumOfOverflows>
80000d48:	4398                	lw	a4,0(a5)
80000d4a:	0705                	addi	a4,a4,1
80000d4c:	c398                	sw	a4,0(a5)
80000d4e:	3971                	jal	800009ea <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
80000d50:	84018793          	addi	a5,gp,-1984 # 90000268 <xNextTaskUnblockTime>
80000d54:	439c                	lw	a5,0(a5)
80000d56:	84018993          	addi	s3,gp,-1984 # 90000268 <xNextTaskUnblockTime>
80000d5a:	8fc18493          	addi	s1,gp,-1796 # 90000324 <pxReadyTasksLists>
80000d5e:	81818a93          	addi	s5,gp,-2024 # 90000240 <pxCurrentTCB>
BaseType_t xSwitchRequired = pdFALSE;
80000d62:	4401                	li	s0,0
		if( xConstTickCount >= xNextTaskUnblockTime )
80000d64:	04fa7563          	bleu	a5,s4,80000dae <xTaskIncrementTick+0xb8>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
80000d68:	000aa783          	lw	a5,0(s5)
80000d6c:	4751                	li	a4,20
80000d6e:	57dc                	lw	a5,44(a5)
80000d70:	02e787b3          	mul	a5,a5,a4
80000d74:	94be                	add	s1,s1,a5
80000d76:	4098                	lw	a4,0(s1)
80000d78:	4785                	li	a5,1
80000d7a:	00e7f363          	bleu	a4,a5,80000d80 <xTaskIncrementTick+0x8a>
				xSwitchRequired = pdTRUE;
80000d7e:	4405                	li	s0,1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
80000d80:	82c1a783          	lw	a5,-2004(gp) # 90000254 <uxPendedTicks>
80000d84:	e399                	bnez	a5,80000d8a <xTaskIncrementTick+0x94>
				vApplicationTickHook();
80000d86:	589000ef          	jal	ra,80001b0e <vApplicationTickHook>
		if( xYieldPending != pdFALSE )
80000d8a:	8501a783          	lw	a5,-1968(gp) # 90000278 <xYieldPending>
80000d8e:	c391                	beqz	a5,80000d92 <xTaskIncrementTick+0x9c>
			xSwitchRequired = pdTRUE;
80000d90:	4405                	li	s0,1
}
80000d92:	8522                	mv	a0,s0
80000d94:	50b2                	lw	ra,44(sp)
80000d96:	5422                	lw	s0,40(sp)
80000d98:	5492                	lw	s1,36(sp)
80000d9a:	5902                	lw	s2,32(sp)
80000d9c:	49f2                	lw	s3,28(sp)
80000d9e:	4a62                	lw	s4,24(sp)
80000da0:	4ad2                	lw	s5,20(sp)
80000da2:	4b42                	lw	s6,16(sp)
80000da4:	4bb2                	lw	s7,12(sp)
80000da6:	4c22                	lw	s8,8(sp)
80000da8:	4c92                	lw	s9,4(sp)
80000daa:	6145                	addi	sp,sp,48
80000dac:	8082                	ret
					prvAddTaskToReadyList( pxTCB );
80000dae:	4cd1                	li	s9,20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
80000db0:	81c18793          	addi	a5,gp,-2020 # 90000244 <pxDelayedTaskList>
80000db4:	4398                	lw	a4,0(a5)
80000db6:	4318                	lw	a4,0(a4)
80000db8:	e709                	bnez	a4,80000dc2 <xTaskIncrementTick+0xcc>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80000dba:	57fd                	li	a5,-1
						xNextTaskUnblockTime = xItemValue;
80000dbc:	00f9a023          	sw	a5,0(s3)
						break;
80000dc0:	b765                	j	80000d68 <xTaskIncrementTick+0x72>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
80000dc2:	439c                	lw	a5,0(a5)
80000dc4:	47dc                	lw	a5,12(a5)
80000dc6:	00c7a903          	lw	s2,12(a5)
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
80000dca:	00492783          	lw	a5,4(s2)
					if( xConstTickCount < xItemValue )
80000dce:	fefa67e3          	bltu	s4,a5,80000dbc <xTaskIncrementTick+0xc6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80000dd2:	00490b13          	addi	s6,s2,4
80000dd6:	855a                	mv	a0,s6
80000dd8:	db6ff0ef          	jal	ra,8000038e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
80000ddc:	02892783          	lw	a5,40(s2)
80000de0:	c789                	beqz	a5,80000dea <xTaskIncrementTick+0xf4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80000de2:	01890513          	addi	a0,s2,24
80000de6:	da8ff0ef          	jal	ra,8000038e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80000dea:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
80000dee:	02c92503          	lw	a0,44(s2)
80000df2:	4398                	lw	a4,0(a5)
80000df4:	00a77363          	bleu	a0,a4,80000dfa <xTaskIncrementTick+0x104>
80000df8:	c388                	sw	a0,0(a5)
80000dfa:	03950533          	mul	a0,a0,s9
80000dfe:	85da                	mv	a1,s6
80000e00:	9526                	add	a0,a0,s1
80000e02:	d46ff0ef          	jal	ra,80000348 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80000e06:	000aa783          	lw	a5,0(s5)
80000e0a:	02c92703          	lw	a4,44(s2)
80000e0e:	57dc                	lw	a5,44(a5)
80000e10:	faf760e3          	bltu	a4,a5,80000db0 <xTaskIncrementTick+0xba>
							xSwitchRequired = pdTRUE;
80000e14:	4405                	li	s0,1
80000e16:	bf69                	j	80000db0 <xTaskIncrementTick+0xba>
		++uxPendedTicks;
80000e18:	82c18793          	addi	a5,gp,-2004 # 90000254 <uxPendedTicks>
80000e1c:	4398                	lw	a4,0(a5)
BaseType_t xSwitchRequired = pdFALSE;
80000e1e:	4401                	li	s0,0
		++uxPendedTicks;
80000e20:	0705                	addi	a4,a4,1
80000e22:	c398                	sw	a4,0(a5)
			vApplicationTickHook();
80000e24:	4eb000ef          	jal	ra,80001b0e <vApplicationTickHook>
80000e28:	b78d                	j	80000d8a <xTaskIncrementTick+0x94>

80000e2a <xTaskResumeAll>:
{
80000e2a:	7139                	addi	sp,sp,-64
80000e2c:	dc22                	sw	s0,56(sp)
	configASSERT( uxSchedulerSuspended );
80000e2e:	83018413          	addi	s0,gp,-2000 # 90000258 <uxSchedulerSuspended>
80000e32:	401c                	lw	a5,0(s0)
{
80000e34:	de06                	sw	ra,60(sp)
80000e36:	da26                	sw	s1,52(sp)
80000e38:	d84a                	sw	s2,48(sp)
80000e3a:	d64e                	sw	s3,44(sp)
80000e3c:	d452                	sw	s4,40(sp)
80000e3e:	d256                	sw	s5,36(sp)
80000e40:	d05a                	sw	s6,32(sp)
80000e42:	ce5e                	sw	s7,28(sp)
	configASSERT( uxSchedulerSuspended );
80000e44:	e781                	bnez	a5,80000e4c <xTaskResumeAll+0x22>
80000e46:	300477f3          	csrrci	a5,mstatus,8
80000e4a:	a001                	j	80000e4a <xTaskResumeAll+0x20>
	taskENTER_CRITICAL();
80000e4c:	279000ef          	jal	ra,800018c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
80000e50:	401c                	lw	a5,0(s0)
80000e52:	17fd                	addi	a5,a5,-1
80000e54:	c01c                	sw	a5,0(s0)
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80000e56:	401c                	lw	a5,0(s0)
80000e58:	c38d                	beqz	a5,80000e7a <xTaskResumeAll+0x50>
BaseType_t xAlreadyYielded = pdFALSE;
80000e5a:	4501                	li	a0,0
80000e5c:	c62a                	sw	a0,12(sp)
	taskEXIT_CRITICAL();
80000e5e:	277000ef          	jal	ra,800018d4 <vPortExitCritical>
}
80000e62:	50f2                	lw	ra,60(sp)
80000e64:	5462                	lw	s0,56(sp)
80000e66:	4532                	lw	a0,12(sp)
80000e68:	54d2                	lw	s1,52(sp)
80000e6a:	5942                	lw	s2,48(sp)
80000e6c:	59b2                	lw	s3,44(sp)
80000e6e:	5a22                	lw	s4,40(sp)
80000e70:	5a92                	lw	s5,36(sp)
80000e72:	5b02                	lw	s6,32(sp)
80000e74:	4bf2                	lw	s7,28(sp)
80000e76:	6121                	addi	sp,sp,64
80000e78:	8082                	ret
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80000e7a:	8241a783          	lw	a5,-2012(gp) # 9000024c <uxCurrentNumberOfTasks>
TCB_t *pxTCB = NULL;
80000e7e:	4401                	li	s0,0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
80000e80:	dfe9                	beqz	a5,80000e5a <xTaskResumeAll+0x30>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80000e82:	96018493          	addi	s1,gp,-1696 # 90000388 <xPendingReadyList>
					prvAddTaskToReadyList( pxTCB );
80000e86:	8fc18913          	addi	s2,gp,-1796 # 90000324 <pxReadyTasksLists>
80000e8a:	4a51                	li	s4,20
						xYieldPending = pdTRUE;
80000e8c:	4b85                	li	s7,1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
80000e8e:	409c                	lw	a5,0(s1)
80000e90:	ef8d                	bnez	a5,80000eca <xTaskResumeAll+0xa0>
				if( pxTCB != NULL )
80000e92:	c011                	beqz	s0,80000e96 <xTaskResumeAll+0x6c>
					prvResetNextTaskUnblockTime();
80000e94:	3e99                	jal	800009ea <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
80000e96:	82c18713          	addi	a4,gp,-2004 # 90000254 <uxPendedTicks>
80000e9a:	4304                	lw	s1,0(a4)
80000e9c:	82c18413          	addi	s0,gp,-2004 # 90000254 <uxPendedTicks>
					if( uxPendedCounts > ( UBaseType_t ) 0U )
80000ea0:	cc81                	beqz	s1,80000eb8 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
80000ea2:	4985                	li	s3,1
							if( xTaskIncrementTick() != pdFALSE )
80000ea4:	3d89                	jal	80000cf6 <xTaskIncrementTick>
80000ea6:	c509                	beqz	a0,80000eb0 <xTaskResumeAll+0x86>
								xYieldPending = pdTRUE;
80000ea8:	85018793          	addi	a5,gp,-1968 # 90000278 <xYieldPending>
80000eac:	0137a023          	sw	s3,0(a5)
							--uxPendedCounts;
80000eb0:	14fd                	addi	s1,s1,-1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
80000eb2:	f8ed                	bnez	s1,80000ea4 <xTaskResumeAll+0x7a>
						uxPendedTicks = 0;
80000eb4:	00042023          	sw	zero,0(s0)
				if( xYieldPending != pdFALSE )
80000eb8:	8501a783          	lw	a5,-1968(gp) # 90000278 <xYieldPending>
80000ebc:	dfd9                	beqz	a5,80000e5a <xTaskResumeAll+0x30>
					taskYIELD_IF_USING_PREEMPTION();
80000ebe:	02800613          	li	a2,40
80000ec2:	00000073          	ecall
						xAlreadyYielded = pdTRUE;
80000ec6:	4505                	li	a0,1
80000ec8:	bf51                	j	80000e5c <xTaskResumeAll+0x32>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
80000eca:	44dc                	lw	a5,12(s1)
80000ecc:	47c0                	lw	s0,12(a5)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
80000ece:	01840513          	addi	a0,s0,24
80000ed2:	cbcff0ef          	jal	ra,8000038e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80000ed6:	00440593          	addi	a1,s0,4
80000eda:	852e                	mv	a0,a1
80000edc:	c62e                	sw	a1,12(sp)
80000ede:	cb0ff0ef          	jal	ra,8000038e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
80000ee2:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
80000ee6:	5448                	lw	a0,44(s0)
80000ee8:	4398                	lw	a4,0(a5)
80000eea:	45b2                	lw	a1,12(sp)
80000eec:	00a77363          	bleu	a0,a4,80000ef2 <xTaskResumeAll+0xc8>
80000ef0:	c388                	sw	a0,0(a5)
80000ef2:	03450533          	mul	a0,a0,s4
80000ef6:	954a                	add	a0,a0,s2
80000ef8:	c50ff0ef          	jal	ra,80000348 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
80000efc:	81818793          	addi	a5,gp,-2024 # 90000240 <pxCurrentTCB>
80000f00:	439c                	lw	a5,0(a5)
80000f02:	5458                	lw	a4,44(s0)
80000f04:	57dc                	lw	a5,44(a5)
80000f06:	f8f764e3          	bltu	a4,a5,80000e8e <xTaskResumeAll+0x64>
						xYieldPending = pdTRUE;
80000f0a:	85018793          	addi	a5,gp,-1968 # 90000278 <xYieldPending>
80000f0e:	0177a023          	sw	s7,0(a5)
80000f12:	bfb5                	j	80000e8e <xTaskResumeAll+0x64>

80000f14 <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
80000f14:	e501                	bnez	a0,80000f1c <vTaskDelayUntil+0x8>
80000f16:	300477f3          	csrrci	a5,mstatus,8
80000f1a:	a001                	j	80000f1a <vTaskDelayUntil+0x6>
		configASSERT( ( xTimeIncrement > 0U ) );
80000f1c:	e581                	bnez	a1,80000f24 <vTaskDelayUntil+0x10>
80000f1e:	300477f3          	csrrci	a5,mstatus,8
80000f22:	a001                	j	80000f22 <vTaskDelayUntil+0xe>
		configASSERT( uxSchedulerSuspended == 0 );
80000f24:	8301a783          	lw	a5,-2000(gp) # 90000258 <uxSchedulerSuspended>
80000f28:	c781                	beqz	a5,80000f30 <vTaskDelayUntil+0x1c>
80000f2a:	300477f3          	csrrci	a5,mstatus,8
80000f2e:	a001                	j	80000f2e <vTaskDelayUntil+0x1a>
	{
80000f30:	1141                	addi	sp,sp,-16
80000f32:	c422                	sw	s0,8(sp)
80000f34:	c226                	sw	s1,4(sp)
80000f36:	842e                	mv	s0,a1
80000f38:	84aa                	mv	s1,a0
80000f3a:	c606                	sw	ra,12(sp)
		vTaskSuspendAll();
80000f3c:	3b51                	jal	80000cd0 <vTaskSuspendAll>
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
80000f3e:	4098                	lw	a4,0(s1)
			const TickType_t xConstTickCount = xTickCount;
80000f40:	84c1a503          	lw	a0,-1972(gp) # 90000274 <xTickCount>
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
80000f44:	943a                	add	s0,s0,a4
			*pxPreviousWakeTime = xTimeToWake;
80000f46:	c080                	sw	s0,0(s1)
			if( xConstTickCount < *pxPreviousWakeTime )
80000f48:	00e57f63          	bleu	a4,a0,80000f66 <vTaskDelayUntil+0x52>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
80000f4c:	00e46f63          	bltu	s0,a4,80000f6a <vTaskDelayUntil+0x56>
		xAlreadyYielded = xTaskResumeAll();
80000f50:	3de9                	jal	80000e2a <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
80000f52:	e509                	bnez	a0,80000f5c <vTaskDelayUntil+0x48>
			portYIELD_WITHIN_API();
80000f54:	02800613          	li	a2,40
80000f58:	00000073          	ecall
	}
80000f5c:	40b2                	lw	ra,12(sp)
80000f5e:	4422                	lw	s0,8(sp)
80000f60:	4492                	lw	s1,4(sp)
80000f62:	0141                	addi	sp,sp,16
80000f64:	8082                	ret
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
80000f66:	00e46463          	bltu	s0,a4,80000f6e <vTaskDelayUntil+0x5a>
80000f6a:	fe8573e3          	bleu	s0,a0,80000f50 <vTaskDelayUntil+0x3c>
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
80000f6e:	4581                	li	a1,0
80000f70:	40a40533          	sub	a0,s0,a0
80000f74:	a95ff0ef          	jal	ra,80000a08 <prvAddCurrentTaskToDelayedList>
80000f78:	bfe1                	j	80000f50 <vTaskDelayUntil+0x3c>

80000f7a <prvIdleTask>:
{
80000f7a:	1101                	addi	sp,sp,-32
80000f7c:	cc22                	sw	s0,24(sp)
80000f7e:	c64e                	sw	s3,12(sp)
80000f80:	c452                	sw	s4,8(sp)
80000f82:	c256                	sw	s5,4(sp)
80000f84:	ce06                	sw	ra,28(sp)
80000f86:	ca26                	sw	s1,20(sp)
80000f88:	c84a                	sw	s2,16(sp)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80000f8a:	98818413          	addi	s0,gp,-1656 # 900003b0 <xTasksWaitingTermination>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
80000f8e:	82818493          	addi	s1,gp,-2008 # 90000250 <uxDeletedTasksWaitingCleanUp>
80000f92:	409c                	lw	a5,0(s1)
80000f94:	ef89                	bnez	a5,80000fae <prvIdleTask+0x34>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
80000f96:	8fc1a703          	lw	a4,-1796(gp) # 90000324 <pxReadyTasksLists>
80000f9a:	4785                	li	a5,1
80000f9c:	00e7f663          	bleu	a4,a5,80000fa8 <prvIdleTask+0x2e>
				taskYIELD();
80000fa0:	02800613          	li	a2,40
80000fa4:	00000073          	ecall
			vApplicationIdleHook();
80000fa8:	3dd000ef          	jal	ra,80001b84 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
80000fac:	b7cd                	j	80000f8e <prvIdleTask+0x14>
			vTaskSuspendAll();
80000fae:	330d                	jal	80000cd0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
80000fb0:	00042903          	lw	s2,0(s0)
			( void ) xTaskResumeAll();
80000fb4:	3d9d                	jal	80000e2a <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
80000fb6:	fc090ce3          	beqz	s2,80000f8e <prvIdleTask+0x14>
				taskENTER_CRITICAL();
80000fba:	10b000ef          	jal	ra,800018c4 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
80000fbe:	445c                	lw	a5,12(s0)
80000fc0:	00c7a903          	lw	s2,12(a5)
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
80000fc4:	00490513          	addi	a0,s2,4
80000fc8:	bc6ff0ef          	jal	ra,8000038e <uxListRemove>
					--uxCurrentNumberOfTasks;
80000fcc:	82418713          	addi	a4,gp,-2012 # 9000024c <uxCurrentNumberOfTasks>
80000fd0:	431c                	lw	a5,0(a4)
80000fd2:	17fd                	addi	a5,a5,-1
80000fd4:	c31c                	sw	a5,0(a4)
					--uxDeletedTasksWaitingCleanUp;
80000fd6:	409c                	lw	a5,0(s1)
80000fd8:	17fd                	addi	a5,a5,-1
80000fda:	c09c                	sw	a5,0(s1)
				taskEXIT_CRITICAL();
80000fdc:	0f9000ef          	jal	ra,800018d4 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
80000fe0:	03092503          	lw	a0,48(s2)
80000fe4:	7e8000ef          	jal	ra,800017cc <vPortFree>
			vPortFree( pxTCB );
80000fe8:	854a                	mv	a0,s2
80000fea:	7e2000ef          	jal	ra,800017cc <vPortFree>
80000fee:	b745                	j	80000f8e <prvIdleTask+0x14>

80000ff0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
80000ff0:	8301a703          	lw	a4,-2000(gp) # 90000258 <uxSchedulerSuspended>
80000ff4:	85018793          	addi	a5,gp,-1968 # 90000278 <xYieldPending>
80000ff8:	c701                	beqz	a4,80001000 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
80000ffa:	4705                	li	a4,1
80000ffc:	c398                	sw	a4,0(a5)
80000ffe:	8082                	ret
{
80001000:	1141                	addi	sp,sp,-16
80001002:	c422                	sw	s0,8(sp)
80001004:	c606                	sw	ra,12(sp)
		xYieldPending = pdFALSE;
80001006:	0007a023          	sw	zero,0(a5)
		taskCHECK_FOR_STACK_OVERFLOW();
8000100a:	81818793          	addi	a5,gp,-2024 # 90000240 <pxCurrentTCB>
8000100e:	4398                	lw	a4,0(a5)
80001010:	439c                	lw	a5,0(a5)
80001012:	81818413          	addi	s0,gp,-2024 # 90000240 <pxCurrentTCB>
80001016:	4318                	lw	a4,0(a4)
80001018:	5b9c                	lw	a5,48(a5)
8000101a:	00e7e863          	bltu	a5,a4,8000102a <vTaskSwitchContext+0x3a>
8000101e:	4008                	lw	a0,0(s0)
80001020:	400c                	lw	a1,0(s0)
80001022:	03458593          	addi	a1,a1,52 # 90000034 <_sp+0xffff0034>
80001026:	34b000ef          	jal	ra,80001b70 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000102a:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
8000102e:	4394                	lw	a3,0(a5)
80001030:	45d1                	li	a1,20
80001032:	02b685b3          	mul	a1,a3,a1
80001036:	8fc18713          	addi	a4,gp,-1796 # 90000324 <pxReadyTasksLists>
8000103a:	83818613          	addi	a2,gp,-1992 # 90000260 <uxTopReadyPriority>
8000103e:	8fc18793          	addi	a5,gp,-1796 # 90000324 <pxReadyTasksLists>
80001042:	972e                	add	a4,a4,a1
80001044:	430c                	lw	a1,0(a4)
80001046:	c99d                	beqz	a1,8000107c <vTaskSwitchContext+0x8c>
80001048:	4751                	li	a4,20
8000104a:	02e68733          	mul	a4,a3,a4
8000104e:	00e785b3          	add	a1,a5,a4
80001052:	41c8                	lw	a0,4(a1)
80001054:	0721                	addi	a4,a4,8
80001056:	973e                	add	a4,a4,a5
80001058:	4148                	lw	a0,4(a0)
8000105a:	c1c8                	sw	a0,4(a1)
8000105c:	00e51463          	bne	a0,a4,80001064 <vTaskSwitchContext+0x74>
80001060:	4158                	lw	a4,4(a0)
80001062:	c1d8                	sw	a4,4(a1)
80001064:	4751                	li	a4,20
80001066:	02e68733          	mul	a4,a3,a4
}
8000106a:	40b2                	lw	ra,12(sp)
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000106c:	97ba                	add	a5,a5,a4
8000106e:	43dc                	lw	a5,4(a5)
80001070:	47dc                	lw	a5,12(a5)
80001072:	c01c                	sw	a5,0(s0)
}
80001074:	4422                	lw	s0,8(sp)
		taskSELECT_HIGHEST_PRIORITY_TASK();
80001076:	c214                	sw	a3,0(a2)
}
80001078:	0141                	addi	sp,sp,16
8000107a:	8082                	ret
8000107c:	1731                	addi	a4,a4,-20
		taskSELECT_HIGHEST_PRIORITY_TASK();
8000107e:	e681                	bnez	a3,80001086 <vTaskSwitchContext+0x96>
80001080:	300477f3          	csrrci	a5,mstatus,8
80001084:	a001                	j	80001084 <vTaskSwitchContext+0x94>
80001086:	16fd                	addi	a3,a3,-1
80001088:	bf75                	j	80001044 <vTaskSwitchContext+0x54>

8000108a <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
8000108a:	e501                	bnez	a0,80001092 <vTaskPlaceOnEventList+0x8>
8000108c:	300477f3          	csrrci	a5,mstatus,8
80001090:	a001                	j	80001090 <vTaskPlaceOnEventList+0x6>
{
80001092:	1141                	addi	sp,sp,-16
80001094:	c422                	sw	s0,8(sp)
80001096:	842e                	mv	s0,a1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
80001098:	8181a583          	lw	a1,-2024(gp) # 90000240 <pxCurrentTCB>
{
8000109c:	c606                	sw	ra,12(sp)
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
8000109e:	05e1                	addi	a1,a1,24
800010a0:	ac0ff0ef          	jal	ra,80000360 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
800010a4:	8522                	mv	a0,s0
}
800010a6:	4422                	lw	s0,8(sp)
800010a8:	40b2                	lw	ra,12(sp)
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
800010aa:	4585                	li	a1,1
}
800010ac:	0141                	addi	sp,sp,16
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
800010ae:	95bff06f          	j	80000a08 <prvAddCurrentTaskToDelayedList>

800010b2 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
800010b2:	e501                	bnez	a0,800010ba <vTaskPlaceOnEventListRestricted+0x8>
800010b4:	300477f3          	csrrci	a5,mstatus,8
800010b8:	a001                	j	800010b8 <vTaskPlaceOnEventListRestricted+0x6>
	{
800010ba:	1101                	addi	sp,sp,-32
800010bc:	cc22                	sw	s0,24(sp)
800010be:	842e                	mv	s0,a1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800010c0:	8181a583          	lw	a1,-2024(gp) # 90000240 <pxCurrentTCB>
800010c4:	c632                	sw	a2,12(sp)
	{
800010c6:	ce06                	sw	ra,28(sp)
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
800010c8:	05e1                	addi	a1,a1,24
800010ca:	a7eff0ef          	jal	ra,80000348 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
800010ce:	4632                	lw	a2,12(sp)
800010d0:	c211                	beqz	a2,800010d4 <vTaskPlaceOnEventListRestricted+0x22>
			xTicksToWait = portMAX_DELAY;
800010d2:	547d                	li	s0,-1
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
800010d4:	8522                	mv	a0,s0
	}
800010d6:	4462                	lw	s0,24(sp)
800010d8:	40f2                	lw	ra,28(sp)
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
800010da:	85b2                	mv	a1,a2
	}
800010dc:	6105                	addi	sp,sp,32
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
800010de:	92bff06f          	j	80000a08 <prvAddCurrentTaskToDelayedList>

800010e2 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
800010e2:	455c                	lw	a5,12(a0)
{
800010e4:	1101                	addi	sp,sp,-32
800010e6:	cc22                	sw	s0,24(sp)
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
800010e8:	47c0                	lw	s0,12(a5)
{
800010ea:	ce06                	sw	ra,28(sp)
	configASSERT( pxUnblockedTCB );
800010ec:	e401                	bnez	s0,800010f4 <xTaskRemoveFromEventList+0x12>
800010ee:	300477f3          	csrrci	a5,mstatus,8
800010f2:	a001                	j	800010f2 <xTaskRemoveFromEventList+0x10>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
800010f4:	01840593          	addi	a1,s0,24
800010f8:	852e                	mv	a0,a1
800010fa:	c62e                	sw	a1,12(sp)
800010fc:	a92ff0ef          	jal	ra,8000038e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
80001100:	8301a783          	lw	a5,-2000(gp) # 90000258 <uxSchedulerSuspended>
80001104:	45b2                	lw	a1,12(sp)
80001106:	e7b1                	bnez	a5,80001152 <xTaskRemoveFromEventList+0x70>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
80001108:	00440593          	addi	a1,s0,4
8000110c:	852e                	mv	a0,a1
8000110e:	c62e                	sw	a1,12(sp)
80001110:	a7eff0ef          	jal	ra,8000038e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
80001114:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
80001118:	5448                	lw	a0,44(s0)
8000111a:	4398                	lw	a4,0(a5)
8000111c:	45b2                	lw	a1,12(sp)
8000111e:	00a77363          	bleu	a0,a4,80001124 <xTaskRemoveFromEventList+0x42>
80001122:	c388                	sw	a0,0(a5)
80001124:	47d1                	li	a5,20
80001126:	02f50533          	mul	a0,a0,a5
8000112a:	8fc18793          	addi	a5,gp,-1796 # 90000324 <pxReadyTasksLists>
8000112e:	953e                	add	a0,a0,a5
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80001130:	a18ff0ef          	jal	ra,80000348 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
80001134:	8181a783          	lw	a5,-2024(gp) # 90000240 <pxCurrentTCB>
80001138:	5458                	lw	a4,44(s0)
		xReturn = pdFALSE;
8000113a:	4501                	li	a0,0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
8000113c:	57dc                	lw	a5,44(a5)
8000113e:	00e7f663          	bleu	a4,a5,8000114a <xTaskRemoveFromEventList+0x68>
		xYieldPending = pdTRUE;
80001142:	4705                	li	a4,1
80001144:	84e1a823          	sw	a4,-1968(gp) # 90000278 <xYieldPending>
		xReturn = pdTRUE;
80001148:	4505                	li	a0,1
}
8000114a:	40f2                	lw	ra,28(sp)
8000114c:	4462                	lw	s0,24(sp)
8000114e:	6105                	addi	sp,sp,32
80001150:	8082                	ret
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
80001152:	96018513          	addi	a0,gp,-1696 # 90000388 <xPendingReadyList>
80001156:	bfe9                	j	80001130 <xTaskRemoveFromEventList+0x4e>

80001158 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
80001158:	e501                	bnez	a0,80001160 <vTaskSetTimeOutState+0x8>
8000115a:	300477f3          	csrrci	a5,mstatus,8
8000115e:	a001                	j	8000115e <vTaskSetTimeOutState+0x6>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
80001160:	8441a783          	lw	a5,-1980(gp) # 9000026c <xNumOfOverflows>
80001164:	c11c                	sw	a5,0(a0)
	pxTimeOut->xTimeOnEntering = xTickCount;
80001166:	84c1a783          	lw	a5,-1972(gp) # 90000274 <xTickCount>
8000116a:	c15c                	sw	a5,4(a0)
}
8000116c:	8082                	ret

8000116e <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
8000116e:	e501                	bnez	a0,80001176 <xTaskCheckForTimeOut+0x8>
80001170:	300477f3          	csrrci	a5,mstatus,8
80001174:	a001                	j	80001174 <xTaskCheckForTimeOut+0x6>
	configASSERT( pxTicksToWait );
80001176:	e581                	bnez	a1,8000117e <xTaskCheckForTimeOut+0x10>
80001178:	300477f3          	csrrci	a5,mstatus,8
8000117c:	a001                	j	8000117c <xTaskCheckForTimeOut+0xe>
{
8000117e:	1101                	addi	sp,sp,-32
80001180:	cc22                	sw	s0,24(sp)
80001182:	ca26                	sw	s1,20(sp)
80001184:	842a                	mv	s0,a0
80001186:	84ae                	mv	s1,a1
80001188:	ce06                	sw	ra,28(sp)
	taskENTER_CRITICAL();
8000118a:	73a000ef          	jal	ra,800018c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
8000118e:	84c1a683          	lw	a3,-1972(gp) # 90000274 <xTickCount>
			if( *pxTicksToWait == portMAX_DELAY )
80001192:	409c                	lw	a5,0(s1)
80001194:	577d                	li	a4,-1
				xReturn = pdFALSE;
80001196:	4501                	li	a0,0
			if( *pxTicksToWait == portMAX_DELAY )
80001198:	02e78663          	beq	a5,a4,800011c4 <xTaskCheckForTimeOut+0x56>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
8000119c:	8441a603          	lw	a2,-1980(gp) # 9000026c <xNumOfOverflows>
800011a0:	400c                	lw	a1,0(s0)
800011a2:	4058                	lw	a4,4(s0)
800011a4:	00c58563          	beq	a1,a2,800011ae <xTaskCheckForTimeOut+0x40>
			xReturn = pdTRUE;
800011a8:	4505                	li	a0,1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
800011aa:	00e6fd63          	bleu	a4,a3,800011c4 <xTaskCheckForTimeOut+0x56>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
800011ae:	40e68633          	sub	a2,a3,a4
			xReturn = pdTRUE;
800011b2:	4505                	li	a0,1
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
800011b4:	00f67863          	bleu	a5,a2,800011c4 <xTaskCheckForTimeOut+0x56>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
800011b8:	8f95                	sub	a5,a5,a3
800011ba:	97ba                	add	a5,a5,a4
			vTaskSetTimeOutState( pxTimeOut );
800011bc:	8522                	mv	a0,s0
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
800011be:	c09c                	sw	a5,0(s1)
			vTaskSetTimeOutState( pxTimeOut );
800011c0:	3f61                	jal	80001158 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
800011c2:	4501                	li	a0,0
800011c4:	c62a                	sw	a0,12(sp)
	taskEXIT_CRITICAL();
800011c6:	70e000ef          	jal	ra,800018d4 <vPortExitCritical>
}
800011ca:	40f2                	lw	ra,28(sp)
800011cc:	4462                	lw	s0,24(sp)
800011ce:	4532                	lw	a0,12(sp)
800011d0:	44d2                	lw	s1,20(sp)
800011d2:	6105                	addi	sp,sp,32
800011d4:	8082                	ret

800011d6 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
800011d6:	4705                	li	a4,1
800011d8:	84e1a823          	sw	a4,-1968(gp) # 90000278 <xYieldPending>
}
800011dc:	8082                	ret

800011de <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
800011de:	8481a783          	lw	a5,-1976(gp) # 90000270 <xSchedulerRunning>
			xReturn = taskSCHEDULER_NOT_STARTED;
800011e2:	4505                	li	a0,1
		if( xSchedulerRunning == pdFALSE )
800011e4:	c791                	beqz	a5,800011f0 <xTaskGetSchedulerState+0x12>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
800011e6:	8301a503          	lw	a0,-2000(gp) # 90000258 <uxSchedulerSuspended>
				xReturn = taskSCHEDULER_SUSPENDED;
800011ea:	00153513          	seqz	a0,a0
800011ee:	0506                	slli	a0,a0,0x1
	}
800011f0:	8082                	ret

800011f2 <vTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
800011f2:	c941                	beqz	a0,80001282 <vTaskPriorityInherit+0x90>
	{
800011f4:	1101                	addi	sp,sp,-32
800011f6:	ca26                	sw	s1,20(sp)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
800011f8:	81818793          	addi	a5,gp,-2024 # 90000240 <pxCurrentTCB>
800011fc:	439c                	lw	a5,0(a5)
800011fe:	5558                	lw	a4,44(a0)
	{
80001200:	ce06                	sw	ra,28(sp)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
80001202:	57dc                	lw	a5,44(a5)
	{
80001204:	cc22                	sw	s0,24(sp)
80001206:	c84a                	sw	s2,16(sp)
80001208:	81818493          	addi	s1,gp,-2024 # 90000240 <pxCurrentTCB>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
8000120c:	06f77363          	bleu	a5,a4,80001272 <vTaskPriorityInherit+0x80>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
80001210:	4d1c                	lw	a5,24(a0)
80001212:	0007c763          	bltz	a5,80001220 <vTaskPriorityInherit+0x2e>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80001216:	409c                	lw	a5,0(s1)
80001218:	57d4                	lw	a3,44(a5)
8000121a:	478d                	li	a5,3
8000121c:	8f95                	sub	a5,a5,a3
8000121e:	cd1c                	sw	a5,24(a0)
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
80001220:	4651                	li	a2,20
80001222:	02c70733          	mul	a4,a4,a2
80001226:	8fc18693          	addi	a3,gp,-1796 # 90000324 <pxReadyTasksLists>
8000122a:	8fc18913          	addi	s2,gp,-1796 # 90000324 <pxReadyTasksLists>
8000122e:	9736                	add	a4,a4,a3
80001230:	4954                	lw	a3,20(a0)
80001232:	02e69d63          	bne	a3,a4,8000126c <vTaskPriorityInherit+0x7a>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
80001236:	00450593          	addi	a1,a0,4
8000123a:	842a                	mv	s0,a0
8000123c:	852e                	mv	a0,a1
8000123e:	c62e                	sw	a1,12(sp)
80001240:	94eff0ef          	jal	ra,8000038e <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80001244:	409c                	lw	a5,0(s1)
					prvAddTaskToReadyList( pxTCB );
80001246:	45b2                	lw	a1,12(sp)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80001248:	57c8                	lw	a0,44(a5)
					prvAddTaskToReadyList( pxTCB );
8000124a:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
8000124e:	4398                	lw	a4,0(a5)
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
80001250:	d448                	sw	a0,44(s0)
					prvAddTaskToReadyList( pxTCB );
80001252:	02a76663          	bltu	a4,a0,8000127e <vTaskPriorityInherit+0x8c>
80001256:	47d1                	li	a5,20
80001258:	02f50533          	mul	a0,a0,a5
	}
8000125c:	4462                	lw	s0,24(sp)
8000125e:	40f2                	lw	ra,28(sp)
80001260:	44d2                	lw	s1,20(sp)
					prvAddTaskToReadyList( pxTCB );
80001262:	954a                	add	a0,a0,s2
	}
80001264:	4942                	lw	s2,16(sp)
80001266:	6105                	addi	sp,sp,32
					prvAddTaskToReadyList( pxTCB );
80001268:	8e0ff06f          	j	80000348 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
8000126c:	409c                	lw	a5,0(s1)
8000126e:	57dc                	lw	a5,44(a5)
80001270:	d55c                	sw	a5,44(a0)
	}
80001272:	40f2                	lw	ra,28(sp)
80001274:	4462                	lw	s0,24(sp)
80001276:	44d2                	lw	s1,20(sp)
80001278:	4942                	lw	s2,16(sp)
8000127a:	6105                	addi	sp,sp,32
8000127c:	8082                	ret
					prvAddTaskToReadyList( pxTCB );
8000127e:	c388                	sw	a0,0(a5)
80001280:	bfd9                	j	80001256 <vTaskPriorityInherit+0x64>
80001282:	8082                	ret

80001284 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
80001284:	e901                	bnez	a0,80001294 <xTaskPriorityDisinherit+0x10>
	BaseType_t xReturn = pdFALSE;
80001286:	4501                	li	a0,0
	}
80001288:	8082                	ret
	BaseType_t xReturn = pdFALSE;
8000128a:	4501                	li	a0,0
	}
8000128c:	40f2                	lw	ra,28(sp)
8000128e:	4462                	lw	s0,24(sp)
80001290:	6105                	addi	sp,sp,32
80001292:	8082                	ret
	{
80001294:	1101                	addi	sp,sp,-32
80001296:	cc22                	sw	s0,24(sp)
			configASSERT( pxTCB == pxCurrentTCB );
80001298:	8181a403          	lw	s0,-2024(gp) # 90000240 <pxCurrentTCB>
	{
8000129c:	ce06                	sw	ra,28(sp)
			configASSERT( pxTCB == pxCurrentTCB );
8000129e:	00a40563          	beq	s0,a0,800012a8 <xTaskPriorityDisinherit+0x24>
800012a2:	300477f3          	csrrci	a5,mstatus,8
800012a6:	a001                	j	800012a6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
800012a8:	443c                	lw	a5,72(s0)
800012aa:	e781                	bnez	a5,800012b2 <xTaskPriorityDisinherit+0x2e>
800012ac:	300477f3          	csrrci	a5,mstatus,8
800012b0:	a001                	j	800012b0 <xTaskPriorityDisinherit+0x2c>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
800012b2:	5454                	lw	a3,44(s0)
800012b4:	4078                	lw	a4,68(s0)
			( pxTCB->uxMutexesHeld )--;
800012b6:	17fd                	addi	a5,a5,-1
800012b8:	c43c                	sw	a5,72(s0)
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
800012ba:	fce688e3          	beq	a3,a4,8000128a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
800012be:	f7f1                	bnez	a5,8000128a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
800012c0:	00440593          	addi	a1,s0,4
800012c4:	852e                	mv	a0,a1
800012c6:	c62e                	sw	a1,12(sp)
800012c8:	8c6ff0ef          	jal	ra,8000038e <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
800012cc:	4068                	lw	a0,68(s0)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800012ce:	478d                	li	a5,3
					prvAddTaskToReadyList( pxTCB );
800012d0:	45b2                	lw	a1,12(sp)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
800012d2:	8f89                	sub	a5,a5,a0
800012d4:	cc1c                	sw	a5,24(s0)
					prvAddTaskToReadyList( pxTCB );
800012d6:	83818793          	addi	a5,gp,-1992 # 90000260 <uxTopReadyPriority>
800012da:	4398                	lw	a4,0(a5)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
800012dc:	d448                	sw	a0,44(s0)
					prvAddTaskToReadyList( pxTCB );
800012de:	00a77363          	bleu	a0,a4,800012e4 <xTaskPriorityDisinherit+0x60>
800012e2:	c388                	sw	a0,0(a5)
800012e4:	47d1                	li	a5,20
800012e6:	02f50533          	mul	a0,a0,a5
800012ea:	8fc18793          	addi	a5,gp,-1796 # 90000324 <pxReadyTasksLists>
800012ee:	953e                	add	a0,a0,a5
800012f0:	858ff0ef          	jal	ra,80000348 <vListInsertEnd>
					xReturn = pdTRUE;
800012f4:	4505                	li	a0,1
		return xReturn;
800012f6:	bf59                	j	8000128c <xTaskPriorityDisinherit+0x8>

800012f8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
800012f8:	81818713          	addi	a4,gp,-2024 # 90000240 <pxCurrentTCB>
800012fc:	4318                	lw	a4,0(a4)
800012fe:	81818793          	addi	a5,gp,-2024 # 90000240 <pxCurrentTCB>
80001302:	c709                	beqz	a4,8000130c <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
80001304:	4394                	lw	a3,0(a5)
80001306:	46b8                	lw	a4,72(a3)
80001308:	0705                	addi	a4,a4,1
8000130a:	c6b8                	sw	a4,72(a3)
		return pxCurrentTCB;
8000130c:	4388                	lw	a0,0(a5)
	}
8000130e:	8082                	ret

80001310 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
80001310:	1141                	addi	sp,sp,-16
80001312:	c422                	sw	s0,8(sp)
80001314:	c606                	sw	ra,12(sp)
80001316:	c226                	sw	s1,4(sp)
80001318:	c04a                	sw	s2,0(sp)
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
8000131a:	86018413          	addi	s0,gp,-1952 # 90000288 <xTimerQueue>
	taskENTER_CRITICAL();
8000131e:	235d                	jal	800018c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
80001320:	401c                	lw	a5,0(s0)
80001322:	ef95                	bnez	a5,8000135e <prvCheckForValidListAndQueue+0x4e>
		{
			vListInitialise( &xActiveTimerList1 );
80001324:	99c18913          	addi	s2,gp,-1636 # 900003c4 <xActiveTimerList1>
80001328:	99c18513          	addi	a0,gp,-1636 # 900003c4 <xActiveTimerList1>
8000132c:	802ff0ef          	jal	ra,8000032e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
80001330:	9b018493          	addi	s1,gp,-1616 # 900003d8 <xActiveTimerList2>
80001334:	9b018513          	addi	a0,gp,-1616 # 900003d8 <xActiveTimerList2>
80001338:	ff7fe0ef          	jal	ra,8000032e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
8000133c:	8521aa23          	sw	s2,-1964(gp) # 9000027c <pxCurrentTimerList>

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
80001340:	4601                	li	a2,0
80001342:	45c1                	li	a1,16
80001344:	4515                	li	a0,5
			pxOverflowTimerList = &xActiveTimerList2;
80001346:	8491ac23          	sw	s1,-1960(gp) # 90000280 <pxOverflowTimerList>
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
8000134a:	9faff0ef          	jal	ra,80000544 <xQueueGenericCreate>
8000134e:	c008                	sw	a0,0(s0)
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
80001350:	c519                	beqz	a0,8000135e <prvCheckForValidListAndQueue+0x4e>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
80001352:	900005b7          	lui	a1,0x90000
80001356:	00858593          	addi	a1,a1,8 # 90000008 <_sp+0xffff0008>
8000135a:	e0eff0ef          	jal	ra,80000968 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
8000135e:	4422                	lw	s0,8(sp)
80001360:	40b2                	lw	ra,12(sp)
80001362:	4492                	lw	s1,4(sp)
80001364:	4902                	lw	s2,0(sp)
80001366:	0141                	addi	sp,sp,16
	taskEXIT_CRITICAL();
80001368:	a3b5                	j	800018d4 <vPortExitCritical>

8000136a <prvInsertTimerInActiveList>:
{
8000136a:	1141                	addi	sp,sp,-16
8000136c:	c606                	sw	ra,12(sp)
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
8000136e:	c14c                	sw	a1,4(a0)
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
80001370:	c908                	sw	a0,16(a0)
{
80001372:	87aa                	mv	a5,a0
	if( xNextExpiryTime <= xTimeNow )
80001374:	02b66163          	bltu	a2,a1,80001396 <prvInsertTimerInActiveList+0x2c>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
80001378:	4d18                	lw	a4,24(a0)
8000137a:	8e15                	sub	a2,a2,a3
			xProcessTimerNow = pdTRUE;
8000137c:	4505                	li	a0,1
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
8000137e:	00e67963          	bleu	a4,a2,80001390 <prvInsertTimerInActiveList+0x26>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
80001382:	00478593          	addi	a1,a5,4
80001386:	8581a503          	lw	a0,-1960(gp) # 90000280 <pxOverflowTimerList>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
8000138a:	fd7fe0ef          	jal	ra,80000360 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
8000138e:	4501                	li	a0,0
}
80001390:	40b2                	lw	ra,12(sp)
80001392:	0141                	addi	sp,sp,16
80001394:	8082                	ret
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
80001396:	00d67563          	bleu	a3,a2,800013a0 <prvInsertTimerInActiveList+0x36>
			xProcessTimerNow = pdTRUE;
8000139a:	4505                	li	a0,1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
8000139c:	fed5fae3          	bleu	a3,a1,80001390 <prvInsertTimerInActiveList+0x26>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
800013a0:	00478593          	addi	a1,a5,4
800013a4:	8541a503          	lw	a0,-1964(gp) # 9000027c <pxCurrentTimerList>
800013a8:	b7cd                	j	8000138a <prvInsertTimerInActiveList+0x20>

800013aa <xTimerCreateTimerTask>:
{
800013aa:	1141                	addi	sp,sp,-16
800013ac:	c606                	sw	ra,12(sp)
	prvCheckForValidListAndQueue();
800013ae:	378d                	jal	80001310 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
800013b0:	8601a783          	lw	a5,-1952(gp) # 90000288 <xTimerQueue>
800013b4:	c395                	beqz	a5,800013d8 <xTimerCreateTimerTask+0x2e>
			xReturn = xTaskCreate(	prvTimerTask,
800013b6:	900005b7          	lui	a1,0x90000
800013ba:	80001537          	lui	a0,0x80001
800013be:	86418793          	addi	a5,gp,-1948 # 9000028c <xTimerTaskHandle>
800013c2:	470d                	li	a4,3
800013c4:	4681                	li	a3,0
800013c6:	1c200613          	li	a2,450
800013ca:	01058593          	addi	a1,a1,16 # 90000010 <_sp+0xffff0010>
800013ce:	51850513          	addi	a0,a0,1304 # 80001518 <_sp+0xefff1518>
800013d2:	ec8ff0ef          	jal	ra,80000a9a <xTaskCreate>
	configASSERT( xReturn );
800013d6:	e501                	bnez	a0,800013de <xTimerCreateTimerTask+0x34>
800013d8:	300477f3          	csrrci	a5,mstatus,8
800013dc:	a001                	j	800013dc <xTimerCreateTimerTask+0x32>
}
800013de:	40b2                	lw	ra,12(sp)
800013e0:	0141                	addi	sp,sp,16
800013e2:	8082                	ret

800013e4 <xTimerCreate>:
	{
800013e4:	1101                	addi	sp,sp,-32
800013e6:	c256                	sw	s5,4(sp)
800013e8:	8aaa                	mv	s5,a0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
800013ea:	02800513          	li	a0,40
	{
800013ee:	cc22                	sw	s0,24(sp)
800013f0:	ca26                	sw	s1,20(sp)
800013f2:	c84a                	sw	s2,16(sp)
800013f4:	c64e                	sw	s3,12(sp)
800013f6:	c452                	sw	s4,8(sp)
800013f8:	ce06                	sw	ra,28(sp)
800013fa:	84ae                	mv	s1,a1
800013fc:	8a32                	mv	s4,a2
800013fe:	89b6                	mv	s3,a3
80001400:	893a                	mv	s2,a4
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
80001402:	2c61                	jal	8000169a <pvPortMalloc>
80001404:	842a                	mv	s0,a0
		if( pxNewTimer != NULL )
80001406:	c11d                	beqz	a0,8000142c <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
80001408:	e481                	bnez	s1,80001410 <xTimerCreate+0x2c>
8000140a:	300477f3          	csrrci	a5,mstatus,8
8000140e:	a001                	j	8000140e <xTimerCreate+0x2a>
		prvCheckForValidListAndQueue();
80001410:	3701                	jal	80001310 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
80001412:	00440513          	addi	a0,s0,4
		pxNewTimer->pcTimerName = pcTimerName;
80001416:	01542023          	sw	s5,0(s0)
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
8000141a:	cc04                	sw	s1,24(s0)
		pxNewTimer->uxAutoReload = uxAutoReload;
8000141c:	01442e23          	sw	s4,28(s0)
		pxNewTimer->pvTimerID = pvTimerID;
80001420:	03342023          	sw	s3,32(s0)
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
80001424:	03242223          	sw	s2,36(s0)
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
80001428:	f1bfe0ef          	jal	ra,80000342 <vListInitialiseItem>
	}
8000142c:	8522                	mv	a0,s0
8000142e:	40f2                	lw	ra,28(sp)
80001430:	4462                	lw	s0,24(sp)
80001432:	44d2                	lw	s1,20(sp)
80001434:	4942                	lw	s2,16(sp)
80001436:	49b2                	lw	s3,12(sp)
80001438:	4a22                	lw	s4,8(sp)
8000143a:	4a92                	lw	s5,4(sp)
8000143c:	6105                	addi	sp,sp,32
8000143e:	8082                	ret

80001440 <xTimerGenericCommand>:
	configASSERT( xTimer );
80001440:	e501                	bnez	a0,80001448 <xTimerGenericCommand+0x8>
80001442:	300477f3          	csrrci	a5,mstatus,8
80001446:	a001                	j	80001446 <xTimerGenericCommand+0x6>
{
80001448:	1101                	addi	sp,sp,-32
8000144a:	cc22                	sw	s0,24(sp)
	if( xTimerQueue != NULL )
8000144c:	86018413          	addi	s0,gp,-1952 # 90000288 <xTimerQueue>
80001450:	00042883          	lw	a7,0(s0)
{
80001454:	ce06                	sw	ra,28(sp)
80001456:	ca26                	sw	s1,20(sp)
80001458:	87aa                	mv	a5,a0
BaseType_t xReturn = pdFAIL;
8000145a:	4501                	li	a0,0
	if( xTimerQueue != NULL )
8000145c:	02088563          	beqz	a7,80001486 <xTimerGenericCommand+0x46>
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
80001460:	c43e                	sw	a5,8(sp)
		xMessage.xMessageID = xCommandID;
80001462:	c02e                	sw	a1,0(sp)
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
80001464:	c232                	sw	a2,4(sp)
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
80001466:	4795                	li	a5,5
80001468:	84ba                	mv	s1,a4
8000146a:	8836                	mv	a6,a3
8000146c:	02b7c263          	blt	a5,a1,80001490 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
80001470:	33bd                	jal	800011de <xTaskGetSchedulerState>
80001472:	4789                	li	a5,2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
80001474:	4681                	li	a3,0
80001476:	8626                	mv	a2,s1
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
80001478:	00f50363          	beq	a0,a5,8000147e <xTimerGenericCommand+0x3e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
8000147c:	4601                	li	a2,0
8000147e:	4008                	lw	a0,0(s0)
80001480:	858a                	mv	a1,sp
80001482:	90eff0ef          	jal	ra,80000590 <xQueueGenericSend>
}
80001486:	40f2                	lw	ra,28(sp)
80001488:	4462                	lw	s0,24(sp)
8000148a:	44d2                	lw	s1,20(sp)
8000148c:	6105                	addi	sp,sp,32
8000148e:	8082                	ret
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
80001490:	4681                	li	a3,0
80001492:	8642                	mv	a2,a6
80001494:	858a                	mv	a1,sp
80001496:	8546                	mv	a0,a7
80001498:	a34ff0ef          	jal	ra,800006cc <xQueueGenericSendFromISR>
8000149c:	b7ed                	j	80001486 <xTimerGenericCommand+0x46>

8000149e <prvSwitchTimerLists>:
{
8000149e:	7179                	addi	sp,sp,-48
800014a0:	d04a                	sw	s2,32(sp)
800014a2:	ce4e                	sw	s3,28(sp)
800014a4:	d606                	sw	ra,44(sp)
800014a6:	d422                	sw	s0,40(sp)
800014a8:	d226                	sw	s1,36(sp)
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
800014aa:	4985                	li	s3,1
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
800014ac:	85418493          	addi	s1,gp,-1964 # 9000027c <pxCurrentTimerList>
800014b0:	4098                	lw	a4,0(s1)
800014b2:	431c                	lw	a5,0(a4)
800014b4:	ef89                	bnez	a5,800014ce <prvSwitchTimerLists+0x30>
	pxCurrentTimerList = pxOverflowTimerList;
800014b6:	85818793          	addi	a5,gp,-1960 # 90000280 <pxOverflowTimerList>
800014ba:	4394                	lw	a3,0(a5)
}
800014bc:	50b2                	lw	ra,44(sp)
800014be:	5422                	lw	s0,40(sp)
	pxCurrentTimerList = pxOverflowTimerList;
800014c0:	c094                	sw	a3,0(s1)
	pxOverflowTimerList = pxTemp;
800014c2:	c398                	sw	a4,0(a5)
}
800014c4:	5492                	lw	s1,36(sp)
800014c6:	5902                	lw	s2,32(sp)
800014c8:	49f2                	lw	s3,28(sp)
800014ca:	6145                	addi	sp,sp,48
800014cc:	8082                	ret
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
800014ce:	475c                	lw	a5,12(a4)
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
800014d0:	47c0                	lw	s0,12(a5)
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
800014d2:	4390                	lw	a2,0(a5)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
800014d4:	00440593          	addi	a1,s0,4
800014d8:	852e                	mv	a0,a1
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
800014da:	c632                	sw	a2,12(sp)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
800014dc:	c42e                	sw	a1,8(sp)
800014de:	eb1fe0ef          	jal	ra,8000038e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
800014e2:	505c                	lw	a5,36(s0)
800014e4:	8522                	mv	a0,s0
800014e6:	9782                	jalr	a5
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
800014e8:	4c5c                	lw	a5,28(s0)
800014ea:	45a2                	lw	a1,8(sp)
800014ec:	4632                	lw	a2,12(sp)
800014ee:	fb379fe3          	bne	a5,s3,800014ac <prvSwitchTimerLists+0xe>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
800014f2:	4c1c                	lw	a5,24(s0)
800014f4:	97b2                	add	a5,a5,a2
			if( xReloadTime > xNextExpireTime )
800014f6:	00f67863          	bleu	a5,a2,80001506 <prvSwitchTimerLists+0x68>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
800014fa:	4088                	lw	a0,0(s1)
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
800014fc:	c05c                	sw	a5,4(s0)
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
800014fe:	c800                	sw	s0,16(s0)
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
80001500:	e61fe0ef          	jal	ra,80000360 <vListInsert>
80001504:	b765                	j	800014ac <prvSwitchTimerLists+0xe>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
80001506:	4701                	li	a4,0
80001508:	4681                	li	a3,0
8000150a:	4581                	li	a1,0
8000150c:	8522                	mv	a0,s0
8000150e:	3f0d                	jal	80001440 <xTimerGenericCommand>
				configASSERT( xResult );
80001510:	fd51                	bnez	a0,800014ac <prvSwitchTimerLists+0xe>
80001512:	300477f3          	csrrci	a5,mstatus,8
80001516:	a001                	j	80001516 <prvSwitchTimerLists+0x78>

80001518 <prvTimerTask>:
{
80001518:	715d                	addi	sp,sp,-80
8000151a:	de4e                	sw	s3,60(sp)
8000151c:	dc52                	sw	s4,56(sp)
8000151e:	da56                	sw	s5,52(sp)
80001520:	d85a                	sw	s6,48(sp)
80001522:	d65e                	sw	s7,44(sp)
80001524:	c686                	sw	ra,76(sp)
80001526:	c4a2                	sw	s0,72(sp)
80001528:	c2a6                	sw	s1,68(sp)
8000152a:	c0ca                	sw	s2,64(sp)
8000152c:	d462                	sw	s8,40(sp)
8000152e:	d266                	sw	s9,36(sp)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
80001530:	4ba5                	li	s7,9
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
80001532:	8541a783          	lw	a5,-1964(gp) # 9000027c <pxCurrentTimerList>
80001536:	85418c93          	addi	s9,gp,-1964 # 9000027c <pxCurrentTimerList>
		xNextExpireTime = ( TickType_t ) 0U;
8000153a:	4c01                	li	s8,0
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
8000153c:	4380                	lw	s0,0(a5)
	if( *pxListWasEmpty == pdFALSE )
8000153e:	c401                	beqz	s0,80001546 <prvTimerTask+0x2e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
80001540:	47dc                	lw	a5,12(a5)
80001542:	0007ac03          	lw	s8,0(a5)
	vTaskSuspendAll();
80001546:	f8aff0ef          	jal	ra,80000cd0 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
8000154a:	f92ff0ef          	jal	ra,80000cdc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
8000154e:	85c18793          	addi	a5,gp,-1956 # 90000284 <xLastTime.2651>
80001552:	4398                	lw	a4,0(a5)
	xTimeNow = xTaskGetTickCount();
80001554:	84aa                	mv	s1,a0
80001556:	85c18913          	addi	s2,gp,-1956 # 90000284 <xLastTime.2651>
	if( xTimeNow < xLastTime )
8000155a:	06e57f63          	bleu	a4,a0,800015d8 <prvTimerTask+0xc0>
		prvSwitchTimerLists();
8000155e:	3781                	jal	8000149e <prvSwitchTimerLists>
	xLastTime = xTimeNow;
80001560:	00992023          	sw	s1,0(s2)
			( void ) xTaskResumeAll();
80001564:	8c7ff0ef          	jal	ra,80000e2a <xTaskResumeAll>
80001568:	4485                	li	s1,1
8000156a:	4c05                	li	s8,1
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
8000156c:	8601a503          	lw	a0,-1952(gp) # 90000288 <xTimerQueue>
80001570:	4681                	li	a3,0
80001572:	4601                	li	a2,0
80001574:	080c                	addi	a1,sp,16
80001576:	a9aff0ef          	jal	ra,80000810 <xQueueGenericReceive>
8000157a:	dd45                	beqz	a0,80001532 <prvTimerTask+0x1a>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
8000157c:	47c2                	lw	a5,16(sp)
8000157e:	0007d663          	bgez	a5,8000158a <prvTimerTask+0x72>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
80001582:	45f2                	lw	a1,28(sp)
80001584:	4562                	lw	a0,24(sp)
80001586:	47d2                	lw	a5,20(sp)
80001588:	9782                	jalr	a5
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
8000158a:	47c2                	lw	a5,16(sp)
8000158c:	fe07c0e3          	bltz	a5,8000156c <prvTimerTask+0x54>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
80001590:	4462                	lw	s0,24(sp)
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
80001592:	485c                	lw	a5,20(s0)
80001594:	c789                	beqz	a5,8000159e <prvTimerTask+0x86>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
80001596:	00440513          	addi	a0,s0,4
8000159a:	df5fe0ef          	jal	ra,8000038e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
8000159e:	f3eff0ef          	jal	ra,80000cdc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
800015a2:	00092783          	lw	a5,0(s2)
	xTimeNow = xTaskGetTickCount();
800015a6:	862a                	mv	a2,a0
	if( xTimeNow < xLastTime )
800015a8:	00f57563          	bleu	a5,a0,800015b2 <prvTimerTask+0x9a>
800015ac:	c62a                	sw	a0,12(sp)
		prvSwitchTimerLists();
800015ae:	3dc5                	jal	8000149e <prvSwitchTimerLists>
800015b0:	4632                	lw	a2,12(sp)
800015b2:	47c2                	lw	a5,16(sp)
	xLastTime = xTimeNow;
800015b4:	00c92023          	sw	a2,0(s2)
800015b8:	fafbeae3          	bltu	s7,a5,8000156c <prvTimerTask+0x54>
800015bc:	00f497b3          	sll	a5,s1,a5
800015c0:	2107f713          	andi	a4,a5,528
800015c4:	e361                	bnez	a4,80001684 <prvTimerTask+0x16c>
800015c6:	0c77f713          	andi	a4,a5,199
800015ca:	e359                	bnez	a4,80001650 <prvTimerTask+0x138>
800015cc:	0207f793          	andi	a5,a5,32
800015d0:	dfd1                	beqz	a5,8000156c <prvTimerTask+0x54>
						vPortFree( pxTimer );
800015d2:	8522                	mv	a0,s0
800015d4:	2ae5                	jal	800017cc <vPortFree>
800015d6:	bf59                	j	8000156c <prvTimerTask+0x54>
	xLastTime = xTimeNow;
800015d8:	c388                	sw	a0,0(a5)
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
800015da:	c439                	beqz	s0,80001628 <prvTimerTask+0x110>
800015dc:	4601                	li	a2,0
800015de:	05856a63          	bltu	a0,s8,80001632 <prvTimerTask+0x11a>
				( void ) xTaskResumeAll();
800015e2:	849ff0ef          	jal	ra,80000e2a <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
800015e6:	000ca783          	lw	a5,0(s9)
800015ea:	47dc                	lw	a5,12(a5)
800015ec:	47c0                	lw	s0,12(a5)
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
800015ee:	00440513          	addi	a0,s0,4
800015f2:	d9dfe0ef          	jal	ra,8000038e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
800015f6:	4c58                	lw	a4,28(s0)
800015f8:	4785                	li	a5,1
800015fa:	02f71363          	bne	a4,a5,80001620 <prvTimerTask+0x108>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
800015fe:	4c0c                	lw	a1,24(s0)
80001600:	86e2                	mv	a3,s8
80001602:	8626                	mv	a2,s1
80001604:	95e2                	add	a1,a1,s8
80001606:	8522                	mv	a0,s0
80001608:	338d                	jal	8000136a <prvInsertTimerInActiveList>
8000160a:	c919                	beqz	a0,80001620 <prvTimerTask+0x108>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
8000160c:	4701                	li	a4,0
8000160e:	4681                	li	a3,0
80001610:	8662                	mv	a2,s8
80001612:	4581                	li	a1,0
80001614:	8522                	mv	a0,s0
80001616:	352d                	jal	80001440 <xTimerGenericCommand>
			configASSERT( xResult );
80001618:	e501                	bnez	a0,80001620 <prvTimerTask+0x108>
8000161a:	300477f3          	csrrci	a5,mstatus,8
8000161e:	a001                	j	8000161e <prvTimerTask+0x106>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
80001620:	505c                	lw	a5,36(s0)
80001622:	8522                	mv	a0,s0
80001624:	9782                	jalr	a5
80001626:	b789                	j	80001568 <prvTimerTask+0x50>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
80001628:	8581a783          	lw	a5,-1960(gp) # 90000280 <pxOverflowTimerList>
8000162c:	4390                	lw	a2,0(a5)
8000162e:	00163613          	seqz	a2,a2
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
80001632:	8601a503          	lw	a0,-1952(gp) # 90000288 <xTimerQueue>
80001636:	409c05b3          	sub	a1,s8,s1
8000163a:	b56ff0ef          	jal	ra,80000990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
8000163e:	fecff0ef          	jal	ra,80000e2a <xTaskResumeAll>
80001642:	f20513e3          	bnez	a0,80001568 <prvTimerTask+0x50>
					portYIELD_WITHIN_API();
80001646:	02800613          	li	a2,40
8000164a:	00000073          	ecall
8000164e:	bf29                	j	80001568 <prvTimerTask+0x50>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
80001650:	4c0c                	lw	a1,24(s0)
80001652:	46d2                	lw	a3,20(sp)
80001654:	8522                	mv	a0,s0
80001656:	95b6                	add	a1,a1,a3
80001658:	3b09                	jal	8000136a <prvInsertTimerInActiveList>
8000165a:	f00509e3          	beqz	a0,8000156c <prvTimerTask+0x54>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
8000165e:	505c                	lw	a5,36(s0)
80001660:	8522                	mv	a0,s0
80001662:	9782                	jalr	a5
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
80001664:	4c5c                	lw	a5,28(s0)
80001666:	f18793e3          	bne	a5,s8,8000156c <prvTimerTask+0x54>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
8000166a:	4c1c                	lw	a5,24(s0)
8000166c:	4652                	lw	a2,20(sp)
8000166e:	4701                	li	a4,0
80001670:	4681                	li	a3,0
80001672:	963e                	add	a2,a2,a5
80001674:	4581                	li	a1,0
80001676:	8522                	mv	a0,s0
80001678:	33e1                	jal	80001440 <xTimerGenericCommand>
							configASSERT( xResult );
8000167a:	ee0519e3          	bnez	a0,8000156c <prvTimerTask+0x54>
8000167e:	300477f3          	csrrci	a5,mstatus,8
80001682:	a001                	j	80001682 <prvTimerTask+0x16a>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
80001684:	45d2                	lw	a1,20(sp)
80001686:	cc0c                	sw	a1,24(s0)
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
80001688:	e581                	bnez	a1,80001690 <prvTimerTask+0x178>
8000168a:	300477f3          	csrrci	a5,mstatus,8
8000168e:	a001                	j	8000168e <prvTimerTask+0x176>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
80001690:	86b2                	mv	a3,a2
80001692:	95b2                	add	a1,a1,a2
80001694:	8522                	mv	a0,s0
80001696:	39d1                	jal	8000136a <prvInsertTimerInActiveList>
80001698:	bdd1                	j	8000156c <prvTimerTask+0x54>

8000169a <pvPortMalloc>:
{
8000169a:	7179                	addi	sp,sp,-48
8000169c:	c62a                	sw	a0,12(sp)
8000169e:	d606                	sw	ra,44(sp)
800016a0:	d422                	sw	s0,40(sp)
800016a2:	d226                	sw	s1,36(sp)
800016a4:	d04a                	sw	s2,32(sp)
800016a6:	ce4e                	sw	s3,28(sp)
800016a8:	cc52                	sw	s4,24(sp)
	vTaskSuspendAll();
800016aa:	e26ff0ef          	jal	ra,80000cd0 <vTaskSuspendAll>
		if( pxEnd == NULL )
800016ae:	8681a783          	lw	a5,-1944(gp) # 90000290 <pxEnd>
800016b2:	86818613          	addi	a2,gp,-1944 # 90000290 <pxEnd>
800016b6:	86c18693          	addi	a3,gp,-1940 # 90000294 <xBlockAllocatedBit>
800016ba:	4532                	lw	a0,12(sp)
800016bc:	ebb1                	bnez	a5,80001710 <pvPortMalloc+0x76>
	uxAddress = ( size_t ) ucHeap;
800016be:	90000737          	lui	a4,0x90000
800016c2:	3ec70713          	addi	a4,a4,1004 # 900003ec <_sp+0xffff03ec>
800016c6:	678d                	lui	a5,0x3
800016c8:	c0078793          	addi	a5,a5,-1024 # 2c00 <__stack_size+0x2400>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
800016cc:	00777813          	andi	a6,a4,7
800016d0:	00f705b3          	add	a1,a4,a5
800016d4:	00080663          	beqz	a6,800016e0 <pvPortMalloc+0x46>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
800016d8:	071d                	addi	a4,a4,7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
800016da:	9b61                	andi	a4,a4,-8
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
800016dc:	40e587b3          	sub	a5,a1,a4
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
800016e0:	97ba                	add	a5,a5,a4
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800016e2:	87818593          	addi	a1,gp,-1928 # 900002a0 <xStart>
	uxAddress -= xHeapStructSize;
800016e6:	17e1                	addi	a5,a5,-8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
800016e8:	9be1                	andi	a5,a5,-8
	xStart.xBlockSize = ( size_t ) 0;
800016ea:	0005a223          	sw	zero,4(a1)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
800016ee:	c198                	sw	a4,0(a1)
	pxEnd->xBlockSize = 0;
800016f0:	0007a223          	sw	zero,4(a5)
	pxEnd->pxNextFreeBlock = NULL;
800016f4:	0007a023          	sw	zero,0(a5)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
800016f8:	40e785b3          	sub	a1,a5,a4
	pxEnd = ( void * ) uxAddress;
800016fc:	c21c                	sw	a5,0(a2)
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
800016fe:	c31c                	sw	a5,0(a4)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
80001700:	86b1aa23          	sw	a1,-1932(gp) # 9000029c <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
80001704:	86b1a823          	sw	a1,-1936(gp) # 90000298 <xFreeBytesRemaining>
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
80001708:	800007b7          	lui	a5,0x80000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
8000170c:	c34c                	sw	a1,4(a4)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
8000170e:	c29c                	sw	a5,0(a3)
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
80001710:	0006aa03          	lw	s4,0(a3)
80001714:	00aa77b3          	and	a5,s4,a0
80001718:	cf91                	beqz	a5,80001734 <pvPortMalloc+0x9a>
	( void ) xTaskResumeAll();
8000171a:	f10ff0ef          	jal	ra,80000e2a <xTaskResumeAll>
			vApplicationMallocFailedHook();
8000171e:	293d                	jal	80001b5c <vApplicationMallocFailedHook>
80001720:	4481                	li	s1,0
}
80001722:	50b2                	lw	ra,44(sp)
80001724:	5422                	lw	s0,40(sp)
80001726:	8526                	mv	a0,s1
80001728:	5902                	lw	s2,32(sp)
8000172a:	5492                	lw	s1,36(sp)
8000172c:	49f2                	lw	s3,28(sp)
8000172e:	4a62                	lw	s4,24(sp)
80001730:	6145                	addi	sp,sp,48
80001732:	8082                	ret
			if( xWantedSize > 0 )
80001734:	d17d                	beqz	a0,8000171a <pvPortMalloc+0x80>
				xWantedSize += xHeapStructSize;
80001736:	00850793          	addi	a5,a0,8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
8000173a:	0077f713          	andi	a4,a5,7
8000173e:	c319                	beqz	a4,80001744 <pvPortMalloc+0xaa>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
80001740:	9be1                	andi	a5,a5,-8
80001742:	07a1                	addi	a5,a5,8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
80001744:	dbf9                	beqz	a5,8000171a <pvPortMalloc+0x80>
80001746:	8701a903          	lw	s2,-1936(gp) # 90000298 <xFreeBytesRemaining>
8000174a:	87018993          	addi	s3,gp,-1936 # 90000298 <xFreeBytesRemaining>
8000174e:	fcf966e3          	bltu	s2,a5,8000171a <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
80001752:	8781a403          	lw	s0,-1928(gp) # 900002a0 <xStart>
				pxPreviousBlock = &xStart;
80001756:	87818713          	addi	a4,gp,-1928 # 900002a0 <xStart>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
8000175a:	4054                	lw	a3,4(s0)
8000175c:	00f6f463          	bleu	a5,a3,80001764 <pvPortMalloc+0xca>
80001760:	400c                	lw	a1,0(s0)
80001762:	e585                	bnez	a1,8000178a <pvPortMalloc+0xf0>
				if( pxBlock != pxEnd )
80001764:	4210                	lw	a2,0(a2)
80001766:	fa860ae3          	beq	a2,s0,8000171a <pvPortMalloc+0x80>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
8000176a:	4010                	lw	a2,0(s0)
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
8000176c:	4304                	lw	s1,0(a4)
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
8000176e:	c310                	sw	a2,0(a4)
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
80001770:	40f68733          	sub	a4,a3,a5
80001774:	46c1                	li	a3,16
80001776:	02e6f163          	bleu	a4,a3,80001798 <pvPortMalloc+0xfe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
8000177a:	00f40533          	add	a0,s0,a5
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
8000177e:	00757693          	andi	a3,a0,7
80001782:	c699                	beqz	a3,80001790 <pvPortMalloc+0xf6>
80001784:	300477f3          	csrrci	a5,mstatus,8
80001788:	a001                	j	80001788 <pvPortMalloc+0xee>
8000178a:	8722                	mv	a4,s0
8000178c:	842e                	mv	s0,a1
8000178e:	b7f1                	j	8000175a <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
80001790:	c158                	sw	a4,4(a0)
						pxBlock->xBlockSize = xWantedSize;
80001792:	c05c                	sw	a5,4(s0)
						prvInsertBlockIntoFreeList( pxNewBlockLink );
80001794:	86dfe0ef          	jal	ra,80000000 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
80001798:	4054                	lw	a3,4(s0)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
8000179a:	87418713          	addi	a4,gp,-1932 # 9000029c <xMinimumEverFreeBytesRemaining>
8000179e:	4310                	lw	a2,0(a4)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
800017a0:	40d907b3          	sub	a5,s2,a3
800017a4:	00f9a023          	sw	a5,0(s3)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
800017a8:	00c7f363          	bleu	a2,a5,800017ae <pvPortMalloc+0x114>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
800017ac:	c31c                	sw	a5,0(a4)
					pxBlock->xBlockSize |= xBlockAllocatedBit;
800017ae:	00da67b3          	or	a5,s4,a3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
800017b2:	04a1                	addi	s1,s1,8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
800017b4:	c05c                	sw	a5,4(s0)
					pxBlock->pxNextFreeBlock = NULL;
800017b6:	00042023          	sw	zero,0(s0)
	( void ) xTaskResumeAll();
800017ba:	e70ff0ef          	jal	ra,80000e2a <xTaskResumeAll>
		if( pvReturn == NULL )
800017be:	d0a5                	beqz	s1,8000171e <pvPortMalloc+0x84>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
800017c0:	0074f793          	andi	a5,s1,7
800017c4:	dfb9                	beqz	a5,80001722 <pvPortMalloc+0x88>
800017c6:	300477f3          	csrrci	a5,mstatus,8
800017ca:	a001                	j	800017ca <pvPortMalloc+0x130>

800017cc <vPortFree>:
	if( pv != NULL )
800017cc:	cd21                	beqz	a0,80001824 <vPortFree+0x58>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
800017ce:	ffc52703          	lw	a4,-4(a0)
800017d2:	86c1a783          	lw	a5,-1940(gp) # 90000294 <xBlockAllocatedBit>
800017d6:	00f776b3          	and	a3,a4,a5
800017da:	e681                	bnez	a3,800017e2 <vPortFree+0x16>
800017dc:	300477f3          	csrrci	a5,mstatus,8
800017e0:	a001                	j	800017e0 <vPortFree+0x14>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
800017e2:	ff852683          	lw	a3,-8(a0)
800017e6:	c681                	beqz	a3,800017ee <vPortFree+0x22>
800017e8:	300477f3          	csrrci	a5,mstatus,8
800017ec:	a001                	j	800017ec <vPortFree+0x20>
{
800017ee:	1141                	addi	sp,sp,-16
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
800017f0:	fff7c793          	not	a5,a5
{
800017f4:	c606                	sw	ra,12(sp)
800017f6:	c422                	sw	s0,8(sp)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
800017f8:	8ff9                	and	a5,a5,a4
800017fa:	fef52e23          	sw	a5,-4(a0)
800017fe:	842a                	mv	s0,a0
				vTaskSuspendAll();
80001800:	cd0ff0ef          	jal	ra,80000cd0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
80001804:	87018793          	addi	a5,gp,-1936 # 90000298 <xFreeBytesRemaining>
80001808:	ffc42703          	lw	a4,-4(s0)
8000180c:	4394                	lw	a3,0(a5)
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
8000180e:	ff840513          	addi	a0,s0,-8
					xFreeBytesRemaining += pxLink->xBlockSize;
80001812:	9736                	add	a4,a4,a3
80001814:	c398                	sw	a4,0(a5)
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
80001816:	feafe0ef          	jal	ra,80000000 <prvInsertBlockIntoFreeList>
}
8000181a:	4422                	lw	s0,8(sp)
8000181c:	40b2                	lw	ra,12(sp)
8000181e:	0141                	addi	sp,sp,16
				( void ) xTaskResumeAll();
80001820:	e0aff06f          	j	80000e2a <xTaskResumeAll>
80001824:	8082                	ret

80001826 <xPortGetFreeHeapSize>:
}
80001826:	8701a503          	lw	a0,-1936(gp) # 90000298 <xFreeBytesRemaining>
8000182a:	8082                	ret

8000182c <prvTaskExitError>:
	/* A function that implements a task must not exit or attempt to return to
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).
	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
8000182c:	8041a703          	lw	a4,-2044(gp) # 9000022c <uxCriticalNesting>
80001830:	57fd                	li	a5,-1
80001832:	00f70563          	beq	a4,a5,8000183c <prvTaskExitError+0x10>
80001836:	300477f3          	csrrci	a5,mstatus,8
8000183a:	a001                	j	8000183a <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
8000183c:	300477f3          	csrrci	a5,mstatus,8
80001840:	a001                	j	80001840 <prvTaskExitError+0x14>

80001842 <ulSynchTrap>:
unsigned long ulSynchTrap(unsigned long mcause, unsigned long sp, unsigned long arg1)	{
80001842:	1141                	addi	sp,sp,-16
80001844:	c422                	sw	s0,8(sp)
80001846:	c606                	sw	ra,12(sp)
80001848:	c226                	sw	s1,4(sp)
	switch(mcause)	{
8000184a:	47a1                	li	a5,8
unsigned long ulSynchTrap(unsigned long mcause, unsigned long sp, unsigned long arg1)	{
8000184c:	842e                	mv	s0,a1
	switch(mcause)	{
8000184e:	00f50663          	beq	a0,a5,8000185a <ulSynchTrap+0x18>
80001852:	47ad                	li	a5,11
80001854:	84aa                	mv	s1,a0
80001856:	04f51d63          	bne	a0,a5,800018b0 <ulSynchTrap+0x6e>
			if(arg1==IRQ_DISABLE)	{
8000185a:	47d1                	li	a5,20
8000185c:	02f61163          	bne	a2,a5,8000187e <ulSynchTrap+0x3c>
				clear_csr(mstatus,MSTATUS_MPIE);
80001860:	08000793          	li	a5,128
80001864:	3007b7f3          	csrrc	a5,mstatus,a5
	unsigned long epc = read_csr(mepc);
80001868:	341027f3          	csrr	a5,mepc
	write_csr(mepc,epc+4);
8000186c:	0791                	addi	a5,a5,4
8000186e:	34179073          	csrw	mepc,a5
}
80001872:	8522                	mv	a0,s0
80001874:	40b2                	lw	ra,12(sp)
80001876:	4422                	lw	s0,8(sp)
80001878:	4492                	lw	s1,4(sp)
8000187a:	0141                	addi	sp,sp,16
8000187c:	8082                	ret
			} else if(arg1==IRQ_ENABLE)	{
8000187e:	47f9                	li	a5,30
80001880:	00f61763          	bne	a2,a5,8000188e <ulSynchTrap+0x4c>
				set_csr(mstatus,MSTATUS_MPIE);
80001884:	08000793          	li	a5,128
80001888:	3007a7f3          	csrrs	a5,mstatus,a5
8000188c:	bff1                	j	80001868 <ulSynchTrap+0x26>
			} else if(arg1==PORT_YIELD)		{
8000188e:	02800793          	li	a5,40
80001892:	00f61963          	bne	a2,a5,800018a4 <ulSynchTrap+0x62>
				unsigned long epc = read_csr(mepc);
80001896:	341025f3          	csrr	a1,mepc
				vPortYield(sp,epc+4); //never returns
8000189a:	0591                	addi	a1,a1,4
				vPortYield(sp,(*(unsigned long*)(sp+1*sizeof(sp)))); //never returns
8000189c:	8522                	mv	a0,s0
8000189e:	a23fe0ef          	jal	ra,800002c0 <vPortYield>
800018a2:	b7d9                	j	80001868 <ulSynchTrap+0x26>
			} else if(arg1==PORT_YIELD_TO_RA)	{
800018a4:	03200793          	li	a5,50
800018a8:	fcf610e3          	bne	a2,a5,80001868 <ulSynchTrap+0x26>
				vPortYield(sp,(*(unsigned long*)(sp+1*sizeof(sp)))); //never returns
800018ac:	404c                	lw	a1,4(s0)
800018ae:	b7fd                	j	8000189c <ulSynchTrap+0x5a>
			write(1, "trap\n", 5);
800018b0:	900005b7          	lui	a1,0x90000
800018b4:	4615                	li	a2,5
800018b6:	01858593          	addi	a1,a1,24 # 90000018 <_sp+0xffff0018>
800018ba:	4505                	li	a0,1
800018bc:	1b9000ef          	jal	ra,80002274 <write>
			_exit(mcause);
800018c0:	8526                	mv	a0,s1
800018c2:	2359                	jal	80001e48 <_exit>

800018c4 <vPortEnterCritical>:
		portDISABLE_INTERRUPTS();
800018c4:	300477f3          	csrrci	a5,mstatus,8
	uxCriticalNesting++;
800018c8:	80418793          	addi	a5,gp,-2044 # 9000022c <uxCriticalNesting>
800018cc:	4398                	lw	a4,0(a5)
800018ce:	0705                	addi	a4,a4,1
800018d0:	c398                	sw	a4,0(a5)
}
800018d2:	8082                	ret

800018d4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
800018d4:	80418713          	addi	a4,gp,-2044 # 9000022c <uxCriticalNesting>
800018d8:	431c                	lw	a5,0(a4)
800018da:	e781                	bnez	a5,800018e2 <vPortExitCritical+0xe>
800018dc:	300477f3          	csrrci	a5,mstatus,8
800018e0:	a001                	j	800018e0 <vPortExitCritical+0xc>
	uxCriticalNesting--;
800018e2:	17fd                	addi	a5,a5,-1
800018e4:	c31c                	sw	a5,0(a4)
	if( uxCriticalNesting == 0 )
800018e6:	e399                	bnez	a5,800018ec <vPortExitCritical+0x18>
			portENABLE_INTERRUPTS();
800018e8:	300467f3          	csrrsi	a5,mstatus,8
}
800018ec:	8082                	ret

800018ee <vPortClearInterruptMask>:
	write_csr(mie,mask);
800018ee:	30451073          	csrw	mie,a0
}
800018f2:	8082                	ret

800018f4 <xPortSetInterruptMask>:
	ret = read_csr(mie);
800018f4:	30402573          	csrr	a0,mie
	write_csr(mie,0);
800018f8:	30405073          	csrwi	mie,0
}
800018fc:	8082                	ret

800018fe <pxPortInitialiseStack>:
	*pxTopOfStack = (portSTACK_TYPE)pxCode;			/* Start address */
800018fe:	feb52e23          	sw	a1,-4(a0)
	*pxTopOfStack = MSTATUS_INIT;
80001902:	900007b7          	lui	a5,0x90000
80001906:	2287a783          	lw	a5,552(a5) # 90000228 <_sp+0xffff0228>
}
8000190a:	f7850513          	addi	a0,a0,-136
	*pxTopOfStack = (portSTACK_TYPE)pvParameters;	/* Register a0 */
8000190e:	d510                	sw	a2,40(a0)
	*pxTopOfStack = MSTATUS_INIT;
80001910:	08f52023          	sw	a5,128(a0)
	*pxTopOfStack = (portSTACK_TYPE)prvTaskExitError; /* Register ra */
80001914:	800027b7          	lui	a5,0x80002
80001918:	82c78793          	addi	a5,a5,-2004 # 8000182c <_sp+0xefff182c>
8000191c:	c15c                	sw	a5,4(a0)
}
8000191e:	8082                	ret

80001920 <vPortSysTickHandler>:
	for( ;; );
}
/*-----------------------------------------------------------*/

// 系统时钟中断处理
void vPortSysTickHandler(){
80001920:	1141                	addi	sp,sp,-16
80001922:	c606                	sw	ra,12(sp)
	static uint64_t then = 0;

	clear_csr(mie, MIP_MTIP);
80001924:	08000793          	li	a5,128
80001928:	3047b7f3          	csrrc	a5,mie,a5
    volatile uint64_t * mtime       = (uint64_t*) (CLINT_CTRL_ADDR + CLINT_MTIME);
    volatile uint64_t * mtimecmp    = (uint64_t*) (CLINT_CTRL_ADDR + CLINT_MTIMECMP);

	if(then != 0)  {
8000192c:	88018693          	addi	a3,gp,-1920 # 900002a8 <then.2799>
80001930:	4298                	lw	a4,0(a3)
80001932:	42d0                	lw	a2,4(a3)
80001934:	88018793          	addi	a5,gp,-1920 # 900002a8 <then.2799>
80001938:	00c766b3          	or	a3,a4,a2
8000193c:	ca95                	beqz	a3,80001970 <vPortSysTickHandler+0x50>
		//next timer irq is 1 second from previous
		then += (configRTC_CLOCK_HZ / configTICK_RATE_HZ);
8000193e:	08370693          	addi	a3,a4,131
80001942:	00e6b733          	sltu	a4,a3,a4
80001946:	9732                	add	a4,a4,a2
80001948:	c394                	sw	a3,0(a5)
	} else{ //first time setting the timer
		uint64_t now = *mtime;
		then = now + (configRTC_CLOCK_HZ / configTICK_RATE_HZ);
8000194a:	c3d8                	sw	a4,4(a5)
	}
	*mtimecmp = then;
8000194c:	4390                	lw	a2,0(a5)
8000194e:	43d4                	lw	a3,4(a5)
80001950:	020047b7          	lui	a5,0x2004
80001954:	c390                	sw	a2,0(a5)
80001956:	c3d4                	sw	a3,4(a5)


	// 任务切换
	/* Increment the RTOS tick. */
	if( xTaskIncrementTick() != pdFALSE )
80001958:	b9eff0ef          	jal	ra,80000cf6 <xTaskIncrementTick>
8000195c:	c119                	beqz	a0,80001962 <vPortSysTickHandler+0x42>
	{
		vTaskSwitchContext();
8000195e:	e92ff0ef          	jal	ra,80000ff0 <vTaskSwitchContext>
	}
	set_csr(mie, MIP_MTIP);
80001962:	08000793          	li	a5,128
80001966:	3047a7f3          	csrrs	a5,mie,a5
}
8000196a:	40b2                	lw	ra,12(sp)
8000196c:	0141                	addi	sp,sp,16
8000196e:	8082                	ret
		uint64_t now = *mtime;
80001970:	0200c737          	lui	a4,0x200c
80001974:	ff872603          	lw	a2,-8(a4) # 200bff8 <__stack_size+0x200b7f8>
80001978:	ffc72683          	lw	a3,-4(a4)
		then = now + (configRTC_CLOCK_HZ / configTICK_RATE_HZ);
8000197c:	08360593          	addi	a1,a2,131
80001980:	00c5b733          	sltu	a4,a1,a2
80001984:	9736                	add	a4,a4,a3
80001986:	c38c                	sw	a1,0(a5)
80001988:	b7c9                	j	8000194a <vPortSysTickHandler+0x2a>

8000198a <vPortSetupTimer>:

    // Set the machine timer
	// 设置机器时间
    volatile uint64_t * mtime       = (uint64_t*) (CLINT_CTRL_ADDR + CLINT_MTIME);
    volatile uint64_t * mtimecmp    = (uint64_t*) (CLINT_CTRL_ADDR + CLINT_MTIMECMP);
    uint64_t now = *mtime;
8000198a:	0200c7b7          	lui	a5,0x200c
8000198e:	ff87a803          	lw	a6,-8(a5) # 200bff8 <__stack_size+0x200b7f8>
80001992:	ffc7a883          	lw	a7,-4(a5)
    uint64_t then = now + (configRTC_CLOCK_HZ / configTICK_RATE_HZ);
    *mtimecmp = then;
80001996:	020046b7          	lui	a3,0x2004
    uint64_t then = now + (configRTC_CLOCK_HZ / configTICK_RATE_HZ);
8000199a:	08380593          	addi	a1,a6,131
8000199e:	0105b633          	sltu	a2,a1,a6
800019a2:	011607b3          	add	a5,a2,a7
    *mtimecmp = then;
800019a6:	c28c                	sw	a1,0(a3)
800019a8:	c2dc                	sw	a5,4(a3)

    // Enable the Machine-Timer bit in MIE
	// 打开机器时钟，时钟中断
    set_csr(mie, MIP_MTIP);
800019aa:	08000793          	li	a5,128
800019ae:	3047a7f3          	csrrs	a5,mie,a5
}
800019b2:	8082                	ret

800019b4 <vPortSetup>:
/*-----------------------------------------------------------*/


void vPortSetup()	{
800019b4:	1141                	addi	sp,sp,-16
800019b6:	c606                	sw	ra,12(sp)

	vPortSetupTimer();
800019b8:	3fc9                	jal	8000198a <vPortSetupTimer>
	uxCriticalNesting = 0;
}
800019ba:	40b2                	lw	ra,12(sp)
	uxCriticalNesting = 0;
800019bc:	8001a223          	sw	zero,-2044(gp) # 9000022c <uxCriticalNesting>
}
800019c0:	0141                	addi	sp,sp,16
800019c2:	8082                	ret

800019c4 <no_interrupt_handler>:
void no_interrupt_handler (void) {};
800019c4:	8082                	ret

800019c6 <vExampleTimerCallback>:
    ulCountOfTimerCallbackExecutions++;
800019c6:	89418793          	addi	a5,gp,-1900 # 900002bc <ulCountOfTimerCallbackExecutions>
800019ca:	4398                	lw	a4,0(a5)
    GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << BLUE_LED_GPIO_OFFSET) ;
800019cc:	002006b7          	lui	a3,0x200
    write(1,"RTOS Timer Callback\n", 20);
800019d0:	900005b7          	lui	a1,0x90000
    ulCountOfTimerCallbackExecutions++;
800019d4:	0705                	addi	a4,a4,1
800019d6:	c398                	sw	a4,0(a5)
    GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << BLUE_LED_GPIO_OFFSET) ;
800019d8:	10012737          	lui	a4,0x10012
800019dc:	475c                	lw	a5,12(a4)
    write(1,"RTOS Timer Callback\n", 20);
800019de:	4651                	li	a2,20
800019e0:	0a058593          	addi	a1,a1,160 # 900000a0 <_sp+0xffff00a0>
    GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << BLUE_LED_GPIO_OFFSET) ;
800019e4:	8fb5                	xor	a5,a5,a3
800019e6:	c75c                	sw	a5,12(a4)
    write(1,"RTOS Timer Callback\n", 20);
800019e8:	4505                	li	a0,1
800019ea:	08b0006f          	j	80002274 <write>

800019ee <prvEventSemaphoreTask>:
{
800019ee:	1141                	addi	sp,sp,-16
800019f0:	c422                	sw	s0,8(sp)
800019f2:	c226                	sw	s1,4(sp)
800019f4:	c04a                	sw	s2,0(sp)
800019f6:	c606                	sw	ra,12(sp)
        write(1, "Semaphore taken\n", 16);
800019f8:	90000437          	lui	s0,0x90000
        xSemaphoreTake( xEventSemaphore, portMAX_DELAY );
800019fc:	8981a503          	lw	a0,-1896(gp) # 900002c0 <xEventSemaphore>
80001a00:	4681                	li	a3,0
80001a02:	567d                	li	a2,-1
80001a04:	4581                	li	a1,0
80001a06:	e0bfe0ef          	jal	ra,80000810 <xQueueGenericReceive>
        ulCountOfReceivedSemaphores++;
80001a0a:	89018713          	addi	a4,gp,-1904 # 900002b8 <ulCountOfReceivedSemaphores>
80001a0e:	431c                	lw	a5,0(a4)
        write(1, "Semaphore taken\n", 16);
80001a10:	4641                	li	a2,16
80001a12:	03840593          	addi	a1,s0,56 # 90000038 <_sp+0xffff0038>
        ulCountOfReceivedSemaphores++;
80001a16:	0785                	addi	a5,a5,1
        write(1, "Semaphore taken\n", 16);
80001a18:	4505                	li	a0,1
        ulCountOfReceivedSemaphores++;
80001a1a:	c31c                	sw	a5,0(a4)
        write(1, "Semaphore taken\n", 16);
80001a1c:	059000ef          	jal	ra,80002274 <write>
80001a20:	bff1                	j	800019fc <prvEventSemaphoreTask+0xe>

80001a22 <prvQueueSendTask>:
{
80001a22:	1101                	addi	sp,sp,-32
const uint32_t ulValueToSend = 100UL;
80001a24:	06400793          	li	a5,100
{
80001a28:	cc22                	sw	s0,24(sp)
80001a2a:	ca26                	sw	s1,20(sp)
80001a2c:	ce06                	sw	ra,28(sp)
const uint32_t ulValueToSend = 100UL;
80001a2e:	c63e                	sw	a5,12(sp)
    xNextWakeTime = xTaskGetTickCount();
80001a30:	aacff0ef          	jal	ra,80000cdc <xTaskGetTickCount>
80001a34:	c42a                	sw	a0,8(sp)
        write(1, "Sending to queue\n", 17);
80001a36:	900004b7          	lui	s1,0x90000
         vTaskDelayUntil( &xNextWakeTime, mainQUEUE_SEND_PERIOD_MS );
80001a3a:	0028                	addi	a0,sp,8
80001a3c:	03200593          	li	a1,50
80001a40:	cd4ff0ef          	jal	ra,80000f14 <vTaskDelayUntil>
        write(1, "Sending to queue\n", 17);
80001a44:	05848593          	addi	a1,s1,88 # 90000058 <_sp+0xffff0058>
80001a48:	4645                	li	a2,17
80001a4a:	4505                	li	a0,1
80001a4c:	029000ef          	jal	ra,80002274 <write>
        xQueueSend( xQueue, &ulValueToSend, 0 );
80001a50:	89c1a503          	lw	a0,-1892(gp) # 900002c4 <xQueue>
80001a54:	4681                	li	a3,0
80001a56:	4601                	li	a2,0
80001a58:	006c                	addi	a1,sp,12
80001a5a:	b37fe0ef          	jal	ra,80000590 <xQueueGenericSend>
80001a5e:	bff1                	j	80001a3a <prvQueueSendTask+0x18>

80001a60 <prvQueueReceiveTask>:
{
80001a60:	7179                	addi	sp,sp,-48
80001a62:	d422                	sw	s0,40(sp)
80001a64:	d226                	sw	s1,36(sp)
80001a66:	d04a                	sw	s2,32(sp)
80001a68:	ce4e                	sw	s3,28(sp)
80001a6a:	cc52                	sw	s4,24(sp)
80001a6c:	d606                	sw	ra,44(sp)
        write(1,"Recieved: ", 10);
80001a6e:	90000937          	lui	s2,0x90000
        write(1,"\n",1);
80001a72:	900009b7          	lui	s3,0x90000
        if( ulReceivedValue == 100UL )
80001a76:	06400a13          	li	s4,100
        xQueueReceive( xQueue, &ulReceivedValue, portMAX_DELAY );
80001a7a:	89c1a503          	lw	a0,-1892(gp) # 900002c4 <xQueue>
80001a7e:	4681                	li	a3,0
80001a80:	567d                	li	a2,-1
80001a82:	858a                	mv	a1,sp
80001a84:	d8dfe0ef          	jal	ra,80000810 <xQueueGenericReceive>
        itoa(ulReceivedValue,stringValue, 10);
80001a88:	4502                	lw	a0,0(sp)
80001a8a:	4629                	li	a2,10
80001a8c:	004c                	addi	a1,sp,4
80001a8e:	2d35                	jal	800020ca <itoa>
        write(1,"Recieved: ", 10);
80001a90:	4629                	li	a2,10
80001a92:	04c90593          	addi	a1,s2,76 # 9000004c <_sp+0xffff004c>
80001a96:	4505                	li	a0,1
80001a98:	7dc000ef          	jal	ra,80002274 <write>
        write(1,stringValue, 3);
80001a9c:	460d                	li	a2,3
80001a9e:	004c                	addi	a1,sp,4
80001aa0:	4505                	li	a0,1
80001aa2:	7d2000ef          	jal	ra,80002274 <write>
        write(1,"\n",1);
80001aa6:	4605                	li	a2,1
80001aa8:	09c98593          	addi	a1,s3,156 # 9000009c <_sp+0xffff009c>
80001aac:	4505                	li	a0,1
80001aae:	7c6000ef          	jal	ra,80002274 <write>
        if( ulReceivedValue == 100UL )
80001ab2:	4782                	lw	a5,0(sp)
80001ab4:	fd4793e3          	bne	a5,s4,80001a7a <prvQueueReceiveTask+0x1a>
            ulCountOfItemsReceivedOnQueue++;
80001ab8:	88c18713          	addi	a4,gp,-1908 # 900002b4 <ulCountOfItemsReceivedOnQueue>
80001abc:	431c                	lw	a5,0(a4)
80001abe:	0785                	addi	a5,a5,1
80001ac0:	c31c                	sw	a5,0(a4)
80001ac2:	bf65                	j	80001a7a <prvQueueReceiveTask+0x1a>

80001ac4 <wake_ISR>:
void wake_ISR( )    {
80001ac4:	1101                	addi	sp,sp,-32
    const uint32_t ulValueToSend = 555UL;
80001ac6:	22b00793          	li	a5,555
void wake_ISR( )    {
80001aca:	cc22                	sw	s0,24(sp)
    const uint32_t ulValueToSend = 555UL;
80001acc:	c63e                	sw	a5,12(sp)
    GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << RED_LED_GPIO_OFFSET) ;
80001ace:	10012437          	lui	s0,0x10012
80001ad2:	445c                	lw	a5,12(s0)
80001ad4:	00400737          	lui	a4,0x400
void wake_ISR( )    {
80001ad8:	ce06                	sw	ra,28(sp)
    GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << RED_LED_GPIO_OFFSET) ;
80001ada:	8fb9                	xor	a5,a5,a4
80001adc:	c45c                	sw	a5,12(s0)
    xQueueSendFromISR( xQueue, &ulValueToSend, 0 );
80001ade:	89c1a503          	lw	a0,-1892(gp) # 900002c4 <xQueue>
80001ae2:	006c                	addi	a1,sp,12
80001ae4:	4681                	li	a3,0
80001ae6:	4601                	li	a2,0
80001ae8:	be5fe0ef          	jal	ra,800006cc <xQueueGenericSendFromISR>
    write(1,"---------->\n",13);
80001aec:	900005b7          	lui	a1,0x90000
80001af0:	4635                	li	a2,13
80001af2:	0b858593          	addi	a1,a1,184 # 900000b8 <_sp+0xffff00b8>
80001af6:	4505                	li	a0,1
80001af8:	77c000ef          	jal	ra,80002274 <write>
    GPIO_REG(GPIO_FALL_IP) |= (1<<BUTTON_1_GPIO_OFFSET);
80001afc:	505c                	lw	a5,36(s0)
80001afe:	40000737          	lui	a4,0x40000
}
80001b02:	40f2                	lw	ra,28(sp)
    GPIO_REG(GPIO_FALL_IP) |= (1<<BUTTON_1_GPIO_OFFSET);
80001b04:	8fd9                	or	a5,a5,a4
80001b06:	d05c                	sw	a5,36(s0)
}
80001b08:	4462                	lw	s0,24(sp)
80001b0a:	6105                	addi	sp,sp,32
80001b0c:	8082                	ret

80001b0e <vApplicationTickHook>:
{
80001b0e:	1101                	addi	sp,sp,-32
80001b10:	cc22                	sw	s0,24(sp)
    ulCount++;
80001b12:	88818413          	addi	s0,gp,-1912 # 900002b0 <ulCount.3694>
80001b16:	401c                	lw	a5,0(s0)
{
80001b18:	ce06                	sw	ra,28(sp)
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
80001b1a:	c602                	sw	zero,12(sp)
    ulCount++;
80001b1c:	0785                	addi	a5,a5,1
80001b1e:	c01c                	sw	a5,0(s0)
    if( ulCount >= 500UL )
80001b20:	1f300713          	li	a4,499
80001b24:	02f77863          	bleu	a5,a4,80001b54 <vApplicationTickHook+0x46>
        xSemaphoreGiveFromISR( xEventSemaphore, &xHigherPriorityTaskWoken );
80001b28:	8981a503          	lw	a0,-1896(gp) # 900002c0 <xEventSemaphore>
80001b2c:	006c                	addi	a1,sp,12
80001b2e:	c51fe0ef          	jal	ra,8000077e <xQueueGiveFromISR>
    	GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << GREEN_LED_GPIO_OFFSET) ;
80001b32:	10012737          	lui	a4,0x10012
        ulCount = 0UL;
80001b36:	00042023          	sw	zero,0(s0) # 10012000 <__stack_size+0x10011800>
    	GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << GREEN_LED_GPIO_OFFSET) ;
80001b3a:	475c                	lw	a5,12(a4)
80001b3c:	000806b7          	lui	a3,0x80
    	write(1, "Giving Semaphore\n", 17);
80001b40:	900005b7          	lui	a1,0x90000
    	GPIO_REG(GPIO_OUTPUT_VAL)  ^=   (0x1 << GREEN_LED_GPIO_OFFSET) ;
80001b44:	8fb5                	xor	a5,a5,a3
80001b46:	c75c                	sw	a5,12(a4)
    	write(1, "Giving Semaphore\n", 17);
80001b48:	4645                	li	a2,17
80001b4a:	08c58593          	addi	a1,a1,140 # 9000008c <_sp+0xffff008c>
80001b4e:	4505                	li	a0,1
80001b50:	724000ef          	jal	ra,80002274 <write>
}
80001b54:	40f2                	lw	ra,28(sp)
80001b56:	4462                	lw	s0,24(sp)
80001b58:	6105                	addi	sp,sp,32
80001b5a:	8082                	ret

80001b5c <vApplicationMallocFailedHook>:
	write(1,"malloc failed\n", 14);
80001b5c:	900005b7          	lui	a1,0x90000
{
80001b60:	1141                	addi	sp,sp,-16
	write(1,"malloc failed\n", 14);
80001b62:	4639                	li	a2,14
80001b64:	06c58593          	addi	a1,a1,108 # 9000006c <_sp+0xffff006c>
80001b68:	4505                	li	a0,1
{
80001b6a:	c606                	sw	ra,12(sp)
	write(1,"malloc failed\n", 14);
80001b6c:	2721                	jal	80002274 <write>
80001b6e:	a001                	j	80001b6e <vApplicationMallocFailedHook+0x12>

80001b70 <vApplicationStackOverflowHook>:
    write(1, "Stack Overflow\n", 15);
80001b70:	900005b7          	lui	a1,0x90000
{
80001b74:	1141                	addi	sp,sp,-16
    write(1, "Stack Overflow\n", 15);
80001b76:	463d                	li	a2,15
80001b78:	07c58593          	addi	a1,a1,124 # 9000007c <_sp+0xffff007c>
80001b7c:	4505                	li	a0,1
{
80001b7e:	c606                	sw	ra,12(sp)
    write(1, "Stack Overflow\n", 15);
80001b80:	2dd5                	jal	80002274 <write>
80001b82:	a001                	j	80001b82 <vApplicationStackOverflowHook+0x12>

80001b84 <vApplicationIdleHook>:
{
80001b84:	1101                	addi	sp,sp,-32
80001b86:	ce06                	sw	ra,28(sp)
    xFreeStackSpace = xPortGetFreeHeapSize();
80001b88:	c9fff0ef          	jal	ra,80001826 <xPortGetFreeHeapSize>
}
80001b8c:	40f2                	lw	ra,28(sp)
    xFreeStackSpace = xPortGetFreeHeapSize();
80001b8e:	c62a                	sw	a0,12(sp)
    if( xFreeStackSpace > 100 )
80001b90:	47b2                	lw	a5,12(sp)
}
80001b92:	6105                	addi	sp,sp,32
80001b94:	8082                	ret

80001b96 <handle_interrupt>:
  if(((mcause & MCAUSE_CAUSE) == IRQ_M_EXT))  {
80001b96:	800007b7          	lui	a5,0x80000
80001b9a:	fff7c793          	not	a5,a5
80001b9e:	8d7d                	and	a0,a0,a5
80001ba0:	47ad                	li	a5,11
80001ba2:	02f51b63          	bne	a0,a5,80001bd8 <handle_interrupt+0x42>
void handle_interrupt(unsigned long mcause){
80001ba6:	1101                	addi	sp,sp,-32
80001ba8:	cc22                	sw	s0,24(sp)
    plic_source int_num  = PLIC_claim_interrupt(&g_plic);
80001baa:	90003437          	lui	s0,0x90003
80001bae:	0bc40513          	addi	a0,s0,188 # 900030bc <_sp+0xffff30bc>
void handle_interrupt(unsigned long mcause){
80001bb2:	ce06                	sw	ra,28(sp)
    plic_source int_num  = PLIC_claim_interrupt(&g_plic);
80001bb4:	226d                	jal	80001d5e <PLIC_claim_interrupt>
    g_ext_interrupt_handlers[int_num]();
80001bb6:	900037b7          	lui	a5,0x90003
80001bba:	00251713          	slli	a4,a0,0x2
80001bbe:	fec78793          	addi	a5,a5,-20 # 90002fec <_sp+0xffff2fec>
80001bc2:	97ba                	add	a5,a5,a4
80001bc4:	439c                	lw	a5,0(a5)
80001bc6:	c62a                	sw	a0,12(sp)
80001bc8:	9782                	jalr	a5
    PLIC_complete_interrupt(&g_plic, int_num);
80001bca:	0bc40513          	addi	a0,s0,188
}
80001bce:	4462                	lw	s0,24(sp)
    PLIC_complete_interrupt(&g_plic, int_num);
80001bd0:	45b2                	lw	a1,12(sp)
}
80001bd2:	40f2                	lw	ra,28(sp)
80001bd4:	6105                	addi	sp,sp,32
    PLIC_complete_interrupt(&g_plic, int_num);
80001bd6:	aa79                	j	80001d74 <PLIC_complete_interrupt>
80001bd8:	8082                	ret

80001bda <enable_interrupt>:
    g_ext_interrupt_handlers[int_num] = handler;
80001bda:	900037b7          	lui	a5,0x90003
void enable_interrupt(uint32_t int_num, uint32_t int_priority, function_ptr_t handler) {
80001bde:	1141                	addi	sp,sp,-16
    g_ext_interrupt_handlers[int_num] = handler;
80001be0:	00251713          	slli	a4,a0,0x2
80001be4:	fec78793          	addi	a5,a5,-20 # 90002fec <_sp+0xffff2fec>
void enable_interrupt(uint32_t int_num, uint32_t int_priority, function_ptr_t handler) {
80001be8:	c422                	sw	s0,8(sp)
80001bea:	c226                	sw	s1,4(sp)
80001bec:	c606                	sw	ra,12(sp)
    PLIC_set_priority(&g_plic, int_num, int_priority);
80001bee:	900034b7          	lui	s1,0x90003
    g_ext_interrupt_handlers[int_num] = handler;
80001bf2:	97ba                	add	a5,a5,a4
void enable_interrupt(uint32_t int_num, uint32_t int_priority, function_ptr_t handler) {
80001bf4:	842a                	mv	s0,a0
    g_ext_interrupt_handlers[int_num] = handler;
80001bf6:	c390                	sw	a2,0(a5)
    PLIC_set_priority(&g_plic, int_num, int_priority);
80001bf8:	862e                	mv	a2,a1
80001bfa:	85aa                	mv	a1,a0
80001bfc:	0bc48513          	addi	a0,s1,188 # 900030bc <_sp+0xffff30bc>
80001c00:	2a81                	jal	80001d50 <PLIC_set_priority>
    PLIC_enable_interrupt (&g_plic, int_num);
80001c02:	85a2                	mv	a1,s0
}
80001c04:	4422                	lw	s0,8(sp)
80001c06:	40b2                	lw	ra,12(sp)
    PLIC_enable_interrupt (&g_plic, int_num);
80001c08:	0bc48513          	addi	a0,s1,188
}
80001c0c:	4492                	lw	s1,4(sp)
80001c0e:	0141                	addi	sp,sp,16
    PLIC_enable_interrupt (&g_plic, int_num);
80001c10:	aa11                	j	80001d24 <PLIC_enable_interrupt>

80001c12 <interrupts_init>:
void interrupts_init(  ) {
80001c12:	1141                	addi	sp,sp,-16
    clear_csr(mie, MIP_MEIP);
80001c14:	6785                	lui	a5,0x1
void interrupts_init(  ) {
80001c16:	c606                	sw	ra,12(sp)
    clear_csr(mie, MIP_MEIP);
80001c18:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
80001c1c:	3047b7f3          	csrrc	a5,mie,a5
    clear_csr(mie, MIP_MTIP);
80001c20:	08000793          	li	a5,128
80001c24:	3047b7f3          	csrrc	a5,mie,a5
  PLIC_init(&g_plic,
80001c28:	90003537          	lui	a0,0x90003
80001c2c:	469d                	li	a3,7
80001c2e:	03400613          	li	a2,52
80001c32:	0c0005b7          	lui	a1,0xc000
80001c36:	0bc50513          	addi	a0,a0,188 # 900030bc <_sp+0xffff30bc>
80001c3a:	2869                	jal	80001cd4 <PLIC_init>
80001c3c:	900037b7          	lui	a5,0x90003
    g_ext_interrupt_handlers[ii] = no_interrupt_handler;
80001c40:	800026b7          	lui	a3,0x80002
80001c44:	fec78793          	addi	a5,a5,-20 # 90002fec <_sp+0xffff2fec>
  for (int ii = 0; ii < PLIC_NUM_INTERRUPTS; ii ++){
80001c48:	4701                	li	a4,0
    g_ext_interrupt_handlers[ii] = no_interrupt_handler;
80001c4a:	9c468693          	addi	a3,a3,-1596 # 800019c4 <_sp+0xefff19c4>
  for (int ii = 0; ii < PLIC_NUM_INTERRUPTS; ii ++){
80001c4e:	03400613          	li	a2,52
    g_ext_interrupt_handlers[ii] = no_interrupt_handler;
80001c52:	c394                	sw	a3,0(a5)
  for (int ii = 0; ii < PLIC_NUM_INTERRUPTS; ii ++){
80001c54:	0705                	addi	a4,a4,1
80001c56:	0791                	addi	a5,a5,4
80001c58:	fec71de3          	bne	a4,a2,80001c52 <interrupts_init+0x40>
    set_csr(mie, MIP_MEIP);
80001c5c:	6785                	lui	a5,0x1
80001c5e:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
80001c62:	3047a7f3          	csrrs	a5,mie,a5
}
80001c66:	40b2                	lw	ra,12(sp)
80001c68:	0141                	addi	sp,sp,16
80001c6a:	8082                	ret

80001c6c <led_init>:
    GPIO_REG(GPIO_INPUT_EN)    &= ~((0x1<< RED_LED_GPIO_OFFSET) | (0x1<< GREEN_LED_GPIO_OFFSET) | (0x1 << BLUE_LED_GPIO_OFFSET)) ;
80001c6c:	100127b7          	lui	a5,0x10012
80001c70:	43d4                	lw	a3,4(a5)
80001c72:	ff980737          	lui	a4,0xff980
80001c76:	177d                	addi	a4,a4,-1
80001c78:	8ef9                	and	a3,a3,a4
80001c7a:	c3d4                	sw	a3,4(a5)
    GPIO_REG(GPIO_OUTPUT_EN)   |=  ((0x1<< RED_LED_GPIO_OFFSET)| (0x1<< GREEN_LED_GPIO_OFFSET) | (0x1 << BLUE_LED_GPIO_OFFSET)) ;
80001c7c:	4794                	lw	a3,8(a5)
80001c7e:	00680637          	lui	a2,0x680
80001c82:	8ed1                	or	a3,a3,a2
80001c84:	c794                	sw	a3,8(a5)
    GPIO_REG(GPIO_OUTPUT_VAL)  &= ~((0x1<< RED_LED_GPIO_OFFSET) | (0x1<< GREEN_LED_GPIO_OFFSET) | (0x1 << BLUE_LED_GPIO_OFFSET)) ;
80001c86:	47d4                	lw	a3,12(a5)
80001c88:	8f75                	and	a4,a4,a3
80001c8a:	c7d8                	sw	a4,12(a5)
}
80001c8c:	8082                	ret

80001c8e <wake_irq_init>:
    GPIO_REG(GPIO_IOF_EN )    &=  ~(1 << BUTTON_1_GPIO_OFFSET);
80001c8e:	100127b7          	lui	a5,0x10012
80001c92:	5f98                	lw	a4,56(a5)
80001c94:	c00006b7          	lui	a3,0xc0000
80001c98:	16fd                	addi	a3,a3,-1
80001c9a:	8f75                	and	a4,a4,a3
80001c9c:	df98                	sw	a4,56(a5)
    GPIO_REG(GPIO_INPUT_EN)   |= (1<<BUTTON_1_GPIO_OFFSET);
80001c9e:	43d8                	lw	a4,4(a5)
80001ca0:	400006b7          	lui	a3,0x40000
    enable_interrupt(PLIC_INT_GPIO_BASE+BUTTON_1_GPIO_OFFSET, 2, &wake_ISR);
80001ca4:	80002637          	lui	a2,0x80002
    GPIO_REG(GPIO_INPUT_EN)   |= (1<<BUTTON_1_GPIO_OFFSET);
80001ca8:	8f55                	or	a4,a4,a3
80001caa:	c3d8                	sw	a4,4(a5)
    GPIO_REG(GPIO_PULLUP_EN)  |= (1<<BUTTON_1_GPIO_OFFSET);
80001cac:	4b98                	lw	a4,16(a5)
    enable_interrupt(PLIC_INT_GPIO_BASE+BUTTON_1_GPIO_OFFSET, 2, &wake_ISR);
80001cae:	ac460613          	addi	a2,a2,-1340 # 80001ac4 <_sp+0xefff1ac4>
80001cb2:	4589                	li	a1,2
    GPIO_REG(GPIO_PULLUP_EN)  |= (1<<BUTTON_1_GPIO_OFFSET);
80001cb4:	8f55                	or	a4,a4,a3
80001cb6:	cb98                	sw	a4,16(a5)
    GPIO_REG(GPIO_FALL_IE)    |= (1<<BUTTON_1_GPIO_OFFSET);
80001cb8:	5398                	lw	a4,32(a5)
    enable_interrupt(PLIC_INT_GPIO_BASE+BUTTON_1_GPIO_OFFSET, 2, &wake_ISR);
80001cba:	02600513          	li	a0,38
    GPIO_REG(GPIO_FALL_IE)    |= (1<<BUTTON_1_GPIO_OFFSET);
80001cbe:	8f55                	or	a4,a4,a3
80001cc0:	d398                	sw	a4,32(a5)
    enable_interrupt(PLIC_INT_GPIO_BASE+BUTTON_1_GPIO_OFFSET, 2, &wake_ISR);
80001cc2:	bf21                	j	80001bda <enable_interrupt>

80001cc4 <volatile_memzero>:
// parameter values.

void volatile_memzero(uint8_t * base, unsigned int size)
{
  volatile uint8_t * ptr;
  for (ptr = base; ptr < (base + size); ptr++){
80001cc4:	95aa                	add	a1,a1,a0
80001cc6:	00b56363          	bltu	a0,a1,80001ccc <volatile_memzero+0x8>
    *ptr = 0;
  }
}
80001cca:	8082                	ret
    *ptr = 0;
80001ccc:	00050023          	sb	zero,0(a0)
  for (ptr = base; ptr < (base + size); ptr++){
80001cd0:	0505                	addi	a0,a0,1
80001cd2:	bfd5                	j	80001cc6 <volatile_memzero+0x2>

80001cd4 <PLIC_init>:
                plic_instance_t * this_plic,
                uintptr_t         base_addr,
                uint32_t num_sources,
                uint32_t num_priorities
                )
{
80001cd4:	1101                	addi	sp,sp,-32
80001cd6:	ca26                	sw	s1,20(sp)
80001cd8:	ce06                	sw	ra,28(sp)
80001cda:	cc22                	sw	s0,24(sp)
80001cdc:	84aa                	mv	s1,a0
  
  this_plic->base_addr = base_addr;
80001cde:	c10c                	sw	a1,0(a0)
  this_plic->num_sources = num_sources;
80001ce0:	c150                	sw	a2,4(a0)
  this_plic->num_priorities = num_priorities;
80001ce2:	c514                	sw	a3,8(a0)
  
  // Disable all interrupts (don't assume that these registers are reset).
  unsigned long hart_id = read_csr(mhartid);
80001ce4:	f1402473          	csrr	s0,mhartid
  volatile_memzero((uint8_t*) (this_plic->base_addr +
                               PLIC_ENABLE_OFFSET +
80001ce8:	6509                	lui	a0,0x2
                               (hart_id << PLIC_ENABLE_SHIFT_PER_TARGET)),
                   (num_sources + 8) / 8);
80001cea:	00860713          	addi	a4,a2,8
                               (hart_id << PLIC_ENABLE_SHIFT_PER_TARGET)),
80001cee:	00741793          	slli	a5,s0,0x7
                               PLIC_ENABLE_OFFSET +
80001cf2:	952e                	add	a0,a0,a1
  volatile_memzero((uint8_t*) (this_plic->base_addr +
80001cf4:	953e                	add	a0,a0,a5
80001cf6:	00375593          	srli	a1,a4,0x3
                   (num_sources + 8) / 8);
80001cfa:	c632                	sw	a2,12(sp)
  volatile_memzero((uint8_t*) (this_plic->base_addr +
80001cfc:	37e1                	jal	80001cc4 <volatile_memzero>
  
  // Set all priorities to 0 (equal priority -- don't assume that these are reset).
  volatile_memzero ((uint8_t *)(this_plic->base_addr +
                                PLIC_PRIORITY_OFFSET),
                    (num_sources + 1) << PLIC_PRIORITY_SHIFT_PER_SOURCE);
80001cfe:	4632                	lw	a2,12(sp)
  volatile_memzero ((uint8_t *)(this_plic->base_addr +
80001d00:	4088                	lw	a0,0(s1)

  // Set the threshold to 0.
  volatile plic_threshold* threshold = (plic_threshold*)
    (this_plic->base_addr +
     PLIC_THRESHOLD_OFFSET +
     (hart_id << PLIC_THRESHOLD_SHIFT_PER_TARGET));
80001d02:	0432                	slli	s0,s0,0xc
                    (num_sources + 1) << PLIC_PRIORITY_SHIFT_PER_SOURCE);
80001d04:	0605                	addi	a2,a2,1
  volatile_memzero ((uint8_t *)(this_plic->base_addr +
80001d06:	00261593          	slli	a1,a2,0x2
80001d0a:	3f6d                	jal	80001cc4 <volatile_memzero>
     PLIC_THRESHOLD_OFFSET +
80001d0c:	4098                	lw	a4,0(s1)
80001d0e:	002007b7          	lui	a5,0x200

  *threshold = 0;
  
}
80001d12:	40f2                	lw	ra,28(sp)
     PLIC_THRESHOLD_OFFSET +
80001d14:	97ba                	add	a5,a5,a4
80001d16:	943e                	add	s0,s0,a5
  *threshold = 0;
80001d18:	00042023          	sw	zero,0(s0)
}
80001d1c:	4462                	lw	s0,24(sp)
80001d1e:	44d2                	lw	s1,20(sp)
80001d20:	6105                	addi	sp,sp,32
80001d22:	8082                	ret

80001d24 <PLIC_enable_interrupt>:
}
  

void PLIC_enable_interrupt (plic_instance_t * this_plic, plic_source source){

  unsigned long hart_id = read_csr(mhartid);
80001d24:	f14027f3          	csrr	a5,mhartid
  volatile uint8_t * current_ptr = (volatile uint8_t *)(this_plic->base_addr +
                                                        PLIC_ENABLE_OFFSET +
                                                        (hart_id << PLIC_ENABLE_SHIFT_PER_TARGET) +
80001d28:	6689                	lui	a3,0x2
                                                        (source >> 3));
80001d2a:	0035d713          	srli	a4,a1,0x3
                                                        (hart_id << PLIC_ENABLE_SHIFT_PER_TARGET) +
80001d2e:	9736                	add	a4,a4,a3
80001d30:	4114                	lw	a3,0(a0)
80001d32:	079e                	slli	a5,a5,0x7
  uint8_t current = *current_ptr;
  current = current | ( 1 << (source & 0x7));
80001d34:	899d                	andi	a1,a1,7
                                                        (hart_id << PLIC_ENABLE_SHIFT_PER_TARGET) +
80001d36:	9736                	add	a4,a4,a3
80001d38:	97ba                	add	a5,a5,a4
  uint8_t current = *current_ptr;
80001d3a:	0007c683          	lbu	a3,0(a5) # 200000 <__stack_size+0x1ff800>
  current = current | ( 1 << (source & 0x7));
80001d3e:	4705                	li	a4,1
80001d40:	00b71733          	sll	a4,a4,a1
80001d44:	8f55                	or	a4,a4,a3
80001d46:	0ff77713          	andi	a4,a4,255
  *current_ptr = current;
80001d4a:	00e78023          	sb	a4,0(a5)

}
80001d4e:	8082                	ret

80001d50 <PLIC_set_priority>:
  
}

void PLIC_set_priority (plic_instance_t * this_plic, plic_source source, plic_priority priority){

  if (this_plic->num_priorities > 0) {
80001d50:	451c                	lw	a5,8(a0)
80001d52:	c789                	beqz	a5,80001d5c <PLIC_set_priority+0xc>
    volatile plic_priority * priority_ptr = (volatile plic_priority *)
      (this_plic->base_addr +
       PLIC_PRIORITY_OFFSET +
80001d54:	411c                	lw	a5,0(a0)
       (source << PLIC_PRIORITY_SHIFT_PER_SOURCE));
80001d56:	058a                	slli	a1,a1,0x2
       PLIC_PRIORITY_OFFSET +
80001d58:	95be                	add	a1,a1,a5
    *priority_ptr = priority;
80001d5a:	c190                	sw	a2,0(a1)
  }
}
80001d5c:	8082                	ret

80001d5e <PLIC_claim_interrupt>:

plic_source PLIC_claim_interrupt(plic_instance_t * this_plic){
  
  unsigned long hart_id = read_csr(mhartid);
80001d5e:	f14027f3          	csrr	a5,mhartid

  volatile plic_source * claim_addr = (volatile plic_source * )
    (this_plic->base_addr +
     PLIC_CLAIM_OFFSET +
80001d62:	4118                	lw	a4,0(a0)
80001d64:	002006b7          	lui	a3,0x200
80001d68:	0691                	addi	a3,a3,4
80001d6a:	9736                	add	a4,a4,a3
     (hart_id << PLIC_CLAIM_SHIFT_PER_TARGET));
80001d6c:	07b2                	slli	a5,a5,0xc
     PLIC_CLAIM_OFFSET +
80001d6e:	97ba                	add	a5,a5,a4

  return  *claim_addr;
80001d70:	4388                	lw	a0,0(a5)
  
}
80001d72:	8082                	ret

80001d74 <PLIC_complete_interrupt>:

void PLIC_complete_interrupt(plic_instance_t * this_plic, plic_source source){
  
  unsigned long hart_id = read_csr(mhartid);
80001d74:	f14027f3          	csrr	a5,mhartid
  volatile plic_source * claim_addr = (volatile plic_source *) (this_plic->base_addr +
                                                                PLIC_CLAIM_OFFSET +
80001d78:	4118                	lw	a4,0(a0)
80001d7a:	002006b7          	lui	a3,0x200
80001d7e:	0691                	addi	a3,a3,4
80001d80:	9736                	add	a4,a4,a3
                                                                (hart_id << PLIC_CLAIM_SHIFT_PER_TARGET));
80001d82:	07b2                	slli	a5,a5,0xc
                                                                PLIC_CLAIM_OFFSET +
80001d84:	97ba                	add	a5,a5,a4
  *claim_addr = source;
80001d86:	c38c                	sw	a1,0(a5)
  
}
80001d88:	8082                	ret

80001d8a <measure_cpu_freq>:
extern int main(int argc, char** argv);
extern void trap_entry();

static unsigned long mtime_lo(void)
{
  return *(volatile unsigned long *)(CLINT_CTRL_ADDR + CLINT_MTIME);
80001d8a:	0200c7b7          	lui	a5,0x200c
80001d8e:	ff87a783          	lw	a5,-8(a5) # 200bff8 <__stack_size+0x200b7f8>
80001d92:	0200c6b7          	lui	a3,0x200c
80001d96:	ff86a703          	lw	a4,-8(a3) # 200bff8 <__stack_size+0x200b7f8>

  // Don't start measuruing until we see an mtime tick
  unsigned long tmp = mtime_lo();
  do {
    start_mtime = mtime_lo();
  } while (start_mtime == tmp);
80001d9a:	fee78ee3          	beq	a5,a4,80001d96 <measure_cpu_freq+0xc>

  unsigned long start_mcycle = read_csr(mcycle);
80001d9e:	b0002673          	csrr	a2,mcycle
  return *(volatile unsigned long *)(CLINT_CTRL_ADDR + CLINT_MTIME);
80001da2:	0200c5b7          	lui	a1,0x200c
80001da6:	ff85a783          	lw	a5,-8(a1) # 200bff8 <__stack_size+0x200b7f8>

  do {
    delta_mtime = mtime_lo() - start_mtime;
80001daa:	40e786b3          	sub	a3,a5,a4
  } while (delta_mtime < n);
80001dae:	fea6ece3          	bltu	a3,a0,80001da6 <measure_cpu_freq+0x1c>

  unsigned long delta_mcycle = read_csr(mcycle) - start_mcycle;
80001db2:	b0002773          	csrr	a4,mcycle
80001db6:	40c707b3          	sub	a5,a4,a2

  return (delta_mcycle / delta_mtime) * mtime_freq
         + ((delta_mcycle % delta_mtime) * mtime_freq) / delta_mtime;
80001dba:	02d7f533          	remu	a0,a5,a3
  return (delta_mcycle / delta_mtime) * mtime_freq
80001dbe:	02d7d7b3          	divu	a5,a5,a3
         + ((delta_mcycle % delta_mtime) * mtime_freq) / delta_mtime;
80001dc2:	053e                	slli	a0,a0,0xf
80001dc4:	02d55533          	divu	a0,a0,a3
  return (delta_mcycle / delta_mtime) * mtime_freq
80001dc8:	07be                	slli	a5,a5,0xf
}
80001dca:	953e                	add	a0,a0,a5
80001dcc:	8082                	ret

80001dce <get_cpu_freq>:

unsigned long get_cpu_freq()
{
80001dce:	1141                	addi	sp,sp,-16
  uint32_t cpu_freq;

  // warm up
  measure_cpu_freq(1);
80001dd0:	4505                	li	a0,1
{
80001dd2:	c606                	sw	ra,12(sp)
  measure_cpu_freq(1);
80001dd4:	3f5d                	jal	80001d8a <measure_cpu_freq>
  // measure for real
  cpu_freq = measure_cpu_freq(100);

  return cpu_freq;
}
80001dd6:	40b2                	lw	ra,12(sp)
  cpu_freq = measure_cpu_freq(100);
80001dd8:	06400513          	li	a0,100
}
80001ddc:	0141                	addi	sp,sp,16
  cpu_freq = measure_cpu_freq(100);
80001dde:	b775                	j	80001d8a <measure_cpu_freq>

80001de0 <_init>:

static void uart_init(size_t baud_rate)
{
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART0_MASK;
80001de0:	100127b7          	lui	a5,0x10012
80001de4:	5fd8                	lw	a4,60(a5)
80001de6:	fffd06b7          	lui	a3,0xfffd0
  }
  return epc;
}

void _init()
{
80001dea:	1141                	addi	sp,sp,-16
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART0_MASK;
80001dec:	16fd                	addi	a3,a3,-1
{
80001dee:	c606                	sw	ra,12(sp)
  GPIO_REG(GPIO_IOF_SEL) &= ~IOF0_UART0_MASK;
80001df0:	8f75                	and	a4,a4,a3
80001df2:	dfd8                	sw	a4,60(a5)
  GPIO_REG(GPIO_IOF_EN) |= IOF0_UART0_MASK;
80001df4:	5f98                	lw	a4,56(a5)
80001df6:	000306b7          	lui	a3,0x30
80001dfa:	8f55                	or	a4,a4,a3
80001dfc:	df98                	sw	a4,56(a5)
  UART0_REG(UART_REG_DIV) = get_cpu_freq() / baud_rate - 1;
80001dfe:	3fc1                	jal	80001dce <get_cpu_freq>
80001e00:	67f1                	lui	a5,0x1c
80001e02:	20078793          	addi	a5,a5,512 # 1c200 <__stack_size+0x1ba00>
80001e06:	02f55533          	divu	a0,a0,a5
80001e0a:	100137b7          	lui	a5,0x10013
80001e0e:	157d                	addi	a0,a0,-1
80001e10:	cf88                	sw	a0,24(a5)
  UART0_REG(UART_REG_TXCTRL) |= UART_TXEN;
80001e12:	4798                	lw	a4,8(a5)
80001e14:	00176713          	ori	a4,a4,1
80001e18:	c798                	sw	a4,8(a5)
  UART0_REG(UART_REG_RXCTRL) |= UART_RXEN;
80001e1a:	47d8                	lw	a4,12(a5)
80001e1c:	00176713          	ori	a4,a4,1
80001e20:	c7d8                	sw	a4,12(a5)
  #ifndef NO_INIT
  uart_init(115200);

  printf("Core freq at %d Hz\n", get_cpu_freq());
80001e22:	3775                	jal	80001dce <get_cpu_freq>
80001e24:	85aa                	mv	a1,a0
80001e26:	90000537          	lui	a0,0x90000
80001e2a:	0c850513          	addi	a0,a0,200 # 900000c8 <_sp+0xffff00c8>
80001e2e:	2111                	jal	80002232 <iprintf>

  // 设置异常出口地址
  write_csr(mtvec, &trap_entry);
80001e30:	800007b7          	lui	a5,0x80000
80001e34:	11078793          	addi	a5,a5,272 # 80000110 <_sp+0xefff0110>
80001e38:	30579073          	csrw	mtvec,a5
  #endif
  
}
80001e3c:	40b2                	lw	ra,12(sp)
80001e3e:	0141                	addi	sp,sp,16
80001e40:	8082                	ret

80001e42 <_fini>:

void _fini()
{
}
80001e42:	8082                	ret

80001e44 <_close>:
#include "stub.h"

int _close(int fd)
{
  return _stub(EBADF);
}
80001e44:	557d                	li	a0,-1
80001e46:	8082                	ret

80001e48 <_exit>:

#include <unistd.h>
#include "platform.h"

void _exit(int code)
{
80001e48:	7179                	addi	sp,sp,-48
  const char message[] = "\nProgram has exited with code:";
80001e4a:	900005b7          	lui	a1,0x90000
{
80001e4e:	d422                	sw	s0,40(sp)
  const char message[] = "\nProgram has exited with code:";
80001e50:	467d                	li	a2,31
{
80001e52:	842a                	mv	s0,a0
  const char message[] = "\nProgram has exited with code:";
80001e54:	0dc58593          	addi	a1,a1,220 # 900000dc <_sp+0xffff00dc>
80001e58:	850a                	mv	a0,sp
{
80001e5a:	d606                	sw	ra,44(sp)
  const char message[] = "\nProgram has exited with code:";
80001e5c:	2c85                	jal	800020cc <memcpy>

  write(STDERR_FILENO, message, sizeof(message) - 1);
80001e5e:	4679                	li	a2,30
80001e60:	858a                	mv	a1,sp
80001e62:	4509                	li	a0,2
80001e64:	2901                	jal	80002274 <write>
  write_hex(STDERR_FILENO, code);
80001e66:	85a2                	mv	a1,s0
80001e68:	4509                	li	a0,2
80001e6a:	2809                	jal	80001e7c <write_hex>
  write(STDERR_FILENO, "\n", 1);
80001e6c:	900005b7          	lui	a1,0x90000
80001e70:	4605                	li	a2,1
80001e72:	09c58593          	addi	a1,a1,156 # 9000009c <_sp+0xffff009c>
80001e76:	4509                	li	a0,2
80001e78:	2ef5                	jal	80002274 <write>
80001e7a:	a001                	j	80001e7a <_exit+0x32>

80001e7c <write_hex>:
#include <stdint.h>
#include <unistd.h>
#include "platform.h"

void write_hex(int fd, unsigned long int hex)
{
80001e7c:	7179                	addi	sp,sp,-48
80001e7e:	ce4e                	sw	s3,28(sp)
80001e80:	89ae                	mv	s3,a1
  uint8_t ii;
  uint8_t jj;
  char towrite;
  write(fd , "0x", 2);
80001e82:	900005b7          	lui	a1,0x90000
80001e86:	4609                	li	a2,2
80001e88:	0fc58593          	addi	a1,a1,252 # 900000fc <_sp+0xffff00fc>
{
80001e8c:	d422                	sw	s0,40(sp)
80001e8e:	d226                	sw	s1,36(sp)
80001e90:	d04a                	sw	s2,32(sp)
80001e92:	cc52                	sw	s4,24(sp)
80001e94:	ca56                	sw	s5,20(sp)
80001e96:	d606                	sw	ra,44(sp)
80001e98:	892a                	mv	s2,a0
  write(fd , "0x", 2);
80001e9a:	4471                	li	s0,28
80001e9c:	2ee1                	jal	80002274 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
    jj = ii - 1;
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80001e9e:	4a3d                	li	s4,15
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80001ea0:	4aa5                	li	s5,9
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
80001ea2:	54f1                	li	s1,-4
    uint8_t digit = ((hex & (0xF << (jj*4))) >> (jj*4));
80001ea4:	008a17b3          	sll	a5,s4,s0
80001ea8:	0137f7b3          	and	a5,a5,s3
80001eac:	0087d7b3          	srl	a5,a5,s0
80001eb0:	0ff7f793          	andi	a5,a5,255
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80001eb4:	02fae963          	bltu	s5,a5,80001ee6 <write_hex+0x6a>
80001eb8:	03078793          	addi	a5,a5,48
80001ebc:	0ff7f793          	andi	a5,a5,255
    write(fd, &towrite, 1);
80001ec0:	4605                	li	a2,1
80001ec2:	00f10593          	addi	a1,sp,15
80001ec6:	854a                	mv	a0,s2
80001ec8:	1471                	addi	s0,s0,-4
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80001eca:	00f107a3          	sb	a5,15(sp)
    write(fd, &towrite, 1);
80001ece:	265d                	jal	80002274 <write>
  for (ii = sizeof(unsigned long int) * 2 ; ii > 0; ii--) {
80001ed0:	fc941ae3          	bne	s0,s1,80001ea4 <write_hex+0x28>
  }
}
80001ed4:	50b2                	lw	ra,44(sp)
80001ed6:	5422                	lw	s0,40(sp)
80001ed8:	5492                	lw	s1,36(sp)
80001eda:	5902                	lw	s2,32(sp)
80001edc:	49f2                	lw	s3,28(sp)
80001ede:	4a62                	lw	s4,24(sp)
80001ee0:	4ad2                	lw	s5,20(sp)
80001ee2:	6145                	addi	sp,sp,48
80001ee4:	8082                	ret
    towrite = digit < 0xA ? ('0' + digit) : ('A' +  (digit - 0xA));
80001ee6:	03778793          	addi	a5,a5,55
80001eea:	bfc9                	j	80001ebc <write_hex+0x40>

80001eec <_fstat>:
#include <unistd.h>
#include <sys/stat.h>
#include "stub.h"

int _fstat(int fd, struct stat* st)
{
80001eec:	1101                	addi	sp,sp,-32
80001eee:	ce06                	sw	ra,28(sp)
80001ef0:	c62e                	sw	a1,12(sp)
  if (isatty(fd)) {
80001ef2:	2ebd                	jal	80002270 <isatty>
80001ef4:	c901                	beqz	a0,80001f04 <_fstat+0x18>
    st->st_mode = S_IFCHR;
80001ef6:	45b2                	lw	a1,12(sp)
80001ef8:	6789                	lui	a5,0x2
    return 0;
80001efa:	4501                	li	a0,0
    st->st_mode = S_IFCHR;
80001efc:	c1dc                	sw	a5,4(a1)
  }

  return _stub(EBADF);
}
80001efe:	40f2                	lw	ra,28(sp)
80001f00:	6105                	addi	sp,sp,32
80001f02:	8082                	ret
  return _stub(EBADF);
80001f04:	557d                	li	a0,-1
80001f06:	bfe5                	j	80001efe <_fstat+0x12>

80001f08 <_isatty>:

#include <unistd.h>

int _isatty(int fd)
{
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO)
80001f08:	157d                	addi	a0,a0,-1
    return 1;

  return 0;
}
80001f0a:	00253513          	sltiu	a0,a0,2
80001f0e:	8082                	ret

80001f10 <_lseek>:
#include <unistd.h>
#include <sys/types.h>
#include "stub.h"

off_t _lseek(int fd, off_t ptr, int dir)
{
80001f10:	1141                	addi	sp,sp,-16
80001f12:	c606                	sw	ra,12(sp)
  if (isatty(fd))
80001f14:	2eb1                	jal	80002270 <isatty>
    return 0;

  return _stub(EBADF);
}
80001f16:	40b2                	lw	ra,12(sp)
  if (isatty(fd))
80001f18:	00153513          	seqz	a0,a0
80001f1c:	40a00533          	neg	a0,a0
}
80001f20:	0141                	addi	sp,sp,16
80001f22:	8082                	ret

80001f24 <_read>:
  //  }
  //  return result;
  //}

  return _stub(EBADF);
}
80001f24:	557d                	li	a0,-1
80001f26:	8082                	ret

80001f28 <_sbrk>:
{
  extern char _end[];
  extern char _heap_end[];
  static char *curbrk = _end;

  if ((curbrk + incr < _end) || (curbrk + incr > _heap_end))
80001f28:	80818713          	addi	a4,gp,-2040 # 90000230 <curbrk.1406>
80001f2c:	431c                	lw	a5,0(a4)
80001f2e:	900036b7          	lui	a3,0x90003
80001f32:	15868693          	addi	a3,a3,344 # 90003158 <_sp+0xffff3158>
80001f36:	953e                	add	a0,a0,a5
80001f38:	00d56b63          	bltu	a0,a3,80001f4e <_sbrk+0x26>
80001f3c:	900106b7          	lui	a3,0x90010
80001f40:	80068693          	addi	a3,a3,-2048 # 9000f800 <_sp+0xfffff800>
80001f44:	00a6e563          	bltu	a3,a0,80001f4e <_sbrk+0x26>
    return NULL - 1;

  curbrk += incr;
80001f48:	c308                	sw	a0,0(a4)
  return curbrk - incr;
}
80001f4a:	853e                	mv	a0,a5
80001f4c:	8082                	ret
    return NULL - 1;
80001f4e:	57fd                	li	a5,-1
80001f50:	bfed                	j	80001f4a <_sbrk+0x22>

80001f52 <_write>:

#include "platform.h"
#include "stub.h"

ssize_t _write(int fd, const void* ptr, size_t len)
{
80001f52:	1101                	addi	sp,sp,-32
80001f54:	ce06                	sw	ra,28(sp)
80001f56:	c62e                	sw	a1,12(sp)
80001f58:	c432                	sw	a2,8(sp)
  const uint8_t * current = (const char *)ptr;

  if (isatty(fd)) {
80001f5a:	2e19                	jal	80002270 <isatty>
80001f5c:	c131                	beqz	a0,80001fa0 <_write+0x4e>
80001f5e:	45b2                	lw	a1,12(sp)
80001f60:	4622                	lw	a2,8(sp)
    for (size_t jj = 0; jj < len; jj++) {
      while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
80001f62:	100137b7          	lui	a5,0x10013
      UART0_REG(UART_REG_TXFIFO) = current[jj];

      if (current[jj] == '\n') {
80001f66:	46a9                	li	a3,10
80001f68:	00c58733          	add	a4,a1,a2
        while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
        UART0_REG(UART_REG_TXFIFO) = '\r';
80001f6c:	4535                	li	a0,13
    for (size_t jj = 0; jj < len; jj++) {
80001f6e:	00e59663          	bne	a1,a4,80001f7a <_write+0x28>
      }
    }
    return len;
80001f72:	8532                	mv	a0,a2
  }

  return _stub(EBADF);
}
80001f74:	40f2                	lw	ra,28(sp)
80001f76:	6105                	addi	sp,sp,32
80001f78:	8082                	ret
      while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
80001f7a:	0007a803          	lw	a6,0(a5) # 10013000 <__stack_size+0x10012800>
80001f7e:	fe084ee3          	bltz	a6,80001f7a <_write+0x28>
      UART0_REG(UART_REG_TXFIFO) = current[jj];
80001f82:	0005c803          	lbu	a6,0(a1)
80001f86:	0107a023          	sw	a6,0(a5)
      if (current[jj] == '\n') {
80001f8a:	0005c803          	lbu	a6,0(a1)
80001f8e:	00d81763          	bne	a6,a3,80001f9c <_write+0x4a>
        while (UART0_REG(UART_REG_TXFIFO) & 0x80000000) ;
80001f92:	0007a803          	lw	a6,0(a5)
80001f96:	fe084ee3          	bltz	a6,80001f92 <_write+0x40>
        UART0_REG(UART_REG_TXFIFO) = '\r';
80001f9a:	c388                	sw	a0,0(a5)
80001f9c:	0585                	addi	a1,a1,1
80001f9e:	bfc1                	j	80001f6e <_write+0x1c>
  return _stub(EBADF);
80001fa0:	557d                	li	a0,-1
80001fa2:	bfc9                	j	80001f74 <_write+0x22>

80001fa4 <atexit>:
80001fa4:	85aa                	mv	a1,a0
80001fa6:	4681                	li	a3,0
80001fa8:	4601                	li	a2,0
80001faa:	4501                	li	a0,0
80001fac:	ae69                	j	80002346 <__register_exitproc>

80001fae <exit>:
80001fae:	1141                	addi	sp,sp,-16
80001fb0:	c422                	sw	s0,8(sp)
80001fb2:	c606                	sw	ra,12(sp)
80001fb4:	00000797          	auipc	a5,0x0
80001fb8:	41678793          	addi	a5,a5,1046 # 800023ca <__call_exitprocs>
80001fbc:	842a                	mv	s0,a0
80001fbe:	c399                	beqz	a5,80001fc4 <exit+0x16>
80001fc0:	4581                	li	a1,0
80001fc2:	2121                	jal	800023ca <__call_exitprocs>
80001fc4:	80c18793          	addi	a5,gp,-2036 # 90000234 <_global_impure_ptr>
80001fc8:	4388                	lw	a0,0(a5)
80001fca:	551c                	lw	a5,40(a0)
80001fcc:	c391                	beqz	a5,80001fd0 <exit+0x22>
80001fce:	9782                	jalr	a5
80001fd0:	8522                	mv	a0,s0
80001fd2:	e77ff0ef          	jal	ra,80001e48 <_exit>

80001fd6 <__libc_fini_array>:
80001fd6:	1101                	addi	sp,sp,-32
80001fd8:	a0001797          	auipc	a5,0xa0001
80001fdc:	65e78793          	addi	a5,a5,1630 # 20003636 <__fini_array_end>
80001fe0:	cc22                	sw	s0,24(sp)
80001fe2:	a0001417          	auipc	s0,0xa0001
80001fe6:	65440413          	addi	s0,s0,1620 # 20003636 <__fini_array_end>
80001fea:	40878433          	sub	s0,a5,s0
80001fee:	ca26                	sw	s1,20(sp)
80001ff0:	c84a                	sw	s2,16(sp)
80001ff2:	c64e                	sw	s3,12(sp)
80001ff4:	ce06                	sw	ra,28(sp)
80001ff6:	8409                	srai	s0,s0,0x2
80001ff8:	4481                	li	s1,0
80001ffa:	893e                	mv	s2,a5
80001ffc:	59f1                	li	s3,-4
80001ffe:	00941a63          	bne	s0,s1,80002012 <__libc_fini_array+0x3c>
80002002:	4462                	lw	s0,24(sp)
80002004:	40f2                	lw	ra,28(sp)
80002006:	44d2                	lw	s1,20(sp)
80002008:	4942                	lw	s2,16(sp)
8000200a:	49b2                	lw	s3,12(sp)
8000200c:	6105                	addi	sp,sp,32
8000200e:	e35ff06f          	j	80001e42 <_fini>
80002012:	033487b3          	mul	a5,s1,s3
80002016:	0485                	addi	s1,s1,1
80002018:	97ca                	add	a5,a5,s2
8000201a:	ffc7a783          	lw	a5,-4(a5)
8000201e:	9782                	jalr	a5
80002020:	bff9                	j	80001ffe <__libc_fini_array+0x28>

80002022 <__libc_init_array>:
80002022:	1141                	addi	sp,sp,-16
80002024:	c422                	sw	s0,8(sp)
80002026:	c226                	sw	s1,4(sp)
80002028:	a0001417          	auipc	s0,0xa0001
8000202c:	60e40413          	addi	s0,s0,1550 # 20003636 <__fini_array_end>
80002030:	a0001497          	auipc	s1,0xa0001
80002034:	60648493          	addi	s1,s1,1542 # 20003636 <__fini_array_end>
80002038:	8c81                	sub	s1,s1,s0
8000203a:	c04a                	sw	s2,0(sp)
8000203c:	c606                	sw	ra,12(sp)
8000203e:	8489                	srai	s1,s1,0x2
80002040:	4901                	li	s2,0
80002042:	02991763          	bne	s2,s1,80002070 <__libc_init_array+0x4e>
80002046:	a0001417          	auipc	s0,0xa0001
8000204a:	5f040413          	addi	s0,s0,1520 # 20003636 <__fini_array_end>
8000204e:	a0001497          	auipc	s1,0xa0001
80002052:	5e848493          	addi	s1,s1,1512 # 20003636 <__fini_array_end>
80002056:	8c81                	sub	s1,s1,s0
80002058:	d89ff0ef          	jal	ra,80001de0 <_init>
8000205c:	8489                	srai	s1,s1,0x2
8000205e:	4901                	li	s2,0
80002060:	00991d63          	bne	s2,s1,8000207a <__libc_init_array+0x58>
80002064:	40b2                	lw	ra,12(sp)
80002066:	4422                	lw	s0,8(sp)
80002068:	4492                	lw	s1,4(sp)
8000206a:	4902                	lw	s2,0(sp)
8000206c:	0141                	addi	sp,sp,16
8000206e:	8082                	ret
80002070:	401c                	lw	a5,0(s0)
80002072:	0905                	addi	s2,s2,1
80002074:	0411                	addi	s0,s0,4
80002076:	9782                	jalr	a5
80002078:	b7e9                	j	80002042 <__libc_init_array+0x20>
8000207a:	401c                	lw	a5,0(s0)
8000207c:	0905                	addi	s2,s2,1
8000207e:	0411                	addi	s0,s0,4
80002080:	9782                	jalr	a5
80002082:	bff9                	j	80002060 <__libc_init_array+0x3e>

80002084 <__itoa>:
80002084:	1141                	addi	sp,sp,-16
80002086:	c422                	sw	s0,8(sp)
80002088:	c606                	sw	ra,12(sp)
8000208a:	ffe60713          	addi	a4,a2,-2
8000208e:	02200793          	li	a5,34
80002092:	842e                	mv	s0,a1
80002094:	00e7fa63          	bleu	a4,a5,800020a8 <__itoa+0x24>
80002098:	00058023          	sb	zero,0(a1)
8000209c:	4401                	li	s0,0
8000209e:	8522                	mv	a0,s0
800020a0:	40b2                	lw	ra,12(sp)
800020a2:	4422                	lw	s0,8(sp)
800020a4:	0141                	addi	sp,sp,16
800020a6:	8082                	ret
800020a8:	47a9                	li	a5,10
800020aa:	00f61e63          	bne	a2,a5,800020c6 <__itoa+0x42>
800020ae:	00055c63          	bgez	a0,800020c6 <__itoa+0x42>
800020b2:	02d00793          	li	a5,45
800020b6:	00f58023          	sb	a5,0(a1)
800020ba:	40a00533          	neg	a0,a0
800020be:	4585                	li	a1,1
800020c0:	95a2                	add	a1,a1,s0
800020c2:	22c1                	jal	80002282 <__utoa>
800020c4:	bfe9                	j	8000209e <__itoa+0x1a>
800020c6:	4581                	li	a1,0
800020c8:	bfe5                	j	800020c0 <__itoa+0x3c>

800020ca <itoa>:
800020ca:	bf6d                	j	80002084 <__itoa>

800020cc <memcpy>:
800020cc:	00a5c7b3          	xor	a5,a1,a0
800020d0:	8b8d                	andi	a5,a5,3
800020d2:	00c50733          	add	a4,a0,a2
800020d6:	e781                	bnez	a5,800020de <memcpy+0x12>
800020d8:	478d                	li	a5,3
800020da:	00c7ef63          	bltu	a5,a2,800020f8 <memcpy+0x2c>
800020de:	87aa                	mv	a5,a0
800020e0:	00e56963          	bltu	a0,a4,800020f2 <memcpy+0x26>
800020e4:	8082                	ret
800020e6:	0005c683          	lbu	a3,0(a1)
800020ea:	0785                	addi	a5,a5,1
800020ec:	0585                	addi	a1,a1,1
800020ee:	fed78fa3          	sb	a3,-1(a5)
800020f2:	fee7eae3          	bltu	a5,a4,800020e6 <memcpy+0x1a>
800020f6:	8082                	ret
800020f8:	00357793          	andi	a5,a0,3
800020fc:	ebbd                	bnez	a5,80002172 <memcpy+0xa6>
800020fe:	87aa                	mv	a5,a0
80002100:	ffc77693          	andi	a3,a4,-4
80002104:	fe068613          	addi	a2,a3,-32
80002108:	06c7fc63          	bleu	a2,a5,80002180 <memcpy+0xb4>
8000210c:	0005a383          	lw	t2,0(a1)
80002110:	0045a283          	lw	t0,4(a1)
80002114:	0085af83          	lw	t6,8(a1)
80002118:	00c5af03          	lw	t5,12(a1)
8000211c:	0105ae83          	lw	t4,16(a1)
80002120:	0145ae03          	lw	t3,20(a1)
80002124:	0185a303          	lw	t1,24(a1)
80002128:	01c5a883          	lw	a7,28(a1)
8000212c:	02458593          	addi	a1,a1,36
80002130:	02478793          	addi	a5,a5,36
80002134:	ffc5a803          	lw	a6,-4(a1)
80002138:	fc77ae23          	sw	t2,-36(a5)
8000213c:	fe57a023          	sw	t0,-32(a5)
80002140:	fff7a223          	sw	t6,-28(a5)
80002144:	ffe7a423          	sw	t5,-24(a5)
80002148:	ffd7a623          	sw	t4,-20(a5)
8000214c:	ffc7a823          	sw	t3,-16(a5)
80002150:	fe67aa23          	sw	t1,-12(a5)
80002154:	ff17ac23          	sw	a7,-8(a5)
80002158:	ff07ae23          	sw	a6,-4(a5)
8000215c:	b775                	j	80002108 <memcpy+0x3c>
8000215e:	0005c683          	lbu	a3,0(a1)
80002162:	0785                	addi	a5,a5,1
80002164:	0585                	addi	a1,a1,1
80002166:	fed78fa3          	sb	a3,-1(a5)
8000216a:	0037f693          	andi	a3,a5,3
8000216e:	fae5                	bnez	a3,8000215e <memcpy+0x92>
80002170:	bf41                	j	80002100 <memcpy+0x34>
80002172:	87aa                	mv	a5,a0
80002174:	bfdd                	j	8000216a <memcpy+0x9e>
80002176:	4190                	lw	a2,0(a1)
80002178:	0791                	addi	a5,a5,4
8000217a:	0591                	addi	a1,a1,4
8000217c:	fec7ae23          	sw	a2,-4(a5)
80002180:	fed7ebe3          	bltu	a5,a3,80002176 <memcpy+0xaa>
80002184:	f6e7e7e3          	bltu	a5,a4,800020f2 <memcpy+0x26>
80002188:	8082                	ret

8000218a <memset>:
8000218a:	433d                	li	t1,15
8000218c:	872a                	mv	a4,a0
8000218e:	02c37363          	bleu	a2,t1,800021b4 <memset+0x2a>
80002192:	00f77793          	andi	a5,a4,15
80002196:	efbd                	bnez	a5,80002214 <memset+0x8a>
80002198:	e5ad                	bnez	a1,80002202 <memset+0x78>
8000219a:	ff067693          	andi	a3,a2,-16
8000219e:	8a3d                	andi	a2,a2,15
800021a0:	96ba                	add	a3,a3,a4
800021a2:	c30c                	sw	a1,0(a4)
800021a4:	c34c                	sw	a1,4(a4)
800021a6:	c70c                	sw	a1,8(a4)
800021a8:	c74c                	sw	a1,12(a4)
800021aa:	0741                	addi	a4,a4,16
800021ac:	fed76be3          	bltu	a4,a3,800021a2 <memset+0x18>
800021b0:	e211                	bnez	a2,800021b4 <memset+0x2a>
800021b2:	8082                	ret
800021b4:	40c306b3          	sub	a3,t1,a2
800021b8:	068a                	slli	a3,a3,0x2
800021ba:	00000297          	auipc	t0,0x0
800021be:	9696                	add	a3,a3,t0
800021c0:	00a68067          	jr	10(a3)
800021c4:	00b70723          	sb	a1,14(a4) # ff98000e <_sp+0x6f97000e>
800021c8:	00b706a3          	sb	a1,13(a4)
800021cc:	00b70623          	sb	a1,12(a4)
800021d0:	00b705a3          	sb	a1,11(a4)
800021d4:	00b70523          	sb	a1,10(a4)
800021d8:	00b704a3          	sb	a1,9(a4)
800021dc:	00b70423          	sb	a1,8(a4)
800021e0:	00b703a3          	sb	a1,7(a4)
800021e4:	00b70323          	sb	a1,6(a4)
800021e8:	00b702a3          	sb	a1,5(a4)
800021ec:	00b70223          	sb	a1,4(a4)
800021f0:	00b701a3          	sb	a1,3(a4)
800021f4:	00b70123          	sb	a1,2(a4)
800021f8:	00b700a3          	sb	a1,1(a4)
800021fc:	00b70023          	sb	a1,0(a4)
80002200:	8082                	ret
80002202:	0ff5f593          	andi	a1,a1,255
80002206:	00859693          	slli	a3,a1,0x8
8000220a:	8dd5                	or	a1,a1,a3
8000220c:	01059693          	slli	a3,a1,0x10
80002210:	8dd5                	or	a1,a1,a3
80002212:	b761                	j	8000219a <memset+0x10>
80002214:	00279693          	slli	a3,a5,0x2
80002218:	00000297          	auipc	t0,0x0
8000221c:	9696                	add	a3,a3,t0
8000221e:	8286                	mv	t0,ra
80002220:	fa8680e7          	jalr	-88(a3)
80002224:	8096                	mv	ra,t0
80002226:	17c1                	addi	a5,a5,-16
80002228:	8f1d                	sub	a4,a4,a5
8000222a:	963e                	add	a2,a2,a5
8000222c:	f8c374e3          	bleu	a2,t1,800021b4 <memset+0x2a>
80002230:	b7a5                	j	80002198 <memset+0xe>

80002232 <iprintf>:
80002232:	7139                	addi	sp,sp,-64
80002234:	da3e                	sw	a5,52(sp)
80002236:	d22e                	sw	a1,36(sp)
80002238:	d432                	sw	a2,40(sp)
8000223a:	d636                	sw	a3,44(sp)
8000223c:	d83a                	sw	a4,48(sp)
8000223e:	dc42                	sw	a6,56(sp)
80002240:	de46                	sw	a7,60(sp)
80002242:	81018793          	addi	a5,gp,-2032 # 90000238 <_impure_ptr>
80002246:	cc22                	sw	s0,24(sp)
80002248:	4380                	lw	s0,0(a5)
8000224a:	ca26                	sw	s1,20(sp)
8000224c:	ce06                	sw	ra,28(sp)
8000224e:	84aa                	mv	s1,a0
80002250:	c409                	beqz	s0,8000225a <iprintf+0x28>
80002252:	4c1c                	lw	a5,24(s0)
80002254:	e399                	bnez	a5,8000225a <iprintf+0x28>
80002256:	8522                	mv	a0,s0
80002258:	2cfd                	jal	80002556 <__sinit>
8000225a:	440c                	lw	a1,8(s0)
8000225c:	1054                	addi	a3,sp,36
8000225e:	8626                	mv	a2,s1
80002260:	8522                	mv	a0,s0
80002262:	c636                	sw	a3,12(sp)
80002264:	2355                	jal	80002808 <_vfiprintf_r>
80002266:	40f2                	lw	ra,28(sp)
80002268:	4462                	lw	s0,24(sp)
8000226a:	44d2                	lw	s1,20(sp)
8000226c:	6121                	addi	sp,sp,64
8000226e:	8082                	ret

80002270 <isatty>:
80002270:	c99ff06f          	j	80001f08 <_isatty>

80002274 <write>:
80002274:	81018793          	addi	a5,gp,-2032 # 90000238 <_impure_ptr>
80002278:	86b2                	mv	a3,a2
8000227a:	862e                	mv	a2,a1
8000227c:	85aa                	mv	a1,a0
8000227e:	4388                	lw	a0,0(a5)
80002280:	a841                	j	80002310 <_write_r>

80002282 <__utoa>:
80002282:	7139                	addi	sp,sp,-64
80002284:	dc22                	sw	s0,56(sp)
80002286:	da26                	sw	s1,52(sp)
80002288:	d84a                	sw	s2,48(sp)
8000228a:	84aa                	mv	s1,a0
8000228c:	8932                	mv	s2,a2
8000228e:	842e                	mv	s0,a1
80002290:	02500613          	li	a2,37
80002294:	0fffe597          	auipc	a1,0xfffe
80002298:	e6c58593          	addi	a1,a1,-404 # 90000100 <_data+0x100>
8000229c:	0028                	addi	a0,sp,8
8000229e:	de06                	sw	ra,60(sp)
800022a0:	e2dff0ef          	jal	ra,800020cc <memcpy>
800022a4:	ffe90693          	addi	a3,s2,-2
800022a8:	02200713          	li	a4,34
800022ac:	4781                	li	a5,0
800022ae:	00d77d63          	bleu	a3,a4,800022c8 <__utoa+0x46>
800022b2:	00040023          	sb	zero,0(s0)
800022b6:	4401                	li	s0,0
800022b8:	8522                	mv	a0,s0
800022ba:	50f2                	lw	ra,60(sp)
800022bc:	5462                	lw	s0,56(sp)
800022be:	54d2                	lw	s1,52(sp)
800022c0:	5942                	lw	s2,48(sp)
800022c2:	6121                	addi	sp,sp,64
800022c4:	8082                	ret
800022c6:	87b2                	mv	a5,a2
800022c8:	0324f733          	remu	a4,s1,s2
800022cc:	180c                	addi	a1,sp,48
800022ce:	00178613          	addi	a2,a5,1
800022d2:	00c406b3          	add	a3,s0,a2
800022d6:	0324d4b3          	divu	s1,s1,s2
800022da:	972e                	add	a4,a4,a1
800022dc:	fd874703          	lbu	a4,-40(a4)
800022e0:	fee68fa3          	sb	a4,-1(a3)
800022e4:	f0ed                	bnez	s1,800022c6 <__utoa+0x44>
800022e6:	00068023          	sb	zero,0(a3)
800022ea:	97a2                	add	a5,a5,s0
800022ec:	8722                	mv	a4,s0
800022ee:	408786b3          	sub	a3,a5,s0
800022f2:	40870633          	sub	a2,a4,s0
800022f6:	fcd651e3          	ble	a3,a2,800022b8 <__utoa+0x36>
800022fa:	0007c603          	lbu	a2,0(a5)
800022fe:	00074683          	lbu	a3,0(a4)
80002302:	17fd                	addi	a5,a5,-1
80002304:	00c70023          	sb	a2,0(a4)
80002308:	00d780a3          	sb	a3,1(a5)
8000230c:	0705                	addi	a4,a4,1
8000230e:	b7c5                	j	800022ee <__utoa+0x6c>

80002310 <_write_r>:
80002310:	1141                	addi	sp,sp,-16
80002312:	c422                	sw	s0,8(sp)
80002314:	842a                	mv	s0,a0
80002316:	852e                	mv	a0,a1
80002318:	85b2                	mv	a1,a2
8000231a:	8636                	mv	a2,a3
8000231c:	10001797          	auipc	a5,0x10001
80002320:	e207ac23          	sw	zero,-456(a5) # 90003154 <errno>
80002324:	c606                	sw	ra,12(sp)
80002326:	c2dff0ef          	jal	ra,80001f52 <_write>
8000232a:	57fd                	li	a5,-1
8000232c:	00f51963          	bne	a0,a5,8000233e <_write_r+0x2e>
80002330:	10001797          	auipc	a5,0x10001
80002334:	e2478793          	addi	a5,a5,-476 # 90003154 <errno>
80002338:	439c                	lw	a5,0(a5)
8000233a:	c391                	beqz	a5,8000233e <_write_r+0x2e>
8000233c:	c01c                	sw	a5,0(s0)
8000233e:	40b2                	lw	ra,12(sp)
80002340:	4422                	lw	s0,8(sp)
80002342:	0141                	addi	sp,sp,16
80002344:	8082                	ret

80002346 <__register_exitproc>:
80002346:	8a018793          	addi	a5,gp,-1888 # 900002c8 <_global_atexit>
8000234a:	439c                	lw	a5,0(a5)
8000234c:	8e2a                	mv	t3,a0
8000234e:	e39d                	bnez	a5,80002374 <__register_exitproc+0x2e>
80002350:	10001717          	auipc	a4,0x10001
80002354:	d7870713          	addi	a4,a4,-648 # 900030c8 <_global_atexit0>
80002358:	8ae1a023          	sw	a4,-1888(gp) # 900002c8 <_global_atexit>
8000235c:	7fffe517          	auipc	a0,0x7fffe
80002360:	ca450513          	addi	a0,a0,-860 # 0 <_sp+0x6fff0000>
80002364:	87ba                	mv	a5,a4
80002366:	c519                	beqz	a0,80002374 <__register_exitproc+0x2e>
80002368:	411c                	lw	a5,0(a0)
8000236a:	10001517          	auipc	a0,0x10001
8000236e:	def52323          	sw	a5,-538(a0) # 90003150 <_global_atexit0+0x88>
80002372:	87ba                	mv	a5,a4
80002374:	43d8                	lw	a4,4(a5)
80002376:	487d                	li	a6,31
80002378:	557d                	li	a0,-1
8000237a:	04e84763          	blt	a6,a4,800023c8 <__register_exitproc+0x82>
8000237e:	020e0e63          	beqz	t3,800023ba <__register_exitproc+0x74>
80002382:	0887a803          	lw	a6,136(a5)
80002386:	04080163          	beqz	a6,800023c8 <__register_exitproc+0x82>
8000238a:	00271893          	slli	a7,a4,0x2
8000238e:	98c2                	add	a7,a7,a6
80002390:	00c8a023          	sw	a2,0(a7)
80002394:	10082303          	lw	t1,256(a6)
80002398:	4605                	li	a2,1
8000239a:	00e61633          	sll	a2,a2,a4
8000239e:	00c36333          	or	t1,t1,a2
800023a2:	10682023          	sw	t1,256(a6)
800023a6:	08d8a023          	sw	a3,128(a7)
800023aa:	4689                	li	a3,2
800023ac:	00de1763          	bne	t3,a3,800023ba <__register_exitproc+0x74>
800023b0:	10482683          	lw	a3,260(a6)
800023b4:	8e55                	or	a2,a2,a3
800023b6:	10c82223          	sw	a2,260(a6)
800023ba:	00170693          	addi	a3,a4,1
800023be:	070a                	slli	a4,a4,0x2
800023c0:	c3d4                	sw	a3,4(a5)
800023c2:	97ba                	add	a5,a5,a4
800023c4:	c78c                	sw	a1,8(a5)
800023c6:	4501                	li	a0,0
800023c8:	8082                	ret

800023ca <__call_exitprocs>:
800023ca:	7179                	addi	sp,sp,-48
800023cc:	c85a                	sw	s6,16(sp)
800023ce:	c65e                	sw	s7,12(sp)
800023d0:	c462                	sw	s8,8(sp)
800023d2:	c266                	sw	s9,4(sp)
800023d4:	d606                	sw	ra,44(sp)
800023d6:	d422                	sw	s0,40(sp)
800023d8:	d226                	sw	s1,36(sp)
800023da:	d04a                	sw	s2,32(sp)
800023dc:	ce4e                	sw	s3,28(sp)
800023de:	cc52                	sw	s4,24(sp)
800023e0:	ca56                	sw	s5,20(sp)
800023e2:	c06a                	sw	s10,0(sp)
800023e4:	8c2a                	mv	s8,a0
800023e6:	8b2e                	mv	s6,a1
800023e8:	8a018b93          	addi	s7,gp,-1888 # 900002c8 <_global_atexit>
800023ec:	4c85                	li	s9,1
800023ee:	000ba403          	lw	s0,0(s7)
800023f2:	cc09                	beqz	s0,8000240c <__call_exitprocs+0x42>
800023f4:	00442983          	lw	s3,4(s0)
800023f8:	08842a03          	lw	s4,136(s0)
800023fc:	4901                	li	s2,0
800023fe:	fff98493          	addi	s1,s3,-1
80002402:	098a                	slli	s3,s3,0x2
80002404:	013a0ab3          	add	s5,s4,s3
80002408:	0204d063          	bgez	s1,80002428 <__call_exitprocs+0x5e>
8000240c:	50b2                	lw	ra,44(sp)
8000240e:	5422                	lw	s0,40(sp)
80002410:	5492                	lw	s1,36(sp)
80002412:	5902                	lw	s2,32(sp)
80002414:	49f2                	lw	s3,28(sp)
80002416:	4a62                	lw	s4,24(sp)
80002418:	4ad2                	lw	s5,20(sp)
8000241a:	4b42                	lw	s6,16(sp)
8000241c:	4bb2                	lw	s7,12(sp)
8000241e:	4c22                	lw	s8,8(sp)
80002420:	4c92                	lw	s9,4(sp)
80002422:	4d02                	lw	s10,0(sp)
80002424:	6145                	addi	sp,sp,48
80002426:	8082                	ret
80002428:	000b0c63          	beqz	s6,80002440 <__call_exitprocs+0x76>
8000242c:	000a1563          	bnez	s4,80002436 <__call_exitprocs+0x6c>
80002430:	14fd                	addi	s1,s1,-1
80002432:	1971                	addi	s2,s2,-4
80002434:	bfd1                	j	80002408 <__call_exitprocs+0x3e>
80002436:	012a87b3          	add	a5,s5,s2
8000243a:	5ffc                	lw	a5,124(a5)
8000243c:	ff679ae3          	bne	a5,s6,80002430 <__call_exitprocs+0x66>
80002440:	4054                	lw	a3,4(s0)
80002442:	01390733          	add	a4,s2,s3
80002446:	9722                	add	a4,a4,s0
80002448:	16fd                	addi	a3,a3,-1
8000244a:	435c                	lw	a5,4(a4)
8000244c:	02969763          	bne	a3,s1,8000247a <__call_exitprocs+0xb0>
80002450:	c044                	sw	s1,4(s0)
80002452:	dff9                	beqz	a5,80002430 <__call_exitprocs+0x66>
80002454:	00442d03          	lw	s10,4(s0)
80002458:	000a0863          	beqz	s4,80002468 <__call_exitprocs+0x9e>
8000245c:	100a2683          	lw	a3,256(s4)
80002460:	009c9733          	sll	a4,s9,s1
80002464:	8ef9                	and	a3,a3,a4
80002466:	ee89                	bnez	a3,80002480 <__call_exitprocs+0xb6>
80002468:	9782                	jalr	a5
8000246a:	4058                	lw	a4,4(s0)
8000246c:	000ba783          	lw	a5,0(s7)
80002470:	f7a71fe3          	bne	a4,s10,800023ee <__call_exitprocs+0x24>
80002474:	faf40ee3          	beq	s0,a5,80002430 <__call_exitprocs+0x66>
80002478:	bf9d                	j	800023ee <__call_exitprocs+0x24>
8000247a:	00072223          	sw	zero,4(a4)
8000247e:	bfd1                	j	80002452 <__call_exitprocs+0x88>
80002480:	012a86b3          	add	a3,s5,s2
80002484:	ffc6a583          	lw	a1,-4(a3)
80002488:	104a2683          	lw	a3,260(s4)
8000248c:	8f75                	and	a4,a4,a3
8000248e:	e701                	bnez	a4,80002496 <__call_exitprocs+0xcc>
80002490:	8562                	mv	a0,s8
80002492:	9782                	jalr	a5
80002494:	bfd9                	j	8000246a <__call_exitprocs+0xa0>
80002496:	852e                	mv	a0,a1
80002498:	9782                	jalr	a5
8000249a:	bfc1                	j	8000246a <__call_exitprocs+0xa0>

8000249c <_cleanup_r>:
8000249c:	00001597          	auipc	a1,0x1
800024a0:	df058593          	addi	a1,a1,-528 # 8000328c <_fflush_r>
800024a4:	aa55                	j	80002658 <_fwalk_reent>

800024a6 <std.isra.0>:
800024a6:	1141                	addi	sp,sp,-16
800024a8:	c422                	sw	s0,8(sp)
800024aa:	c606                	sw	ra,12(sp)
800024ac:	842a                	mv	s0,a0
800024ae:	00b51623          	sh	a1,12(a0)
800024b2:	00c51723          	sh	a2,14(a0)
800024b6:	00052023          	sw	zero,0(a0)
800024ba:	00052223          	sw	zero,4(a0)
800024be:	00052423          	sw	zero,8(a0)
800024c2:	06052223          	sw	zero,100(a0)
800024c6:	00052823          	sw	zero,16(a0)
800024ca:	00052a23          	sw	zero,20(a0)
800024ce:	00052c23          	sw	zero,24(a0)
800024d2:	4621                	li	a2,8
800024d4:	4581                	li	a1,0
800024d6:	05c50513          	addi	a0,a0,92
800024da:	cb1ff0ef          	jal	ra,8000218a <memset>
800024de:	00001797          	auipc	a5,0x1
800024e2:	9b478793          	addi	a5,a5,-1612 # 80002e92 <__sread>
800024e6:	d05c                	sw	a5,36(s0)
800024e8:	00001797          	auipc	a5,0x1
800024ec:	9da78793          	addi	a5,a5,-1574 # 80002ec2 <__swrite>
800024f0:	d41c                	sw	a5,40(s0)
800024f2:	00001797          	auipc	a5,0x1
800024f6:	a2078793          	addi	a5,a5,-1504 # 80002f12 <__sseek>
800024fa:	d45c                	sw	a5,44(s0)
800024fc:	00001797          	auipc	a5,0x1
80002500:	a4c78793          	addi	a5,a5,-1460 # 80002f48 <__sclose>
80002504:	d000                	sw	s0,32(s0)
80002506:	d81c                	sw	a5,48(s0)
80002508:	40b2                	lw	ra,12(sp)
8000250a:	4422                	lw	s0,8(sp)
8000250c:	0141                	addi	sp,sp,16
8000250e:	8082                	ret

80002510 <__sfmoreglue>:
80002510:	1141                	addi	sp,sp,-16
80002512:	c226                	sw	s1,4(sp)
80002514:	06800613          	li	a2,104
80002518:	fff58493          	addi	s1,a1,-1
8000251c:	02c484b3          	mul	s1,s1,a2
80002520:	c04a                	sw	s2,0(sp)
80002522:	892e                	mv	s2,a1
80002524:	c422                	sw	s0,8(sp)
80002526:	c606                	sw	ra,12(sp)
80002528:	07448593          	addi	a1,s1,116
8000252c:	2a61                	jal	800026c4 <_malloc_r>
8000252e:	842a                	mv	s0,a0
80002530:	cd01                	beqz	a0,80002548 <__sfmoreglue+0x38>
80002532:	00052023          	sw	zero,0(a0)
80002536:	01252223          	sw	s2,4(a0)
8000253a:	0531                	addi	a0,a0,12
8000253c:	c408                	sw	a0,8(s0)
8000253e:	06848613          	addi	a2,s1,104
80002542:	4581                	li	a1,0
80002544:	c47ff0ef          	jal	ra,8000218a <memset>
80002548:	8522                	mv	a0,s0
8000254a:	40b2                	lw	ra,12(sp)
8000254c:	4422                	lw	s0,8(sp)
8000254e:	4492                	lw	s1,4(sp)
80002550:	4902                	lw	s2,0(sp)
80002552:	0141                	addi	sp,sp,16
80002554:	8082                	ret

80002556 <__sinit>:
80002556:	4d1c                	lw	a5,24(a0)
80002558:	e3ad                	bnez	a5,800025ba <__sinit+0x64>
8000255a:	1141                	addi	sp,sp,-16
8000255c:	c606                	sw	ra,12(sp)
8000255e:	c422                	sw	s0,8(sp)
80002560:	00000797          	auipc	a5,0x0
80002564:	f3c78793          	addi	a5,a5,-196 # 8000249c <_cleanup_r>
80002568:	d51c                	sw	a5,40(a0)
8000256a:	80c18793          	addi	a5,gp,-2036 # 90000234 <_global_impure_ptr>
8000256e:	439c                	lw	a5,0(a5)
80002570:	04052423          	sw	zero,72(a0)
80002574:	04052623          	sw	zero,76(a0)
80002578:	04052823          	sw	zero,80(a0)
8000257c:	00f51463          	bne	a0,a5,80002584 <__sinit+0x2e>
80002580:	4785                	li	a5,1
80002582:	cd1c                	sw	a5,24(a0)
80002584:	842a                	mv	s0,a0
80002586:	281d                	jal	800025bc <__sfp>
80002588:	c048                	sw	a0,4(s0)
8000258a:	8522                	mv	a0,s0
8000258c:	2805                	jal	800025bc <__sfp>
8000258e:	c408                	sw	a0,8(s0)
80002590:	8522                	mv	a0,s0
80002592:	202d                	jal	800025bc <__sfp>
80002594:	c448                	sw	a0,12(s0)
80002596:	4048                	lw	a0,4(s0)
80002598:	4601                	li	a2,0
8000259a:	4591                	li	a1,4
8000259c:	3729                	jal	800024a6 <std.isra.0>
8000259e:	4408                	lw	a0,8(s0)
800025a0:	4605                	li	a2,1
800025a2:	45a5                	li	a1,9
800025a4:	3709                	jal	800024a6 <std.isra.0>
800025a6:	4448                	lw	a0,12(s0)
800025a8:	4609                	li	a2,2
800025aa:	45c9                	li	a1,18
800025ac:	3ded                	jal	800024a6 <std.isra.0>
800025ae:	4785                	li	a5,1
800025b0:	cc1c                	sw	a5,24(s0)
800025b2:	40b2                	lw	ra,12(sp)
800025b4:	4422                	lw	s0,8(sp)
800025b6:	0141                	addi	sp,sp,16
800025b8:	8082                	ret
800025ba:	8082                	ret

800025bc <__sfp>:
800025bc:	1141                	addi	sp,sp,-16
800025be:	80c18793          	addi	a5,gp,-2036 # 90000234 <_global_impure_ptr>
800025c2:	c226                	sw	s1,4(sp)
800025c4:	4384                	lw	s1,0(a5)
800025c6:	c04a                	sw	s2,0(sp)
800025c8:	c606                	sw	ra,12(sp)
800025ca:	4c9c                	lw	a5,24(s1)
800025cc:	c422                	sw	s0,8(sp)
800025ce:	892a                	mv	s2,a0
800025d0:	e399                	bnez	a5,800025d6 <__sfp+0x1a>
800025d2:	8526                	mv	a0,s1
800025d4:	3749                	jal	80002556 <__sinit>
800025d6:	04848493          	addi	s1,s1,72
800025da:	4480                	lw	s0,8(s1)
800025dc:	40dc                	lw	a5,4(s1)
800025de:	17fd                	addi	a5,a5,-1
800025e0:	0007d663          	bgez	a5,800025ec <__sfp+0x30>
800025e4:	409c                	lw	a5,0(s1)
800025e6:	cb89                	beqz	a5,800025f8 <__sfp+0x3c>
800025e8:	4084                	lw	s1,0(s1)
800025ea:	bfc5                	j	800025da <__sfp+0x1e>
800025ec:	00c41703          	lh	a4,12(s0)
800025f0:	c705                	beqz	a4,80002618 <__sfp+0x5c>
800025f2:	06840413          	addi	s0,s0,104
800025f6:	b7e5                	j	800025de <__sfp+0x22>
800025f8:	4591                	li	a1,4
800025fa:	854a                	mv	a0,s2
800025fc:	3f11                	jal	80002510 <__sfmoreglue>
800025fe:	c088                	sw	a0,0(s1)
80002600:	f565                	bnez	a0,800025e8 <__sfp+0x2c>
80002602:	47b1                	li	a5,12
80002604:	00f92023          	sw	a5,0(s2)
80002608:	4401                	li	s0,0
8000260a:	8522                	mv	a0,s0
8000260c:	40b2                	lw	ra,12(sp)
8000260e:	4422                	lw	s0,8(sp)
80002610:	4492                	lw	s1,4(sp)
80002612:	4902                	lw	s2,0(sp)
80002614:	0141                	addi	sp,sp,16
80002616:	8082                	ret
80002618:	77c1                	lui	a5,0xffff0
8000261a:	0785                	addi	a5,a5,1
8000261c:	06042223          	sw	zero,100(s0)
80002620:	00042023          	sw	zero,0(s0)
80002624:	00042223          	sw	zero,4(s0)
80002628:	00042423          	sw	zero,8(s0)
8000262c:	c45c                	sw	a5,12(s0)
8000262e:	00042823          	sw	zero,16(s0)
80002632:	00042a23          	sw	zero,20(s0)
80002636:	00042c23          	sw	zero,24(s0)
8000263a:	4621                	li	a2,8
8000263c:	4581                	li	a1,0
8000263e:	05c40513          	addi	a0,s0,92
80002642:	b49ff0ef          	jal	ra,8000218a <memset>
80002646:	02042a23          	sw	zero,52(s0)
8000264a:	02042c23          	sw	zero,56(s0)
8000264e:	04042423          	sw	zero,72(s0)
80002652:	04042623          	sw	zero,76(s0)
80002656:	bf55                	j	8000260a <__sfp+0x4e>

80002658 <_fwalk_reent>:
80002658:	7179                	addi	sp,sp,-48
8000265a:	d422                	sw	s0,40(sp)
8000265c:	d04a                	sw	s2,32(sp)
8000265e:	cc52                	sw	s4,24(sp)
80002660:	ca56                	sw	s5,20(sp)
80002662:	c85a                	sw	s6,16(sp)
80002664:	c65e                	sw	s7,12(sp)
80002666:	d606                	sw	ra,44(sp)
80002668:	d226                	sw	s1,36(sp)
8000266a:	ce4e                	sw	s3,28(sp)
8000266c:	8a2a                	mv	s4,a0
8000266e:	8aae                	mv	s5,a1
80002670:	04850413          	addi	s0,a0,72
80002674:	4901                	li	s2,0
80002676:	4b05                	li	s6,1
80002678:	5bfd                	li	s7,-1
8000267a:	ec09                	bnez	s0,80002694 <_fwalk_reent+0x3c>
8000267c:	50b2                	lw	ra,44(sp)
8000267e:	5422                	lw	s0,40(sp)
80002680:	854a                	mv	a0,s2
80002682:	5492                	lw	s1,36(sp)
80002684:	5902                	lw	s2,32(sp)
80002686:	49f2                	lw	s3,28(sp)
80002688:	4a62                	lw	s4,24(sp)
8000268a:	4ad2                	lw	s5,20(sp)
8000268c:	4b42                	lw	s6,16(sp)
8000268e:	4bb2                	lw	s7,12(sp)
80002690:	6145                	addi	sp,sp,48
80002692:	8082                	ret
80002694:	4404                	lw	s1,8(s0)
80002696:	00442983          	lw	s3,4(s0)
8000269a:	19fd                	addi	s3,s3,-1
8000269c:	0009d463          	bgez	s3,800026a4 <_fwalk_reent+0x4c>
800026a0:	4000                	lw	s0,0(s0)
800026a2:	bfe1                	j	8000267a <_fwalk_reent+0x22>
800026a4:	00c4d783          	lhu	a5,12(s1)
800026a8:	00fb7b63          	bleu	a5,s6,800026be <_fwalk_reent+0x66>
800026ac:	00e49783          	lh	a5,14(s1)
800026b0:	01778763          	beq	a5,s7,800026be <_fwalk_reent+0x66>
800026b4:	85a6                	mv	a1,s1
800026b6:	8552                	mv	a0,s4
800026b8:	9a82                	jalr	s5
800026ba:	00a96933          	or	s2,s2,a0
800026be:	06848493          	addi	s1,s1,104
800026c2:	bfe1                	j	8000269a <_fwalk_reent+0x42>

800026c4 <_malloc_r>:
800026c4:	1101                	addi	sp,sp,-32
800026c6:	ca26                	sw	s1,20(sp)
800026c8:	00358493          	addi	s1,a1,3
800026cc:	98f1                	andi	s1,s1,-4
800026ce:	ce06                	sw	ra,28(sp)
800026d0:	cc22                	sw	s0,24(sp)
800026d2:	c84a                	sw	s2,16(sp)
800026d4:	c64e                	sw	s3,12(sp)
800026d6:	04a1                	addi	s1,s1,8
800026d8:	47b1                	li	a5,12
800026da:	04f4f363          	bleu	a5,s1,80002720 <_malloc_r+0x5c>
800026de:	44b1                	li	s1,12
800026e0:	04b4e263          	bltu	s1,a1,80002724 <_malloc_r+0x60>
800026e4:	892a                	mv	s2,a0
800026e6:	557000ef          	jal	ra,8000343c <__malloc_lock>
800026ea:	8a418793          	addi	a5,gp,-1884 # 900002cc <__malloc_free_list>
800026ee:	4380                	lw	s0,0(a5)
800026f0:	87a2                	mv	a5,s0
800026f2:	e3b9                	bnez	a5,80002738 <_malloc_r+0x74>
800026f4:	8a818793          	addi	a5,gp,-1880 # 900002d0 <__malloc_sbrk_start>
800026f8:	439c                	lw	a5,0(a5)
800026fa:	e791                	bnez	a5,80002706 <_malloc_r+0x42>
800026fc:	4581                	li	a1,0
800026fe:	854a                	mv	a0,s2
80002700:	2785                	jal	80002e60 <_sbrk_r>
80002702:	8aa1a423          	sw	a0,-1880(gp) # 900002d0 <__malloc_sbrk_start>
80002706:	85a6                	mv	a1,s1
80002708:	854a                	mv	a0,s2
8000270a:	2f99                	jal	80002e60 <_sbrk_r>
8000270c:	59fd                	li	s3,-1
8000270e:	07351c63          	bne	a0,s3,80002786 <_malloc_r+0xc2>
80002712:	47b1                	li	a5,12
80002714:	00f92023          	sw	a5,0(s2)
80002718:	854a                	mv	a0,s2
8000271a:	525000ef          	jal	ra,8000343e <__malloc_unlock>
8000271e:	a029                	j	80002728 <_malloc_r+0x64>
80002720:	fc04d0e3          	bgez	s1,800026e0 <_malloc_r+0x1c>
80002724:	47b1                	li	a5,12
80002726:	c11c                	sw	a5,0(a0)
80002728:	4501                	li	a0,0
8000272a:	40f2                	lw	ra,28(sp)
8000272c:	4462                	lw	s0,24(sp)
8000272e:	44d2                	lw	s1,20(sp)
80002730:	4942                	lw	s2,16(sp)
80002732:	49b2                	lw	s3,12(sp)
80002734:	6105                	addi	sp,sp,32
80002736:	8082                	ret
80002738:	4398                	lw	a4,0(a5)
8000273a:	8f05                	sub	a4,a4,s1
8000273c:	04074263          	bltz	a4,80002780 <_malloc_r+0xbc>
80002740:	46ad                	li	a3,11
80002742:	00e6f763          	bleu	a4,a3,80002750 <_malloc_r+0x8c>
80002746:	c398                	sw	a4,0(a5)
80002748:	00e78433          	add	s0,a5,a4
8000274c:	c004                	sw	s1,0(s0)
8000274e:	a031                	j	8000275a <_malloc_r+0x96>
80002750:	43d8                	lw	a4,4(a5)
80002752:	02f41463          	bne	s0,a5,8000277a <_malloc_r+0xb6>
80002756:	8ae1a223          	sw	a4,-1884(gp) # 900002cc <__malloc_free_list>
8000275a:	854a                	mv	a0,s2
8000275c:	4e3000ef          	jal	ra,8000343e <__malloc_unlock>
80002760:	00b40513          	addi	a0,s0,11
80002764:	00440793          	addi	a5,s0,4
80002768:	9961                	andi	a0,a0,-8
8000276a:	40f507b3          	sub	a5,a0,a5
8000276e:	dfd5                	beqz	a5,8000272a <_malloc_r+0x66>
80002770:	943e                	add	s0,s0,a5
80002772:	40f007b3          	neg	a5,a5
80002776:	c01c                	sw	a5,0(s0)
80002778:	bf4d                	j	8000272a <_malloc_r+0x66>
8000277a:	c058                	sw	a4,4(s0)
8000277c:	843e                	mv	s0,a5
8000277e:	bff1                	j	8000275a <_malloc_r+0x96>
80002780:	843e                	mv	s0,a5
80002782:	43dc                	lw	a5,4(a5)
80002784:	b7bd                	j	800026f2 <_malloc_r+0x2e>
80002786:	00350413          	addi	s0,a0,3
8000278a:	9871                	andi	s0,s0,-4
8000278c:	fc8500e3          	beq	a0,s0,8000274c <_malloc_r+0x88>
80002790:	40a405b3          	sub	a1,s0,a0
80002794:	854a                	mv	a0,s2
80002796:	25e9                	jal	80002e60 <_sbrk_r>
80002798:	fb351ae3          	bne	a0,s3,8000274c <_malloc_r+0x88>
8000279c:	bf9d                	j	80002712 <_malloc_r+0x4e>

8000279e <__sfputc_r>:
8000279e:	461c                	lw	a5,8(a2)
800027a0:	17fd                	addi	a5,a5,-1
800027a2:	c61c                	sw	a5,8(a2)
800027a4:	0007d963          	bgez	a5,800027b6 <__sfputc_r+0x18>
800027a8:	4e18                	lw	a4,24(a2)
800027aa:	00e7c563          	blt	a5,a4,800027b4 <__sfputc_r+0x16>
800027ae:	47a9                	li	a5,10
800027b0:	00f59363          	bne	a1,a5,800027b6 <__sfputc_r+0x18>
800027b4:	af69                	j	80002f4e <__swbuf_r>
800027b6:	421c                	lw	a5,0(a2)
800027b8:	852e                	mv	a0,a1
800027ba:	00178713          	addi	a4,a5,1 # ffff0001 <_sp+0x6ffe0001>
800027be:	c218                	sw	a4,0(a2)
800027c0:	00b78023          	sb	a1,0(a5)
800027c4:	8082                	ret

800027c6 <__sfputs_r>:
800027c6:	1101                	addi	sp,sp,-32
800027c8:	cc22                	sw	s0,24(sp)
800027ca:	ca26                	sw	s1,20(sp)
800027cc:	c84a                	sw	s2,16(sp)
800027ce:	c64e                	sw	s3,12(sp)
800027d0:	c452                	sw	s4,8(sp)
800027d2:	ce06                	sw	ra,28(sp)
800027d4:	892a                	mv	s2,a0
800027d6:	89ae                	mv	s3,a1
800027d8:	8432                	mv	s0,a2
800027da:	00d604b3          	add	s1,a2,a3
800027de:	5a7d                	li	s4,-1
800027e0:	00941463          	bne	s0,s1,800027e8 <__sfputs_r+0x22>
800027e4:	4501                	li	a0,0
800027e6:	a809                	j	800027f8 <__sfputs_r+0x32>
800027e8:	00044583          	lbu	a1,0(s0)
800027ec:	864e                	mv	a2,s3
800027ee:	854a                	mv	a0,s2
800027f0:	377d                	jal	8000279e <__sfputc_r>
800027f2:	0405                	addi	s0,s0,1
800027f4:	ff4516e3          	bne	a0,s4,800027e0 <__sfputs_r+0x1a>
800027f8:	40f2                	lw	ra,28(sp)
800027fa:	4462                	lw	s0,24(sp)
800027fc:	44d2                	lw	s1,20(sp)
800027fe:	4942                	lw	s2,16(sp)
80002800:	49b2                	lw	s3,12(sp)
80002802:	4a22                	lw	s4,8(sp)
80002804:	6105                	addi	sp,sp,32
80002806:	8082                	ret

80002808 <_vfiprintf_r>:
80002808:	7135                	addi	sp,sp,-160
8000280a:	cb26                	sw	s1,148(sp)
8000280c:	c94a                	sw	s2,144(sp)
8000280e:	c74e                	sw	s3,140(sp)
80002810:	cf06                	sw	ra,156(sp)
80002812:	cd22                	sw	s0,152(sp)
80002814:	c552                	sw	s4,136(sp)
80002816:	c356                	sw	s5,132(sp)
80002818:	c15a                	sw	s6,128(sp)
8000281a:	dede                	sw	s7,124(sp)
8000281c:	dce2                	sw	s8,120(sp)
8000281e:	dae6                	sw	s9,116(sp)
80002820:	c636                	sw	a3,12(sp)
80002822:	89aa                	mv	s3,a0
80002824:	84ae                	mv	s1,a1
80002826:	8932                	mv	s2,a2
80002828:	c509                	beqz	a0,80002832 <_vfiprintf_r+0x2a>
8000282a:	4d1c                	lw	a5,24(a0)
8000282c:	e399                	bnez	a5,80002832 <_vfiprintf_r+0x2a>
8000282e:	d29ff0ef          	jal	ra,80002556 <__sinit>
80002832:	0fffe797          	auipc	a5,0xfffe
80002836:	91678793          	addi	a5,a5,-1770 # 90000148 <__sf_fake_stdin>
8000283a:	0cf49b63          	bne	s1,a5,80002910 <_vfiprintf_r+0x108>
8000283e:	0049a483          	lw	s1,4(s3)
80002842:	00c4d783          	lhu	a5,12(s1)
80002846:	8ba1                	andi	a5,a5,8
80002848:	c7f5                	beqz	a5,80002934 <_vfiprintf_r+0x12c>
8000284a:	489c                	lw	a5,16(s1)
8000284c:	c7e5                	beqz	a5,80002934 <_vfiprintf_r+0x12c>
8000284e:	02000793          	li	a5,32
80002852:	02f104a3          	sb	a5,41(sp)
80002856:	03000793          	li	a5,48
8000285a:	d202                	sw	zero,36(sp)
8000285c:	02f10523          	sb	a5,42(sp)
80002860:	02500b93          	li	s7,37
80002864:	0fffea97          	auipc	s5,0xfffe
80002868:	924a8a93          	addi	s5,s5,-1756 # 90000188 <__sf_fake_stdout+0x20>
8000286c:	4c05                	li	s8,1
8000286e:	4b29                	li	s6,10
80002870:	844a                	mv	s0,s2
80002872:	00044783          	lbu	a5,0(s0)
80002876:	c399                	beqz	a5,8000287c <_vfiprintf_r+0x74>
80002878:	0f779063          	bne	a5,s7,80002958 <_vfiprintf_r+0x150>
8000287c:	41240cb3          	sub	s9,s0,s2
80002880:	000c8d63          	beqz	s9,8000289a <_vfiprintf_r+0x92>
80002884:	86e6                	mv	a3,s9
80002886:	864a                	mv	a2,s2
80002888:	85a6                	mv	a1,s1
8000288a:	854e                	mv	a0,s3
8000288c:	3f2d                	jal	800027c6 <__sfputs_r>
8000288e:	57fd                	li	a5,-1
80002890:	1ef50863          	beq	a0,a5,80002a80 <_vfiprintf_r+0x278>
80002894:	5692                	lw	a3,36(sp)
80002896:	96e6                	add	a3,a3,s9
80002898:	d236                	sw	a3,36(sp)
8000289a:	00044783          	lbu	a5,0(s0)
8000289e:	1e078163          	beqz	a5,80002a80 <_vfiprintf_r+0x278>
800028a2:	57fd                	li	a5,-1
800028a4:	00140913          	addi	s2,s0,1
800028a8:	c802                	sw	zero,16(sp)
800028aa:	ce02                	sw	zero,28(sp)
800028ac:	ca3e                	sw	a5,20(sp)
800028ae:	cc02                	sw	zero,24(sp)
800028b0:	040109a3          	sb	zero,83(sp)
800028b4:	d482                	sw	zero,104(sp)
800028b6:	00094583          	lbu	a1,0(s2)
800028ba:	4615                	li	a2,5
800028bc:	8556                	mv	a0,s5
800028be:	365000ef          	jal	ra,80003422 <memchr>
800028c2:	00190413          	addi	s0,s2,1
800028c6:	47c2                	lw	a5,16(sp)
800028c8:	e951                	bnez	a0,8000295c <_vfiprintf_r+0x154>
800028ca:	0107f713          	andi	a4,a5,16
800028ce:	c709                	beqz	a4,800028d8 <_vfiprintf_r+0xd0>
800028d0:	02000713          	li	a4,32
800028d4:	04e109a3          	sb	a4,83(sp)
800028d8:	0087f713          	andi	a4,a5,8
800028dc:	c709                	beqz	a4,800028e6 <_vfiprintf_r+0xde>
800028de:	02b00713          	li	a4,43
800028e2:	04e109a3          	sb	a4,83(sp)
800028e6:	00094683          	lbu	a3,0(s2)
800028ea:	02a00713          	li	a4,42
800028ee:	06e68f63          	beq	a3,a4,8000296c <_vfiprintf_r+0x164>
800028f2:	47f2                	lw	a5,28(sp)
800028f4:	844a                	mv	s0,s2
800028f6:	4681                	li	a3,0
800028f8:	4625                	li	a2,9
800028fa:	00044703          	lbu	a4,0(s0)
800028fe:	00140593          	addi	a1,s0,1
80002902:	fd070713          	addi	a4,a4,-48
80002906:	0ae67863          	bleu	a4,a2,800029b6 <_vfiprintf_r+0x1ae>
8000290a:	caad                	beqz	a3,8000297c <_vfiprintf_r+0x174>
8000290c:	ce3e                	sw	a5,28(sp)
8000290e:	a0bd                	j	8000297c <_vfiprintf_r+0x174>
80002910:	0fffe797          	auipc	a5,0xfffe
80002914:	85878793          	addi	a5,a5,-1960 # 90000168 <__sf_fake_stdout>
80002918:	00f49563          	bne	s1,a5,80002922 <_vfiprintf_r+0x11a>
8000291c:	0089a483          	lw	s1,8(s3)
80002920:	b70d                	j	80002842 <_vfiprintf_r+0x3a>
80002922:	0fffe797          	auipc	a5,0xfffe
80002926:	80678793          	addi	a5,a5,-2042 # 90000128 <__sf_fake_stderr>
8000292a:	f0f49ce3          	bne	s1,a5,80002842 <_vfiprintf_r+0x3a>
8000292e:	00c9a483          	lw	s1,12(s3)
80002932:	bf01                	j	80002842 <_vfiprintf_r+0x3a>
80002934:	85a6                	mv	a1,s1
80002936:	854e                	mv	a0,s3
80002938:	2de1                	jal	80003010 <__swsetup_r>
8000293a:	d911                	beqz	a0,8000284e <_vfiprintf_r+0x46>
8000293c:	557d                	li	a0,-1
8000293e:	40fa                	lw	ra,156(sp)
80002940:	446a                	lw	s0,152(sp)
80002942:	44da                	lw	s1,148(sp)
80002944:	494a                	lw	s2,144(sp)
80002946:	49ba                	lw	s3,140(sp)
80002948:	4a2a                	lw	s4,136(sp)
8000294a:	4a9a                	lw	s5,132(sp)
8000294c:	4b0a                	lw	s6,128(sp)
8000294e:	5bf6                	lw	s7,124(sp)
80002950:	5c66                	lw	s8,120(sp)
80002952:	5cd6                	lw	s9,116(sp)
80002954:	610d                	addi	sp,sp,160
80002956:	8082                	ret
80002958:	0405                	addi	s0,s0,1
8000295a:	bf21                	j	80002872 <_vfiprintf_r+0x6a>
8000295c:	41550533          	sub	a0,a0,s5
80002960:	00ac1533          	sll	a0,s8,a0
80002964:	8fc9                	or	a5,a5,a0
80002966:	c83e                	sw	a5,16(sp)
80002968:	8922                	mv	s2,s0
8000296a:	b7b1                	j	800028b6 <_vfiprintf_r+0xae>
8000296c:	4732                	lw	a4,12(sp)
8000296e:	00470693          	addi	a3,a4,4
80002972:	4318                	lw	a4,0(a4)
80002974:	c636                	sw	a3,12(sp)
80002976:	02074963          	bltz	a4,800029a8 <_vfiprintf_r+0x1a0>
8000297a:	ce3a                	sw	a4,28(sp)
8000297c:	00044703          	lbu	a4,0(s0)
80002980:	02e00793          	li	a5,46
80002984:	04f71f63          	bne	a4,a5,800029e2 <_vfiprintf_r+0x1da>
80002988:	00144703          	lbu	a4,1(s0)
8000298c:	02a00793          	li	a5,42
80002990:	02f71b63          	bne	a4,a5,800029c6 <_vfiprintf_r+0x1be>
80002994:	47b2                	lw	a5,12(sp)
80002996:	0409                	addi	s0,s0,2
80002998:	00478713          	addi	a4,a5,4
8000299c:	439c                	lw	a5,0(a5)
8000299e:	c63a                	sw	a4,12(sp)
800029a0:	0207c163          	bltz	a5,800029c2 <_vfiprintf_r+0x1ba>
800029a4:	ca3e                	sw	a5,20(sp)
800029a6:	a835                	j	800029e2 <_vfiprintf_r+0x1da>
800029a8:	40e00733          	neg	a4,a4
800029ac:	0027e793          	ori	a5,a5,2
800029b0:	ce3a                	sw	a4,28(sp)
800029b2:	c83e                	sw	a5,16(sp)
800029b4:	b7e1                	j	8000297c <_vfiprintf_r+0x174>
800029b6:	036787b3          	mul	a5,a5,s6
800029ba:	4685                	li	a3,1
800029bc:	842e                	mv	s0,a1
800029be:	97ba                	add	a5,a5,a4
800029c0:	bf2d                	j	800028fa <_vfiprintf_r+0xf2>
800029c2:	57fd                	li	a5,-1
800029c4:	b7c5                	j	800029a4 <_vfiprintf_r+0x19c>
800029c6:	0405                	addi	s0,s0,1
800029c8:	ca02                	sw	zero,20(sp)
800029ca:	4681                	li	a3,0
800029cc:	4781                	li	a5,0
800029ce:	4625                	li	a2,9
800029d0:	00044703          	lbu	a4,0(s0)
800029d4:	00140593          	addi	a1,s0,1
800029d8:	fd070713          	addi	a4,a4,-48
800029dc:	06e67863          	bleu	a4,a2,80002a4c <_vfiprintf_r+0x244>
800029e0:	f2f1                	bnez	a3,800029a4 <_vfiprintf_r+0x19c>
800029e2:	00044583          	lbu	a1,0(s0)
800029e6:	460d                	li	a2,3
800029e8:	0fffd517          	auipc	a0,0xfffd
800029ec:	7a850513          	addi	a0,a0,1960 # 90000190 <__sf_fake_stdout+0x28>
800029f0:	233000ef          	jal	ra,80003422 <memchr>
800029f4:	cd11                	beqz	a0,80002a10 <_vfiprintf_r+0x208>
800029f6:	0fffd797          	auipc	a5,0xfffd
800029fa:	79a78793          	addi	a5,a5,1946 # 90000190 <__sf_fake_stdout+0x28>
800029fe:	8d1d                	sub	a0,a0,a5
80002a00:	04000793          	li	a5,64
80002a04:	00a797b3          	sll	a5,a5,a0
80002a08:	4542                	lw	a0,16(sp)
80002a0a:	0405                	addi	s0,s0,1
80002a0c:	8d5d                	or	a0,a0,a5
80002a0e:	c82a                	sw	a0,16(sp)
80002a10:	00044583          	lbu	a1,0(s0)
80002a14:	4619                	li	a2,6
80002a16:	0fffd517          	auipc	a0,0xfffd
80002a1a:	77e50513          	addi	a0,a0,1918 # 90000194 <__sf_fake_stdout+0x2c>
80002a1e:	00140913          	addi	s2,s0,1
80002a22:	02b10423          	sb	a1,40(sp)
80002a26:	1fd000ef          	jal	ra,80003422 <memchr>
80002a2a:	c13d                	beqz	a0,80002a90 <_vfiprintf_r+0x288>
80002a2c:	7fffd797          	auipc	a5,0x7fffd
80002a30:	5d478793          	addi	a5,a5,1492 # 0 <_sp+0x6fff0000>
80002a34:	e795                	bnez	a5,80002a60 <_vfiprintf_r+0x258>
80002a36:	4742                	lw	a4,16(sp)
80002a38:	47b2                	lw	a5,12(sp)
80002a3a:	10077713          	andi	a4,a4,256
80002a3e:	cf09                	beqz	a4,80002a58 <_vfiprintf_r+0x250>
80002a40:	0791                	addi	a5,a5,4
80002a42:	c63e                	sw	a5,12(sp)
80002a44:	5792                	lw	a5,36(sp)
80002a46:	97d2                	add	a5,a5,s4
80002a48:	d23e                	sw	a5,36(sp)
80002a4a:	b51d                	j	80002870 <_vfiprintf_r+0x68>
80002a4c:	036787b3          	mul	a5,a5,s6
80002a50:	4685                	li	a3,1
80002a52:	842e                	mv	s0,a1
80002a54:	97ba                	add	a5,a5,a4
80002a56:	bfad                	j	800029d0 <_vfiprintf_r+0x1c8>
80002a58:	079d                	addi	a5,a5,7
80002a5a:	9be1                	andi	a5,a5,-8
80002a5c:	07a1                	addi	a5,a5,8
80002a5e:	b7d5                	j	80002a42 <_vfiprintf_r+0x23a>
80002a60:	0078                	addi	a4,sp,12
80002a62:	00000697          	auipc	a3,0x0
80002a66:	d6468693          	addi	a3,a3,-668 # 800027c6 <__sfputs_r>
80002a6a:	8626                	mv	a2,s1
80002a6c:	080c                	addi	a1,sp,16
80002a6e:	854e                	mv	a0,s3
80002a70:	7fffd097          	auipc	ra,0x7fffd
80002a74:	590080e7          	jalr	1424(ra) # 0 <_sp+0x6fff0000>
80002a78:	57fd                	li	a5,-1
80002a7a:	8a2a                	mv	s4,a0
80002a7c:	fcf514e3          	bne	a0,a5,80002a44 <_vfiprintf_r+0x23c>
80002a80:	00c4d783          	lhu	a5,12(s1)
80002a84:	0407f793          	andi	a5,a5,64
80002a88:	ea079ae3          	bnez	a5,8000293c <_vfiprintf_r+0x134>
80002a8c:	5512                	lw	a0,36(sp)
80002a8e:	bd45                	j	8000293e <_vfiprintf_r+0x136>
80002a90:	0078                	addi	a4,sp,12
80002a92:	00000697          	auipc	a3,0x0
80002a96:	d3468693          	addi	a3,a3,-716 # 800027c6 <__sfputs_r>
80002a9a:	8626                	mv	a2,s1
80002a9c:	080c                	addi	a1,sp,16
80002a9e:	854e                	mv	a0,s3
80002aa0:	2a01                	jal	80002bb0 <_printf_i>
80002aa2:	bfd9                	j	80002a78 <_vfiprintf_r+0x270>

80002aa4 <_printf_common>:
80002aa4:	7179                	addi	sp,sp,-48
80002aa6:	ca56                	sw	s5,20(sp)
80002aa8:	499c                	lw	a5,16(a1)
80002aaa:	8aba                	mv	s5,a4
80002aac:	4598                	lw	a4,8(a1)
80002aae:	d422                	sw	s0,40(sp)
80002ab0:	d226                	sw	s1,36(sp)
80002ab2:	ce4e                	sw	s3,28(sp)
80002ab4:	cc52                	sw	s4,24(sp)
80002ab6:	d606                	sw	ra,44(sp)
80002ab8:	d04a                	sw	s2,32(sp)
80002aba:	c85a                	sw	s6,16(sp)
80002abc:	c65e                	sw	s7,12(sp)
80002abe:	89aa                	mv	s3,a0
80002ac0:	842e                	mv	s0,a1
80002ac2:	84b2                	mv	s1,a2
80002ac4:	8a36                	mv	s4,a3
80002ac6:	00e7d363          	ble	a4,a5,80002acc <_printf_common+0x28>
80002aca:	87ba                	mv	a5,a4
80002acc:	c09c                	sw	a5,0(s1)
80002ace:	04344703          	lbu	a4,67(s0)
80002ad2:	c319                	beqz	a4,80002ad8 <_printf_common+0x34>
80002ad4:	0785                	addi	a5,a5,1
80002ad6:	c09c                	sw	a5,0(s1)
80002ad8:	401c                	lw	a5,0(s0)
80002ada:	0207f793          	andi	a5,a5,32
80002ade:	c781                	beqz	a5,80002ae6 <_printf_common+0x42>
80002ae0:	409c                	lw	a5,0(s1)
80002ae2:	0789                	addi	a5,a5,2
80002ae4:	c09c                	sw	a5,0(s1)
80002ae6:	00042903          	lw	s2,0(s0)
80002aea:	00697913          	andi	s2,s2,6
80002aee:	00091a63          	bnez	s2,80002b02 <_printf_common+0x5e>
80002af2:	01940b13          	addi	s6,s0,25
80002af6:	5bfd                	li	s7,-1
80002af8:	445c                	lw	a5,12(s0)
80002afa:	4098                	lw	a4,0(s1)
80002afc:	8f99                	sub	a5,a5,a4
80002afe:	04f94c63          	blt	s2,a5,80002b56 <_printf_common+0xb2>
80002b02:	401c                	lw	a5,0(s0)
80002b04:	04344683          	lbu	a3,67(s0)
80002b08:	0207f793          	andi	a5,a5,32
80002b0c:	00d036b3          	snez	a3,a3
80002b10:	eba5                	bnez	a5,80002b80 <_printf_common+0xdc>
80002b12:	04340613          	addi	a2,s0,67
80002b16:	85d2                	mv	a1,s4
80002b18:	854e                	mv	a0,s3
80002b1a:	9a82                	jalr	s5
80002b1c:	57fd                	li	a5,-1
80002b1e:	04f50363          	beq	a0,a5,80002b64 <_printf_common+0xc0>
80002b22:	401c                	lw	a5,0(s0)
80002b24:	4611                	li	a2,4
80002b26:	4098                	lw	a4,0(s1)
80002b28:	8b99                	andi	a5,a5,6
80002b2a:	4454                	lw	a3,12(s0)
80002b2c:	4481                	li	s1,0
80002b2e:	00c79763          	bne	a5,a2,80002b3c <_printf_common+0x98>
80002b32:	40e684b3          	sub	s1,a3,a4
80002b36:	0004d363          	bgez	s1,80002b3c <_printf_common+0x98>
80002b3a:	4481                	li	s1,0
80002b3c:	441c                	lw	a5,8(s0)
80002b3e:	4818                	lw	a4,16(s0)
80002b40:	00f75463          	ble	a5,a4,80002b48 <_printf_common+0xa4>
80002b44:	8f99                	sub	a5,a5,a4
80002b46:	94be                	add	s1,s1,a5
80002b48:	4901                	li	s2,0
80002b4a:	0469                	addi	s0,s0,26
80002b4c:	5b7d                	li	s6,-1
80002b4e:	05249863          	bne	s1,s2,80002b9e <_printf_common+0xfa>
80002b52:	4501                	li	a0,0
80002b54:	a809                	j	80002b66 <_printf_common+0xc2>
80002b56:	4685                	li	a3,1
80002b58:	865a                	mv	a2,s6
80002b5a:	85d2                	mv	a1,s4
80002b5c:	854e                	mv	a0,s3
80002b5e:	9a82                	jalr	s5
80002b60:	01751e63          	bne	a0,s7,80002b7c <_printf_common+0xd8>
80002b64:	557d                	li	a0,-1
80002b66:	50b2                	lw	ra,44(sp)
80002b68:	5422                	lw	s0,40(sp)
80002b6a:	5492                	lw	s1,36(sp)
80002b6c:	5902                	lw	s2,32(sp)
80002b6e:	49f2                	lw	s3,28(sp)
80002b70:	4a62                	lw	s4,24(sp)
80002b72:	4ad2                	lw	s5,20(sp)
80002b74:	4b42                	lw	s6,16(sp)
80002b76:	4bb2                	lw	s7,12(sp)
80002b78:	6145                	addi	sp,sp,48
80002b7a:	8082                	ret
80002b7c:	0905                	addi	s2,s2,1
80002b7e:	bfad                	j	80002af8 <_printf_common+0x54>
80002b80:	00d40733          	add	a4,s0,a3
80002b84:	03000613          	li	a2,48
80002b88:	04c701a3          	sb	a2,67(a4)
80002b8c:	04544703          	lbu	a4,69(s0)
80002b90:	00168793          	addi	a5,a3,1
80002b94:	97a2                	add	a5,a5,s0
80002b96:	0689                	addi	a3,a3,2
80002b98:	04e781a3          	sb	a4,67(a5)
80002b9c:	bf9d                	j	80002b12 <_printf_common+0x6e>
80002b9e:	4685                	li	a3,1
80002ba0:	8622                	mv	a2,s0
80002ba2:	85d2                	mv	a1,s4
80002ba4:	854e                	mv	a0,s3
80002ba6:	9a82                	jalr	s5
80002ba8:	fb650ee3          	beq	a0,s6,80002b64 <_printf_common+0xc0>
80002bac:	0905                	addi	s2,s2,1
80002bae:	b745                	j	80002b4e <_printf_common+0xaa>

80002bb0 <_printf_i>:
80002bb0:	7179                	addi	sp,sp,-48
80002bb2:	d422                	sw	s0,40(sp)
80002bb4:	d04a                	sw	s2,32(sp)
80002bb6:	ce4e                	sw	s3,28(sp)
80002bb8:	cc52                	sw	s4,24(sp)
80002bba:	d606                	sw	ra,44(sp)
80002bbc:	d226                	sw	s1,36(sp)
80002bbe:	ca56                	sw	s5,20(sp)
80002bc0:	c85a                	sw	s6,16(sp)
80002bc2:	8a36                	mv	s4,a3
80002bc4:	0185c683          	lbu	a3,24(a1)
80002bc8:	06e00793          	li	a5,110
80002bcc:	89b2                	mv	s3,a2
80002bce:	892a                	mv	s2,a0
80002bd0:	842e                	mv	s0,a1
80002bd2:	04358613          	addi	a2,a1,67
80002bd6:	18f68563          	beq	a3,a5,80002d60 <_printf_i+0x1b0>
80002bda:	06d7e263          	bltu	a5,a3,80002c3e <_printf_i+0x8e>
80002bde:	06300793          	li	a5,99
80002be2:	0af68263          	beq	a3,a5,80002c86 <_printf_i+0xd6>
80002be6:	00d7ed63          	bltu	a5,a3,80002c00 <_printf_i+0x50>
80002bea:	18068f63          	beqz	a3,80002d88 <_printf_i+0x1d8>
80002bee:	05800793          	li	a5,88
80002bf2:	10f68c63          	beq	a3,a5,80002d0a <_printf_i+0x15a>
80002bf6:	04240493          	addi	s1,s0,66
80002bfa:	04d40123          	sb	a3,66(s0)
80002bfe:	a869                	j	80002c98 <_printf_i+0xe8>
80002c00:	06400793          	li	a5,100
80002c04:	00f68663          	beq	a3,a5,80002c10 <_printf_i+0x60>
80002c08:	06900793          	li	a5,105
80002c0c:	fef695e3          	bne	a3,a5,80002bf6 <_printf_i+0x46>
80002c10:	401c                	lw	a5,0(s0)
80002c12:	4308                	lw	a0,0(a4)
80002c14:	0807f693          	andi	a3,a5,128
80002c18:	00450593          	addi	a1,a0,4
80002c1c:	c2c1                	beqz	a3,80002c9c <_printf_i+0xec>
80002c1e:	411c                	lw	a5,0(a0)
80002c20:	c30c                	sw	a1,0(a4)
80002c22:	0007d863          	bgez	a5,80002c32 <_printf_i+0x82>
80002c26:	02d00713          	li	a4,45
80002c2a:	40f007b3          	neg	a5,a5
80002c2e:	04e401a3          	sb	a4,67(s0)
80002c32:	0fffd697          	auipc	a3,0xfffd
80002c36:	56a68693          	addi	a3,a3,1386 # 9000019c <__sf_fake_stdout+0x34>
80002c3a:	4729                	li	a4,10
80002c3c:	a065                	j	80002ce4 <_printf_i+0x134>
80002c3e:	07300793          	li	a5,115
80002c42:	14f68763          	beq	a3,a5,80002d90 <_printf_i+0x1e0>
80002c46:	00d7ef63          	bltu	a5,a3,80002c64 <_printf_i+0xb4>
80002c4a:	06f00793          	li	a5,111
80002c4e:	04f68f63          	beq	a3,a5,80002cac <_printf_i+0xfc>
80002c52:	07000793          	li	a5,112
80002c56:	faf690e3          	bne	a3,a5,80002bf6 <_printf_i+0x46>
80002c5a:	419c                	lw	a5,0(a1)
80002c5c:	0207e793          	ori	a5,a5,32
80002c60:	c19c                	sw	a5,0(a1)
80002c62:	a809                	j	80002c74 <_printf_i+0xc4>
80002c64:	07500793          	li	a5,117
80002c68:	04f68263          	beq	a3,a5,80002cac <_printf_i+0xfc>
80002c6c:	07800793          	li	a5,120
80002c70:	f8f693e3          	bne	a3,a5,80002bf6 <_printf_i+0x46>
80002c74:	07800793          	li	a5,120
80002c78:	04f402a3          	sb	a5,69(s0)
80002c7c:	0fffd697          	auipc	a3,0xfffd
80002c80:	53468693          	addi	a3,a3,1332 # 900001b0 <__sf_fake_stdout+0x48>
80002c84:	a849                	j	80002d16 <_printf_i+0x166>
80002c86:	431c                	lw	a5,0(a4)
80002c88:	04258493          	addi	s1,a1,66
80002c8c:	00478693          	addi	a3,a5,4
80002c90:	439c                	lw	a5,0(a5)
80002c92:	c314                	sw	a3,0(a4)
80002c94:	04f58123          	sb	a5,66(a1)
80002c98:	4785                	li	a5,1
80002c9a:	aa01                	j	80002daa <_printf_i+0x1fa>
80002c9c:	0407f693          	andi	a3,a5,64
80002ca0:	411c                	lw	a5,0(a0)
80002ca2:	c30c                	sw	a1,0(a4)
80002ca4:	debd                	beqz	a3,80002c22 <_printf_i+0x72>
80002ca6:	07c2                	slli	a5,a5,0x10
80002ca8:	87c1                	srai	a5,a5,0x10
80002caa:	bfa5                	j	80002c22 <_printf_i+0x72>
80002cac:	400c                	lw	a1,0(s0)
80002cae:	431c                	lw	a5,0(a4)
80002cb0:	0805f813          	andi	a6,a1,128
80002cb4:	00478513          	addi	a0,a5,4
80002cb8:	00080563          	beqz	a6,80002cc2 <_printf_i+0x112>
80002cbc:	c308                	sw	a0,0(a4)
80002cbe:	439c                	lw	a5,0(a5)
80002cc0:	a039                	j	80002cce <_printf_i+0x11e>
80002cc2:	0405f593          	andi	a1,a1,64
80002cc6:	c308                	sw	a0,0(a4)
80002cc8:	d9fd                	beqz	a1,80002cbe <_printf_i+0x10e>
80002cca:	0007d783          	lhu	a5,0(a5)
80002cce:	06f00713          	li	a4,111
80002cd2:	08e69163          	bne	a3,a4,80002d54 <_printf_i+0x1a4>
80002cd6:	0fffd697          	auipc	a3,0xfffd
80002cda:	4c668693          	addi	a3,a3,1222 # 9000019c <__sf_fake_stdout+0x34>
80002cde:	4721                	li	a4,8
80002ce0:	040401a3          	sb	zero,67(s0)
80002ce4:	404c                	lw	a1,4(s0)
80002ce6:	c40c                	sw	a1,8(s0)
80002ce8:	1005c863          	bltz	a1,80002df8 <_printf_i+0x248>
80002cec:	4008                	lw	a0,0(s0)
80002cee:	996d                	andi	a0,a0,-5
80002cf0:	c008                	sw	a0,0(s0)
80002cf2:	10079563          	bnez	a5,80002dfc <_printf_i+0x24c>
80002cf6:	84b2                	mv	s1,a2
80002cf8:	10058e63          	beqz	a1,80002e14 <_printf_i+0x264>
80002cfc:	0006c783          	lbu	a5,0(a3)
80002d00:	04240493          	addi	s1,s0,66
80002d04:	04f40123          	sb	a5,66(s0)
80002d08:	a231                	j	80002e14 <_printf_i+0x264>
80002d0a:	04d582a3          	sb	a3,69(a1)
80002d0e:	0fffd697          	auipc	a3,0xfffd
80002d12:	48e68693          	addi	a3,a3,1166 # 9000019c <__sf_fake_stdout+0x34>
80002d16:	400c                	lw	a1,0(s0)
80002d18:	431c                	lw	a5,0(a4)
80002d1a:	0805f813          	andi	a6,a1,128
80002d1e:	00478513          	addi	a0,a5,4
80002d22:	439c                	lw	a5,0(a5)
80002d24:	02080063          	beqz	a6,80002d44 <_printf_i+0x194>
80002d28:	c308                	sw	a0,0(a4)
80002d2a:	0015f713          	andi	a4,a1,1
80002d2e:	c701                	beqz	a4,80002d36 <_printf_i+0x186>
80002d30:	0205e593          	ori	a1,a1,32
80002d34:	c00c                	sw	a1,0(s0)
80002d36:	4741                	li	a4,16
80002d38:	f7c5                	bnez	a5,80002ce0 <_printf_i+0x130>
80002d3a:	400c                	lw	a1,0(s0)
80002d3c:	fdf5f593          	andi	a1,a1,-33
80002d40:	c00c                	sw	a1,0(s0)
80002d42:	bf79                	j	80002ce0 <_printf_i+0x130>
80002d44:	0405f813          	andi	a6,a1,64
80002d48:	c308                	sw	a0,0(a4)
80002d4a:	fe0800e3          	beqz	a6,80002d2a <_printf_i+0x17a>
80002d4e:	07c2                	slli	a5,a5,0x10
80002d50:	83c1                	srli	a5,a5,0x10
80002d52:	bfe1                	j	80002d2a <_printf_i+0x17a>
80002d54:	0fffd697          	auipc	a3,0xfffd
80002d58:	44868693          	addi	a3,a3,1096 # 9000019c <__sf_fake_stdout+0x34>
80002d5c:	4729                	li	a4,10
80002d5e:	b749                	j	80002ce0 <_printf_i+0x130>
80002d60:	4194                	lw	a3,0(a1)
80002d62:	431c                	lw	a5,0(a4)
80002d64:	49cc                	lw	a1,20(a1)
80002d66:	0806f813          	andi	a6,a3,128
80002d6a:	00478513          	addi	a0,a5,4
80002d6e:	00080663          	beqz	a6,80002d7a <_printf_i+0x1ca>
80002d72:	c308                	sw	a0,0(a4)
80002d74:	439c                	lw	a5,0(a5)
80002d76:	c38c                	sw	a1,0(a5)
80002d78:	a801                	j	80002d88 <_printf_i+0x1d8>
80002d7a:	c308                	sw	a0,0(a4)
80002d7c:	0406f693          	andi	a3,a3,64
80002d80:	439c                	lw	a5,0(a5)
80002d82:	daf5                	beqz	a3,80002d76 <_printf_i+0x1c6>
80002d84:	00b79023          	sh	a1,0(a5)
80002d88:	00042823          	sw	zero,16(s0)
80002d8c:	84b2                	mv	s1,a2
80002d8e:	a065                	j	80002e36 <_printf_i+0x286>
80002d90:	431c                	lw	a5,0(a4)
80002d92:	41d0                	lw	a2,4(a1)
80002d94:	4581                	li	a1,0
80002d96:	00478693          	addi	a3,a5,4
80002d9a:	c314                	sw	a3,0(a4)
80002d9c:	4384                	lw	s1,0(a5)
80002d9e:	8526                	mv	a0,s1
80002da0:	2549                	jal	80003422 <memchr>
80002da2:	c119                	beqz	a0,80002da8 <_printf_i+0x1f8>
80002da4:	8d05                	sub	a0,a0,s1
80002da6:	c048                	sw	a0,4(s0)
80002da8:	405c                	lw	a5,4(s0)
80002daa:	c81c                	sw	a5,16(s0)
80002dac:	040401a3          	sb	zero,67(s0)
80002db0:	a059                	j	80002e36 <_printf_i+0x286>
80002db2:	4814                	lw	a3,16(s0)
80002db4:	8626                	mv	a2,s1
80002db6:	85ce                	mv	a1,s3
80002db8:	854a                	mv	a0,s2
80002dba:	9a02                	jalr	s4
80002dbc:	09550763          	beq	a0,s5,80002e4a <_printf_i+0x29a>
80002dc0:	401c                	lw	a5,0(s0)
80002dc2:	8b89                	andi	a5,a5,2
80002dc4:	e78d                	bnez	a5,80002dee <_printf_i+0x23e>
80002dc6:	47b2                	lw	a5,12(sp)
80002dc8:	4448                	lw	a0,12(s0)
80002dca:	08f55163          	ble	a5,a0,80002e4c <_printf_i+0x29c>
80002dce:	853e                	mv	a0,a5
80002dd0:	a8b5                	j	80002e4c <_printf_i+0x29c>
80002dd2:	4685                	li	a3,1
80002dd4:	8656                	mv	a2,s5
80002dd6:	85ce                	mv	a1,s3
80002dd8:	854a                	mv	a0,s2
80002dda:	9a02                	jalr	s4
80002ddc:	07650763          	beq	a0,s6,80002e4a <_printf_i+0x29a>
80002de0:	0485                	addi	s1,s1,1
80002de2:	445c                	lw	a5,12(s0)
80002de4:	4732                	lw	a4,12(sp)
80002de6:	8f99                	sub	a5,a5,a4
80002de8:	fef4c5e3          	blt	s1,a5,80002dd2 <_printf_i+0x222>
80002dec:	bfe9                	j	80002dc6 <_printf_i+0x216>
80002dee:	4481                	li	s1,0
80002df0:	01940a93          	addi	s5,s0,25
80002df4:	5b7d                	li	s6,-1
80002df6:	b7f5                	j	80002de2 <_printf_i+0x232>
80002df8:	f00782e3          	beqz	a5,80002cfc <_printf_i+0x14c>
80002dfc:	84b2                	mv	s1,a2
80002dfe:	02e7f5b3          	remu	a1,a5,a4
80002e02:	14fd                	addi	s1,s1,-1
80002e04:	02e7d7b3          	divu	a5,a5,a4
80002e08:	95b6                	add	a1,a1,a3
80002e0a:	0005c583          	lbu	a1,0(a1)
80002e0e:	00b48023          	sb	a1,0(s1)
80002e12:	f7f5                	bnez	a5,80002dfe <_printf_i+0x24e>
80002e14:	47a1                	li	a5,8
80002e16:	00f71e63          	bne	a4,a5,80002e32 <_printf_i+0x282>
80002e1a:	401c                	lw	a5,0(s0)
80002e1c:	8b85                	andi	a5,a5,1
80002e1e:	cb91                	beqz	a5,80002e32 <_printf_i+0x282>
80002e20:	4058                	lw	a4,4(s0)
80002e22:	481c                	lw	a5,16(s0)
80002e24:	00e7c763          	blt	a5,a4,80002e32 <_printf_i+0x282>
80002e28:	03000793          	li	a5,48
80002e2c:	fef48fa3          	sb	a5,-1(s1)
80002e30:	14fd                	addi	s1,s1,-1
80002e32:	8e05                	sub	a2,a2,s1
80002e34:	c810                	sw	a2,16(s0)
80002e36:	8752                	mv	a4,s4
80002e38:	86ce                	mv	a3,s3
80002e3a:	0070                	addi	a2,sp,12
80002e3c:	85a2                	mv	a1,s0
80002e3e:	854a                	mv	a0,s2
80002e40:	c65ff0ef          	jal	ra,80002aa4 <_printf_common>
80002e44:	5afd                	li	s5,-1
80002e46:	f75516e3          	bne	a0,s5,80002db2 <_printf_i+0x202>
80002e4a:	557d                	li	a0,-1
80002e4c:	50b2                	lw	ra,44(sp)
80002e4e:	5422                	lw	s0,40(sp)
80002e50:	5492                	lw	s1,36(sp)
80002e52:	5902                	lw	s2,32(sp)
80002e54:	49f2                	lw	s3,28(sp)
80002e56:	4a62                	lw	s4,24(sp)
80002e58:	4ad2                	lw	s5,20(sp)
80002e5a:	4b42                	lw	s6,16(sp)
80002e5c:	6145                	addi	sp,sp,48
80002e5e:	8082                	ret

80002e60 <_sbrk_r>:
80002e60:	1141                	addi	sp,sp,-16
80002e62:	c422                	sw	s0,8(sp)
80002e64:	842a                	mv	s0,a0
80002e66:	852e                	mv	a0,a1
80002e68:	10000797          	auipc	a5,0x10000
80002e6c:	2e07a623          	sw	zero,748(a5) # 90003154 <errno>
80002e70:	c606                	sw	ra,12(sp)
80002e72:	8b6ff0ef          	jal	ra,80001f28 <_sbrk>
80002e76:	57fd                	li	a5,-1
80002e78:	00f51963          	bne	a0,a5,80002e8a <_sbrk_r+0x2a>
80002e7c:	10000797          	auipc	a5,0x10000
80002e80:	2d878793          	addi	a5,a5,728 # 90003154 <errno>
80002e84:	439c                	lw	a5,0(a5)
80002e86:	c391                	beqz	a5,80002e8a <_sbrk_r+0x2a>
80002e88:	c01c                	sw	a5,0(s0)
80002e8a:	40b2                	lw	ra,12(sp)
80002e8c:	4422                	lw	s0,8(sp)
80002e8e:	0141                	addi	sp,sp,16
80002e90:	8082                	ret

80002e92 <__sread>:
80002e92:	1141                	addi	sp,sp,-16
80002e94:	c422                	sw	s0,8(sp)
80002e96:	842e                	mv	s0,a1
80002e98:	00e59583          	lh	a1,14(a1)
80002e9c:	c606                	sw	ra,12(sp)
80002e9e:	25a1                	jal	800034e6 <_read_r>
80002ea0:	00054963          	bltz	a0,80002eb2 <__sread+0x20>
80002ea4:	487c                	lw	a5,84(s0)
80002ea6:	97aa                	add	a5,a5,a0
80002ea8:	c87c                	sw	a5,84(s0)
80002eaa:	40b2                	lw	ra,12(sp)
80002eac:	4422                	lw	s0,8(sp)
80002eae:	0141                	addi	sp,sp,16
80002eb0:	8082                	ret
80002eb2:	00c45783          	lhu	a5,12(s0)
80002eb6:	777d                	lui	a4,0xfffff
80002eb8:	177d                	addi	a4,a4,-1
80002eba:	8ff9                	and	a5,a5,a4
80002ebc:	00f41623          	sh	a5,12(s0)
80002ec0:	b7ed                	j	80002eaa <__sread+0x18>

80002ec2 <__swrite>:
80002ec2:	00c5d783          	lhu	a5,12(a1)
80002ec6:	1101                	addi	sp,sp,-32
80002ec8:	cc22                	sw	s0,24(sp)
80002eca:	ca26                	sw	s1,20(sp)
80002ecc:	c84a                	sw	s2,16(sp)
80002ece:	c64e                	sw	s3,12(sp)
80002ed0:	ce06                	sw	ra,28(sp)
80002ed2:	1007f793          	andi	a5,a5,256
80002ed6:	84aa                	mv	s1,a0
80002ed8:	842e                	mv	s0,a1
80002eda:	8932                	mv	s2,a2
80002edc:	89b6                	mv	s3,a3
80002ede:	c791                	beqz	a5,80002eea <__swrite+0x28>
80002ee0:	00e59583          	lh	a1,14(a1)
80002ee4:	4689                	li	a3,2
80002ee6:	4601                	li	a2,0
80002ee8:	2131                	jal	800032f4 <_lseek_r>
80002eea:	00c45783          	lhu	a5,12(s0)
80002eee:	777d                	lui	a4,0xfffff
80002ef0:	177d                	addi	a4,a4,-1
80002ef2:	8ff9                	and	a5,a5,a4
80002ef4:	00f41623          	sh	a5,12(s0)
80002ef8:	00e41583          	lh	a1,14(s0)
80002efc:	4462                	lw	s0,24(sp)
80002efe:	40f2                	lw	ra,28(sp)
80002f00:	86ce                	mv	a3,s3
80002f02:	864a                	mv	a2,s2
80002f04:	49b2                	lw	s3,12(sp)
80002f06:	4942                	lw	s2,16(sp)
80002f08:	8526                	mv	a0,s1
80002f0a:	44d2                	lw	s1,20(sp)
80002f0c:	6105                	addi	sp,sp,32
80002f0e:	c02ff06f          	j	80002310 <_write_r>

80002f12 <__sseek>:
80002f12:	1141                	addi	sp,sp,-16
80002f14:	c422                	sw	s0,8(sp)
80002f16:	842e                	mv	s0,a1
80002f18:	00e59583          	lh	a1,14(a1)
80002f1c:	c606                	sw	ra,12(sp)
80002f1e:	2ed9                	jal	800032f4 <_lseek_r>
80002f20:	57fd                	li	a5,-1
80002f22:	00c45703          	lhu	a4,12(s0)
80002f26:	00f51b63          	bne	a0,a5,80002f3c <__sseek+0x2a>
80002f2a:	77fd                	lui	a5,0xfffff
80002f2c:	17fd                	addi	a5,a5,-1
80002f2e:	8ff9                	and	a5,a5,a4
80002f30:	00f41623          	sh	a5,12(s0)
80002f34:	40b2                	lw	ra,12(sp)
80002f36:	4422                	lw	s0,8(sp)
80002f38:	0141                	addi	sp,sp,16
80002f3a:	8082                	ret
80002f3c:	6785                	lui	a5,0x1
80002f3e:	8fd9                	or	a5,a5,a4
80002f40:	00f41623          	sh	a5,12(s0)
80002f44:	c868                	sw	a0,84(s0)
80002f46:	b7fd                	j	80002f34 <__sseek+0x22>

80002f48 <__sclose>:
80002f48:	00e59583          	lh	a1,14(a1)
80002f4c:	aac9                	j	8000311e <_close_r>

80002f4e <__swbuf_r>:
80002f4e:	1101                	addi	sp,sp,-32
80002f50:	cc22                	sw	s0,24(sp)
80002f52:	ca26                	sw	s1,20(sp)
80002f54:	c84a                	sw	s2,16(sp)
80002f56:	ce06                	sw	ra,28(sp)
80002f58:	c64e                	sw	s3,12(sp)
80002f5a:	84aa                	mv	s1,a0
80002f5c:	892e                	mv	s2,a1
80002f5e:	8432                	mv	s0,a2
80002f60:	c509                	beqz	a0,80002f6a <__swbuf_r+0x1c>
80002f62:	4d1c                	lw	a5,24(a0)
80002f64:	e399                	bnez	a5,80002f6a <__swbuf_r+0x1c>
80002f66:	df0ff0ef          	jal	ra,80002556 <__sinit>
80002f6a:	0fffd797          	auipc	a5,0xfffd
80002f6e:	1de78793          	addi	a5,a5,478 # 90000148 <__sf_fake_stdin>
80002f72:	06f41263          	bne	s0,a5,80002fd6 <__swbuf_r+0x88>
80002f76:	40c0                	lw	s0,4(s1)
80002f78:	4c1c                	lw	a5,24(s0)
80002f7a:	c41c                	sw	a5,8(s0)
80002f7c:	00c45783          	lhu	a5,12(s0)
80002f80:	8ba1                	andi	a5,a5,8
80002f82:	cbb5                	beqz	a5,80002ff6 <__swbuf_r+0xa8>
80002f84:	481c                	lw	a5,16(s0)
80002f86:	cba5                	beqz	a5,80002ff6 <__swbuf_r+0xa8>
80002f88:	481c                	lw	a5,16(s0)
80002f8a:	4008                	lw	a0,0(s0)
80002f8c:	0ff97993          	andi	s3,s2,255
80002f90:	0ff97913          	andi	s2,s2,255
80002f94:	8d1d                	sub	a0,a0,a5
80002f96:	485c                	lw	a5,20(s0)
80002f98:	00f54663          	blt	a0,a5,80002fa4 <__swbuf_r+0x56>
80002f9c:	85a2                	mv	a1,s0
80002f9e:	8526                	mv	a0,s1
80002fa0:	24f5                	jal	8000328c <_fflush_r>
80002fa2:	ed31                	bnez	a0,80002ffe <__swbuf_r+0xb0>
80002fa4:	441c                	lw	a5,8(s0)
80002fa6:	0505                	addi	a0,a0,1
80002fa8:	17fd                	addi	a5,a5,-1
80002faa:	c41c                	sw	a5,8(s0)
80002fac:	401c                	lw	a5,0(s0)
80002fae:	00178713          	addi	a4,a5,1
80002fb2:	c018                	sw	a4,0(s0)
80002fb4:	01378023          	sb	s3,0(a5)
80002fb8:	485c                	lw	a5,20(s0)
80002fba:	00a78963          	beq	a5,a0,80002fcc <__swbuf_r+0x7e>
80002fbe:	00c45783          	lhu	a5,12(s0)
80002fc2:	8b85                	andi	a5,a5,1
80002fc4:	cf95                	beqz	a5,80003000 <__swbuf_r+0xb2>
80002fc6:	47a9                	li	a5,10
80002fc8:	02f91c63          	bne	s2,a5,80003000 <__swbuf_r+0xb2>
80002fcc:	85a2                	mv	a1,s0
80002fce:	8526                	mv	a0,s1
80002fd0:	2c75                	jal	8000328c <_fflush_r>
80002fd2:	c51d                	beqz	a0,80003000 <__swbuf_r+0xb2>
80002fd4:	a02d                	j	80002ffe <__swbuf_r+0xb0>
80002fd6:	0fffd797          	auipc	a5,0xfffd
80002fda:	19278793          	addi	a5,a5,402 # 90000168 <__sf_fake_stdout>
80002fde:	00f41463          	bne	s0,a5,80002fe6 <__swbuf_r+0x98>
80002fe2:	4480                	lw	s0,8(s1)
80002fe4:	bf51                	j	80002f78 <__swbuf_r+0x2a>
80002fe6:	0fffd797          	auipc	a5,0xfffd
80002fea:	14278793          	addi	a5,a5,322 # 90000128 <__sf_fake_stderr>
80002fee:	f8f415e3          	bne	s0,a5,80002f78 <__swbuf_r+0x2a>
80002ff2:	44c0                	lw	s0,12(s1)
80002ff4:	b751                	j	80002f78 <__swbuf_r+0x2a>
80002ff6:	85a2                	mv	a1,s0
80002ff8:	8526                	mv	a0,s1
80002ffa:	2819                	jal	80003010 <__swsetup_r>
80002ffc:	d551                	beqz	a0,80002f88 <__swbuf_r+0x3a>
80002ffe:	597d                	li	s2,-1
80003000:	40f2                	lw	ra,28(sp)
80003002:	4462                	lw	s0,24(sp)
80003004:	854a                	mv	a0,s2
80003006:	44d2                	lw	s1,20(sp)
80003008:	4942                	lw	s2,16(sp)
8000300a:	49b2                	lw	s3,12(sp)
8000300c:	6105                	addi	sp,sp,32
8000300e:	8082                	ret

80003010 <__swsetup_r>:
80003010:	1141                	addi	sp,sp,-16
80003012:	81018793          	addi	a5,gp,-2032 # 90000238 <_impure_ptr>
80003016:	c226                	sw	s1,4(sp)
80003018:	4384                	lw	s1,0(a5)
8000301a:	c422                	sw	s0,8(sp)
8000301c:	c04a                	sw	s2,0(sp)
8000301e:	c606                	sw	ra,12(sp)
80003020:	892a                	mv	s2,a0
80003022:	842e                	mv	s0,a1
80003024:	c491                	beqz	s1,80003030 <__swsetup_r+0x20>
80003026:	4c9c                	lw	a5,24(s1)
80003028:	e781                	bnez	a5,80003030 <__swsetup_r+0x20>
8000302a:	8526                	mv	a0,s1
8000302c:	d2aff0ef          	jal	ra,80002556 <__sinit>
80003030:	0fffd797          	auipc	a5,0xfffd
80003034:	11878793          	addi	a5,a5,280 # 90000148 <__sf_fake_stdin>
80003038:	02f41c63          	bne	s0,a5,80003070 <__swsetup_r+0x60>
8000303c:	40c0                	lw	s0,4(s1)
8000303e:	00c41703          	lh	a4,12(s0)
80003042:	01071793          	slli	a5,a4,0x10
80003046:	83c1                	srli	a5,a5,0x10
80003048:	0087f693          	andi	a3,a5,8
8000304c:	eeb5                	bnez	a3,800030c8 <__swsetup_r+0xb8>
8000304e:	0107f693          	andi	a3,a5,16
80003052:	ee9d                	bnez	a3,80003090 <__swsetup_r+0x80>
80003054:	47a5                	li	a5,9
80003056:	00f92023          	sw	a5,0(s2)
8000305a:	04076713          	ori	a4,a4,64
8000305e:	00e41623          	sh	a4,12(s0)
80003062:	557d                	li	a0,-1
80003064:	40b2                	lw	ra,12(sp)
80003066:	4422                	lw	s0,8(sp)
80003068:	4492                	lw	s1,4(sp)
8000306a:	4902                	lw	s2,0(sp)
8000306c:	0141                	addi	sp,sp,16
8000306e:	8082                	ret
80003070:	0fffd797          	auipc	a5,0xfffd
80003074:	0f878793          	addi	a5,a5,248 # 90000168 <__sf_fake_stdout>
80003078:	00f41463          	bne	s0,a5,80003080 <__swsetup_r+0x70>
8000307c:	4480                	lw	s0,8(s1)
8000307e:	b7c1                	j	8000303e <__swsetup_r+0x2e>
80003080:	0fffd797          	auipc	a5,0xfffd
80003084:	0a878793          	addi	a5,a5,168 # 90000128 <__sf_fake_stderr>
80003088:	faf41be3          	bne	s0,a5,8000303e <__swsetup_r+0x2e>
8000308c:	44c0                	lw	s0,12(s1)
8000308e:	bf45                	j	8000303e <__swsetup_r+0x2e>
80003090:	8b91                	andi	a5,a5,4
80003092:	c78d                	beqz	a5,800030bc <__swsetup_r+0xac>
80003094:	584c                	lw	a1,52(s0)
80003096:	c989                	beqz	a1,800030a8 <__swsetup_r+0x98>
80003098:	04440793          	addi	a5,s0,68
8000309c:	00f58463          	beq	a1,a5,800030a4 <__swsetup_r+0x94>
800030a0:	854a                	mv	a0,s2
800030a2:	2e79                	jal	80003440 <_free_r>
800030a4:	02042a23          	sw	zero,52(s0)
800030a8:	00c45783          	lhu	a5,12(s0)
800030ac:	00042223          	sw	zero,4(s0)
800030b0:	fdb7f793          	andi	a5,a5,-37
800030b4:	00f41623          	sh	a5,12(s0)
800030b8:	481c                	lw	a5,16(s0)
800030ba:	c01c                	sw	a5,0(s0)
800030bc:	00c45783          	lhu	a5,12(s0)
800030c0:	0087e793          	ori	a5,a5,8
800030c4:	00f41623          	sh	a5,12(s0)
800030c8:	481c                	lw	a5,16(s0)
800030ca:	ef81                	bnez	a5,800030e2 <__swsetup_r+0xd2>
800030cc:	00c45783          	lhu	a5,12(s0)
800030d0:	20000713          	li	a4,512
800030d4:	2807f793          	andi	a5,a5,640
800030d8:	00e78563          	beq	a5,a4,800030e2 <__swsetup_r+0xd2>
800030dc:	85a2                	mv	a1,s0
800030de:	854a                	mv	a0,s2
800030e0:	244d                	jal	80003382 <__smakebuf_r>
800030e2:	00c45783          	lhu	a5,12(s0)
800030e6:	0017f713          	andi	a4,a5,1
800030ea:	c705                	beqz	a4,80003112 <__swsetup_r+0x102>
800030ec:	485c                	lw	a5,20(s0)
800030ee:	00042423          	sw	zero,8(s0)
800030f2:	40f007b3          	neg	a5,a5
800030f6:	cc1c                	sw	a5,24(s0)
800030f8:	481c                	lw	a5,16(s0)
800030fa:	4501                	li	a0,0
800030fc:	f7a5                	bnez	a5,80003064 <__swsetup_r+0x54>
800030fe:	00c41783          	lh	a5,12(s0)
80003102:	0807f713          	andi	a4,a5,128
80003106:	df39                	beqz	a4,80003064 <__swsetup_r+0x54>
80003108:	0407e793          	ori	a5,a5,64
8000310c:	00f41623          	sh	a5,12(s0)
80003110:	bf89                	j	80003062 <__swsetup_r+0x52>
80003112:	8b89                	andi	a5,a5,2
80003114:	4701                	li	a4,0
80003116:	e391                	bnez	a5,8000311a <__swsetup_r+0x10a>
80003118:	4858                	lw	a4,20(s0)
8000311a:	c418                	sw	a4,8(s0)
8000311c:	bff1                	j	800030f8 <__swsetup_r+0xe8>

8000311e <_close_r>:
8000311e:	1141                	addi	sp,sp,-16
80003120:	c422                	sw	s0,8(sp)
80003122:	842a                	mv	s0,a0
80003124:	852e                	mv	a0,a1
80003126:	10000797          	auipc	a5,0x10000
8000312a:	0207a723          	sw	zero,46(a5) # 90003154 <errno>
8000312e:	c606                	sw	ra,12(sp)
80003130:	d15fe0ef          	jal	ra,80001e44 <_close>
80003134:	57fd                	li	a5,-1
80003136:	00f51963          	bne	a0,a5,80003148 <_close_r+0x2a>
8000313a:	10000797          	auipc	a5,0x10000
8000313e:	01a78793          	addi	a5,a5,26 # 90003154 <errno>
80003142:	439c                	lw	a5,0(a5)
80003144:	c391                	beqz	a5,80003148 <_close_r+0x2a>
80003146:	c01c                	sw	a5,0(s0)
80003148:	40b2                	lw	ra,12(sp)
8000314a:	4422                	lw	s0,8(sp)
8000314c:	0141                	addi	sp,sp,16
8000314e:	8082                	ret

80003150 <__sflush_r>:
80003150:	00c5d783          	lhu	a5,12(a1)
80003154:	1101                	addi	sp,sp,-32
80003156:	cc22                	sw	s0,24(sp)
80003158:	ca26                	sw	s1,20(sp)
8000315a:	ce06                	sw	ra,28(sp)
8000315c:	c84a                	sw	s2,16(sp)
8000315e:	c64e                	sw	s3,12(sp)
80003160:	0087f713          	andi	a4,a5,8
80003164:	84aa                	mv	s1,a0
80003166:	842e                	mv	s0,a1
80003168:	ef71                	bnez	a4,80003244 <__sflush_r+0xf4>
8000316a:	41d8                	lw	a4,4(a1)
8000316c:	00e04d63          	bgtz	a4,80003186 <__sflush_r+0x36>
80003170:	41b8                	lw	a4,64(a1)
80003172:	00e04a63          	bgtz	a4,80003186 <__sflush_r+0x36>
80003176:	4501                	li	a0,0
80003178:	40f2                	lw	ra,28(sp)
8000317a:	4462                	lw	s0,24(sp)
8000317c:	44d2                	lw	s1,20(sp)
8000317e:	4942                	lw	s2,16(sp)
80003180:	49b2                	lw	s3,12(sp)
80003182:	6105                	addi	sp,sp,32
80003184:	8082                	ret
80003186:	5458                	lw	a4,44(s0)
80003188:	d77d                	beqz	a4,80003176 <__sflush_r+0x26>
8000318a:	0004a903          	lw	s2,0(s1)
8000318e:	01379693          	slli	a3,a5,0x13
80003192:	0004a023          	sw	zero,0(s1)
80003196:	500c                	lw	a1,32(s0)
80003198:	0606dd63          	bgez	a3,80003212 <__sflush_r+0xc2>
8000319c:	4870                	lw	a2,84(s0)
8000319e:	00c45783          	lhu	a5,12(s0)
800031a2:	8b91                	andi	a5,a5,4
800031a4:	c799                	beqz	a5,800031b2 <__sflush_r+0x62>
800031a6:	405c                	lw	a5,4(s0)
800031a8:	8e1d                	sub	a2,a2,a5
800031aa:	585c                	lw	a5,52(s0)
800031ac:	c399                	beqz	a5,800031b2 <__sflush_r+0x62>
800031ae:	403c                	lw	a5,64(s0)
800031b0:	8e1d                	sub	a2,a2,a5
800031b2:	545c                	lw	a5,44(s0)
800031b4:	500c                	lw	a1,32(s0)
800031b6:	4681                	li	a3,0
800031b8:	8526                	mv	a0,s1
800031ba:	9782                	jalr	a5
800031bc:	57fd                	li	a5,-1
800031be:	00c45703          	lhu	a4,12(s0)
800031c2:	00f51d63          	bne	a0,a5,800031dc <__sflush_r+0x8c>
800031c6:	4094                	lw	a3,0(s1)
800031c8:	47f5                	li	a5,29
800031ca:	06d7e763          	bltu	a5,a3,80003238 <__sflush_r+0xe8>
800031ce:	204007b7          	lui	a5,0x20400
800031d2:	0785                	addi	a5,a5,1
800031d4:	00d7d7b3          	srl	a5,a5,a3
800031d8:	8b85                	andi	a5,a5,1
800031da:	cfb9                	beqz	a5,80003238 <__sflush_r+0xe8>
800031dc:	481c                	lw	a5,16(s0)
800031de:	00042223          	sw	zero,4(s0)
800031e2:	c01c                	sw	a5,0(s0)
800031e4:	01371793          	slli	a5,a4,0x13
800031e8:	0007d863          	bgez	a5,800031f8 <__sflush_r+0xa8>
800031ec:	57fd                	li	a5,-1
800031ee:	00f51463          	bne	a0,a5,800031f6 <__sflush_r+0xa6>
800031f2:	409c                	lw	a5,0(s1)
800031f4:	e391                	bnez	a5,800031f8 <__sflush_r+0xa8>
800031f6:	c868                	sw	a0,84(s0)
800031f8:	584c                	lw	a1,52(s0)
800031fa:	0124a023          	sw	s2,0(s1)
800031fe:	dda5                	beqz	a1,80003176 <__sflush_r+0x26>
80003200:	04440793          	addi	a5,s0,68
80003204:	00f58463          	beq	a1,a5,8000320c <__sflush_r+0xbc>
80003208:	8526                	mv	a0,s1
8000320a:	2c1d                	jal	80003440 <_free_r>
8000320c:	02042a23          	sw	zero,52(s0)
80003210:	b79d                	j	80003176 <__sflush_r+0x26>
80003212:	4601                	li	a2,0
80003214:	4685                	li	a3,1
80003216:	8526                	mv	a0,s1
80003218:	9702                	jalr	a4
8000321a:	57fd                	li	a5,-1
8000321c:	862a                	mv	a2,a0
8000321e:	f8f510e3          	bne	a0,a5,8000319e <__sflush_r+0x4e>
80003222:	409c                	lw	a5,0(s1)
80003224:	dfad                	beqz	a5,8000319e <__sflush_r+0x4e>
80003226:	4775                	li	a4,29
80003228:	00e78563          	beq	a5,a4,80003232 <__sflush_r+0xe2>
8000322c:	4759                	li	a4,22
8000322e:	04e79463          	bne	a5,a4,80003276 <__sflush_r+0x126>
80003232:	0124a023          	sw	s2,0(s1)
80003236:	b781                	j	80003176 <__sflush_r+0x26>
80003238:	04076713          	ori	a4,a4,64
8000323c:	00e41623          	sh	a4,12(s0)
80003240:	557d                	li	a0,-1
80003242:	bf1d                	j	80003178 <__sflush_r+0x28>
80003244:	0105a983          	lw	s3,16(a1)
80003248:	f20987e3          	beqz	s3,80003176 <__sflush_r+0x26>
8000324c:	0005a903          	lw	s2,0(a1)
80003250:	8b8d                	andi	a5,a5,3
80003252:	0135a023          	sw	s3,0(a1)
80003256:	41390933          	sub	s2,s2,s3
8000325a:	4701                	li	a4,0
8000325c:	e391                	bnez	a5,80003260 <__sflush_r+0x110>
8000325e:	49d8                	lw	a4,20(a1)
80003260:	c418                	sw	a4,8(s0)
80003262:	f1205ae3          	blez	s2,80003176 <__sflush_r+0x26>
80003266:	541c                	lw	a5,40(s0)
80003268:	500c                	lw	a1,32(s0)
8000326a:	86ca                	mv	a3,s2
8000326c:	864e                	mv	a2,s3
8000326e:	8526                	mv	a0,s1
80003270:	9782                	jalr	a5
80003272:	00a04963          	bgtz	a0,80003284 <__sflush_r+0x134>
80003276:	00c45783          	lhu	a5,12(s0)
8000327a:	0407e793          	ori	a5,a5,64
8000327e:	00f41623          	sh	a5,12(s0)
80003282:	bf7d                	j	80003240 <__sflush_r+0xf0>
80003284:	99aa                	add	s3,s3,a0
80003286:	40a90933          	sub	s2,s2,a0
8000328a:	bfe1                	j	80003262 <__sflush_r+0x112>

8000328c <_fflush_r>:
8000328c:	499c                	lw	a5,16(a1)
8000328e:	c3ad                	beqz	a5,800032f0 <_fflush_r+0x64>
80003290:	1101                	addi	sp,sp,-32
80003292:	cc22                	sw	s0,24(sp)
80003294:	ce06                	sw	ra,28(sp)
80003296:	842a                	mv	s0,a0
80003298:	c519                	beqz	a0,800032a6 <_fflush_r+0x1a>
8000329a:	4d1c                	lw	a5,24(a0)
8000329c:	e789                	bnez	a5,800032a6 <_fflush_r+0x1a>
8000329e:	c62e                	sw	a1,12(sp)
800032a0:	ab6ff0ef          	jal	ra,80002556 <__sinit>
800032a4:	45b2                	lw	a1,12(sp)
800032a6:	0fffd797          	auipc	a5,0xfffd
800032aa:	ea278793          	addi	a5,a5,-350 # 90000148 <__sf_fake_stdin>
800032ae:	00f59c63          	bne	a1,a5,800032c6 <_fflush_r+0x3a>
800032b2:	404c                	lw	a1,4(s0)
800032b4:	00c59783          	lh	a5,12(a1)
800032b8:	c79d                	beqz	a5,800032e6 <_fflush_r+0x5a>
800032ba:	8522                	mv	a0,s0
800032bc:	4462                	lw	s0,24(sp)
800032be:	40f2                	lw	ra,28(sp)
800032c0:	6105                	addi	sp,sp,32
800032c2:	e8fff06f          	j	80003150 <__sflush_r>
800032c6:	0fffd797          	auipc	a5,0xfffd
800032ca:	ea278793          	addi	a5,a5,-350 # 90000168 <__sf_fake_stdout>
800032ce:	00f59463          	bne	a1,a5,800032d6 <_fflush_r+0x4a>
800032d2:	440c                	lw	a1,8(s0)
800032d4:	b7c5                	j	800032b4 <_fflush_r+0x28>
800032d6:	0fffd797          	auipc	a5,0xfffd
800032da:	e5278793          	addi	a5,a5,-430 # 90000128 <__sf_fake_stderr>
800032de:	fcf59be3          	bne	a1,a5,800032b4 <_fflush_r+0x28>
800032e2:	444c                	lw	a1,12(s0)
800032e4:	bfc1                	j	800032b4 <_fflush_r+0x28>
800032e6:	40f2                	lw	ra,28(sp)
800032e8:	4462                	lw	s0,24(sp)
800032ea:	4501                	li	a0,0
800032ec:	6105                	addi	sp,sp,32
800032ee:	8082                	ret
800032f0:	4501                	li	a0,0
800032f2:	8082                	ret

800032f4 <_lseek_r>:
800032f4:	1141                	addi	sp,sp,-16
800032f6:	c422                	sw	s0,8(sp)
800032f8:	842a                	mv	s0,a0
800032fa:	852e                	mv	a0,a1
800032fc:	85b2                	mv	a1,a2
800032fe:	8636                	mv	a2,a3
80003300:	10000797          	auipc	a5,0x10000
80003304:	e407aa23          	sw	zero,-428(a5) # 90003154 <errno>
80003308:	c606                	sw	ra,12(sp)
8000330a:	c07fe0ef          	jal	ra,80001f10 <_lseek>
8000330e:	57fd                	li	a5,-1
80003310:	00f51963          	bne	a0,a5,80003322 <_lseek_r+0x2e>
80003314:	10000797          	auipc	a5,0x10000
80003318:	e4078793          	addi	a5,a5,-448 # 90003154 <errno>
8000331c:	439c                	lw	a5,0(a5)
8000331e:	c391                	beqz	a5,80003322 <_lseek_r+0x2e>
80003320:	c01c                	sw	a5,0(s0)
80003322:	40b2                	lw	ra,12(sp)
80003324:	4422                	lw	s0,8(sp)
80003326:	0141                	addi	sp,sp,16
80003328:	8082                	ret

8000332a <__swhatbuf_r>:
8000332a:	711d                	addi	sp,sp,-96
8000332c:	caa6                	sw	s1,84(sp)
8000332e:	84ae                	mv	s1,a1
80003330:	00e59583          	lh	a1,14(a1)
80003334:	cca2                	sw	s0,88(sp)
80003336:	ce86                	sw	ra,92(sp)
80003338:	8432                	mv	s0,a2
8000333a:	0005dc63          	bgez	a1,80003352 <__swhatbuf_r+0x28>
8000333e:	00c4d783          	lhu	a5,12(s1)
80003342:	0006a023          	sw	zero,0(a3)
80003346:	0807f793          	andi	a5,a5,128
8000334a:	e39d                	bnez	a5,80003370 <__swhatbuf_r+0x46>
8000334c:	40000793          	li	a5,1024
80003350:	a015                	j	80003374 <__swhatbuf_r+0x4a>
80003352:	0850                	addi	a2,sp,20
80003354:	c636                	sw	a3,12(sp)
80003356:	22d9                	jal	8000351c <_fstat_r>
80003358:	46b2                	lw	a3,12(sp)
8000335a:	fe0542e3          	bltz	a0,8000333e <__swhatbuf_r+0x14>
8000335e:	4762                	lw	a4,24(sp)
80003360:	67bd                	lui	a5,0xf
80003362:	8ff9                	and	a5,a5,a4
80003364:	7779                	lui	a4,0xffffe
80003366:	97ba                	add	a5,a5,a4
80003368:	0017b793          	seqz	a5,a5
8000336c:	c29c                	sw	a5,0(a3)
8000336e:	bff9                	j	8000334c <__swhatbuf_r+0x22>
80003370:	04000793          	li	a5,64
80003374:	c01c                	sw	a5,0(s0)
80003376:	40f6                	lw	ra,92(sp)
80003378:	4466                	lw	s0,88(sp)
8000337a:	44d6                	lw	s1,84(sp)
8000337c:	4501                	li	a0,0
8000337e:	6125                	addi	sp,sp,96
80003380:	8082                	ret

80003382 <__smakebuf_r>:
80003382:	00c5d783          	lhu	a5,12(a1)
80003386:	1101                	addi	sp,sp,-32
80003388:	cc22                	sw	s0,24(sp)
8000338a:	ce06                	sw	ra,28(sp)
8000338c:	ca26                	sw	s1,20(sp)
8000338e:	c84a                	sw	s2,16(sp)
80003390:	8b89                	andi	a5,a5,2
80003392:	842e                	mv	s0,a1
80003394:	cf89                	beqz	a5,800033ae <__smakebuf_r+0x2c>
80003396:	04740793          	addi	a5,s0,71
8000339a:	c01c                	sw	a5,0(s0)
8000339c:	c81c                	sw	a5,16(s0)
8000339e:	4785                	li	a5,1
800033a0:	c85c                	sw	a5,20(s0)
800033a2:	40f2                	lw	ra,28(sp)
800033a4:	4462                	lw	s0,24(sp)
800033a6:	44d2                	lw	s1,20(sp)
800033a8:	4942                	lw	s2,16(sp)
800033aa:	6105                	addi	sp,sp,32
800033ac:	8082                	ret
800033ae:	0074                	addi	a3,sp,12
800033b0:	0030                	addi	a2,sp,8
800033b2:	84aa                	mv	s1,a0
800033b4:	f77ff0ef          	jal	ra,8000332a <__swhatbuf_r>
800033b8:	45a2                	lw	a1,8(sp)
800033ba:	892a                	mv	s2,a0
800033bc:	8526                	mv	a0,s1
800033be:	b06ff0ef          	jal	ra,800026c4 <_malloc_r>
800033c2:	ed01                	bnez	a0,800033da <__smakebuf_r+0x58>
800033c4:	00c41783          	lh	a5,12(s0)
800033c8:	2007f713          	andi	a4,a5,512
800033cc:	fb79                	bnez	a4,800033a2 <__smakebuf_r+0x20>
800033ce:	9bf1                	andi	a5,a5,-4
800033d0:	0027e793          	ori	a5,a5,2
800033d4:	00f41623          	sh	a5,12(s0)
800033d8:	bf7d                	j	80003396 <__smakebuf_r+0x14>
800033da:	fffff797          	auipc	a5,0xfffff
800033de:	0c278793          	addi	a5,a5,194 # 8000249c <_cleanup_r>
800033e2:	d49c                	sw	a5,40(s1)
800033e4:	00c45783          	lhu	a5,12(s0)
800033e8:	c008                	sw	a0,0(s0)
800033ea:	c808                	sw	a0,16(s0)
800033ec:	0807e793          	ori	a5,a5,128
800033f0:	00f41623          	sh	a5,12(s0)
800033f4:	47a2                	lw	a5,8(sp)
800033f6:	c85c                	sw	a5,20(s0)
800033f8:	47b2                	lw	a5,12(sp)
800033fa:	cf89                	beqz	a5,80003414 <__smakebuf_r+0x92>
800033fc:	00e41583          	lh	a1,14(s0)
80003400:	8526                	mv	a0,s1
80003402:	22b9                	jal	80003550 <_isatty_r>
80003404:	c901                	beqz	a0,80003414 <__smakebuf_r+0x92>
80003406:	00c45783          	lhu	a5,12(s0)
8000340a:	9bf1                	andi	a5,a5,-4
8000340c:	0017e793          	ori	a5,a5,1
80003410:	00f41623          	sh	a5,12(s0)
80003414:	00c45783          	lhu	a5,12(s0)
80003418:	00f96933          	or	s2,s2,a5
8000341c:	01241623          	sh	s2,12(s0)
80003420:	b749                	j	800033a2 <__smakebuf_r+0x20>

80003422 <memchr>:
80003422:	0ff5f593          	andi	a1,a1,255
80003426:	962a                	add	a2,a2,a0
80003428:	00c51463          	bne	a0,a2,80003430 <memchr+0xe>
8000342c:	4501                	li	a0,0
8000342e:	8082                	ret
80003430:	00054783          	lbu	a5,0(a0)
80003434:	feb78de3          	beq	a5,a1,8000342e <memchr+0xc>
80003438:	0505                	addi	a0,a0,1
8000343a:	b7fd                	j	80003428 <memchr+0x6>

8000343c <__malloc_lock>:
8000343c:	8082                	ret

8000343e <__malloc_unlock>:
8000343e:	8082                	ret

80003440 <_free_r>:
80003440:	c1d5                	beqz	a1,800034e4 <_free_r+0xa4>
80003442:	ffc5a783          	lw	a5,-4(a1)
80003446:	1141                	addi	sp,sp,-16
80003448:	c422                	sw	s0,8(sp)
8000344a:	c606                	sw	ra,12(sp)
8000344c:	c226                	sw	s1,4(sp)
8000344e:	ffc58413          	addi	s0,a1,-4
80003452:	0007d363          	bgez	a5,80003458 <_free_r+0x18>
80003456:	943e                	add	s0,s0,a5
80003458:	84aa                	mv	s1,a0
8000345a:	37cd                	jal	8000343c <__malloc_lock>
8000345c:	8a418793          	addi	a5,gp,-1884 # 900002cc <__malloc_free_list>
80003460:	439c                	lw	a5,0(a5)
80003462:	ef81                	bnez	a5,8000347a <_free_r+0x3a>
80003464:	00042223          	sw	zero,4(s0)
80003468:	8a81a223          	sw	s0,-1884(gp) # 900002cc <__malloc_free_list>
8000346c:	4422                	lw	s0,8(sp)
8000346e:	40b2                	lw	ra,12(sp)
80003470:	8526                	mv	a0,s1
80003472:	4492                	lw	s1,4(sp)
80003474:	0141                	addi	sp,sp,16
80003476:	fc9ff06f          	j	8000343e <__malloc_unlock>
8000347a:	00f47e63          	bleu	a5,s0,80003496 <_free_r+0x56>
8000347e:	4014                	lw	a3,0(s0)
80003480:	00d40733          	add	a4,s0,a3
80003484:	00e79663          	bne	a5,a4,80003490 <_free_r+0x50>
80003488:	4398                	lw	a4,0(a5)
8000348a:	43dc                	lw	a5,4(a5)
8000348c:	9736                	add	a4,a4,a3
8000348e:	c018                	sw	a4,0(s0)
80003490:	c05c                	sw	a5,4(s0)
80003492:	bfd9                	j	80003468 <_free_r+0x28>
80003494:	87ba                	mv	a5,a4
80003496:	43d8                	lw	a4,4(a5)
80003498:	c319                	beqz	a4,8000349e <_free_r+0x5e>
8000349a:	fee47de3          	bleu	a4,s0,80003494 <_free_r+0x54>
8000349e:	4394                	lw	a3,0(a5)
800034a0:	00d78633          	add	a2,a5,a3
800034a4:	00861f63          	bne	a2,s0,800034c2 <_free_r+0x82>
800034a8:	4010                	lw	a2,0(s0)
800034aa:	96b2                	add	a3,a3,a2
800034ac:	c394                	sw	a3,0(a5)
800034ae:	00d78633          	add	a2,a5,a3
800034b2:	fac71de3          	bne	a4,a2,8000346c <_free_r+0x2c>
800034b6:	4310                	lw	a2,0(a4)
800034b8:	4358                	lw	a4,4(a4)
800034ba:	96b2                	add	a3,a3,a2
800034bc:	c394                	sw	a3,0(a5)
800034be:	c3d8                	sw	a4,4(a5)
800034c0:	b775                	j	8000346c <_free_r+0x2c>
800034c2:	00c47563          	bleu	a2,s0,800034cc <_free_r+0x8c>
800034c6:	47b1                	li	a5,12
800034c8:	c09c                	sw	a5,0(s1)
800034ca:	b74d                	j	8000346c <_free_r+0x2c>
800034cc:	4010                	lw	a2,0(s0)
800034ce:	00c406b3          	add	a3,s0,a2
800034d2:	00d71663          	bne	a4,a3,800034de <_free_r+0x9e>
800034d6:	4314                	lw	a3,0(a4)
800034d8:	4358                	lw	a4,4(a4)
800034da:	96b2                	add	a3,a3,a2
800034dc:	c014                	sw	a3,0(s0)
800034de:	c058                	sw	a4,4(s0)
800034e0:	c3c0                	sw	s0,4(a5)
800034e2:	b769                	j	8000346c <_free_r+0x2c>
800034e4:	8082                	ret

800034e6 <_read_r>:
800034e6:	1141                	addi	sp,sp,-16
800034e8:	c422                	sw	s0,8(sp)
800034ea:	842a                	mv	s0,a0
800034ec:	852e                	mv	a0,a1
800034ee:	85b2                	mv	a1,a2
800034f0:	8636                	mv	a2,a3
800034f2:	10000797          	auipc	a5,0x10000
800034f6:	c607a123          	sw	zero,-926(a5) # 90003154 <errno>
800034fa:	c606                	sw	ra,12(sp)
800034fc:	a29fe0ef          	jal	ra,80001f24 <_read>
80003500:	57fd                	li	a5,-1
80003502:	00f51963          	bne	a0,a5,80003514 <_read_r+0x2e>
80003506:	10000797          	auipc	a5,0x10000
8000350a:	c4e78793          	addi	a5,a5,-946 # 90003154 <errno>
8000350e:	439c                	lw	a5,0(a5)
80003510:	c391                	beqz	a5,80003514 <_read_r+0x2e>
80003512:	c01c                	sw	a5,0(s0)
80003514:	40b2                	lw	ra,12(sp)
80003516:	4422                	lw	s0,8(sp)
80003518:	0141                	addi	sp,sp,16
8000351a:	8082                	ret

8000351c <_fstat_r>:
8000351c:	1141                	addi	sp,sp,-16
8000351e:	c422                	sw	s0,8(sp)
80003520:	842a                	mv	s0,a0
80003522:	852e                	mv	a0,a1
80003524:	85b2                	mv	a1,a2
80003526:	10000797          	auipc	a5,0x10000
8000352a:	c207a723          	sw	zero,-978(a5) # 90003154 <errno>
8000352e:	c606                	sw	ra,12(sp)
80003530:	9bdfe0ef          	jal	ra,80001eec <_fstat>
80003534:	57fd                	li	a5,-1
80003536:	00f51963          	bne	a0,a5,80003548 <_fstat_r+0x2c>
8000353a:	10000797          	auipc	a5,0x10000
8000353e:	c1a78793          	addi	a5,a5,-998 # 90003154 <errno>
80003542:	439c                	lw	a5,0(a5)
80003544:	c391                	beqz	a5,80003548 <_fstat_r+0x2c>
80003546:	c01c                	sw	a5,0(s0)
80003548:	40b2                	lw	ra,12(sp)
8000354a:	4422                	lw	s0,8(sp)
8000354c:	0141                	addi	sp,sp,16
8000354e:	8082                	ret

80003550 <_isatty_r>:
80003550:	1141                	addi	sp,sp,-16
80003552:	c422                	sw	s0,8(sp)
80003554:	842a                	mv	s0,a0
80003556:	852e                	mv	a0,a1
80003558:	10000797          	auipc	a5,0x10000
8000355c:	be07ae23          	sw	zero,-1028(a5) # 90003154 <errno>
80003560:	c606                	sw	ra,12(sp)
80003562:	9a7fe0ef          	jal	ra,80001f08 <_isatty>
80003566:	57fd                	li	a5,-1
80003568:	00f51963          	bne	a0,a5,8000357a <_isatty_r+0x2a>
8000356c:	10000797          	auipc	a5,0x10000
80003570:	be878793          	addi	a5,a5,-1048 # 90003154 <errno>
80003574:	439c                	lw	a5,0(a5)
80003576:	c391                	beqz	a5,8000357a <_isatty_r+0x2a>
80003578:	c01c                	sw	a5,0(s0)
8000357a:	40b2                	lw	ra,12(sp)
8000357c:	4422                	lw	s0,8(sp)
8000357e:	0141                	addi	sp,sp,16
80003580:	8082                	ret
